#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2014-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'fileutils'
require 'uri'
require 'shellwords'
require 'zlib'
require 'nokogiri'
require 'haus/utils'

class Dlnode; end

class Dlnode::Pattern
  attr_accessor :selector, :attribute, :regexp, :gsub

  def initialize pattern_str
    @selector, @attribute, @regexp, @gsub = parse pattern_str
  end

  def blank? x
    x.nil? or x =~ /\A *\z/
  end

  def default_attribute elem
    case elem
    when 'a' then 'href'
    when 'img' then 'src'
    end
  end

  def parse pattern_str
    a, b, c, d = pattern_str.split /(?<!\\):/, 4

    [blank?(a) ? 'a' : a,
     blank?(b) ? nil : b,
     blank?(c) ? nil : Haus::Utils.regexp_parse(c),
     blank?(d) ? nil : parse_gsub(d)]
  end

  def parse_gsub gsub_str
    pat, rep = gsub_str.split /(?<!\\),/, 2
    [Haus::Utils.regexp_parse(pat), rep || '']
  end
end

class Dlnode::FilenamePattern
  attr_accessor :parent_selector, :child_selector, :attribute

  def initialize pattern_str
    @parent_selector, @child_selector, @attribute = parse pattern_str
  end

  def blank? x
    x.nil? or x =~ /\A *\z/
  end

  def parse pattern_str
    a, b = pattern_str.split /(?<!\\):/, 2

    if a and a.index('<')
      p, c = a.split '<', 2
      [blank?(p) ?  "" : p ,
       blank?(c) ? nil : c,
       blank?(b) ? nil : b]
    else
      [nil,
       blank?(a) ? nil : a,
       blank?(b) ? nil : b]
    end
  end
end

class Dlnode::Resource
  attr_accessor :url, :referer, :form_data, :base_uri, :elem

  def initialize url = nil, opts = {}
    @url = url
    @form_data = opts[:form_data]
    @referer = opts[:referer]
    @base_uri = opts[:base_uri]
    @elem = opts[:elem]
  end

  def urijoin base, path
    URI.join(base, path).to_s
  rescue URI::InvalidURIError
    # Maybe the path isn't properly escaped
    begin
      URI.join(base, URI.escape(path)).to_s
    rescue URI::InvalidURIError
    end
  end

  def extract_resources pattern, opts
    html_str = fetch opts

    return [] if html_str.nil?

    html_str.gsub! *pattern.gsub if pattern.gsub

    Nokogiri::HTML.parse(html_str).css(pattern.selector).reduce [] do |v, elem|
      if not pattern.attribute and elem.name == 'form'
        form_data = elem.css('input').map { |i| [i['name'], i['value']] }
        path = elem.attr 'action'
      else
        attr = pattern.attribute || pattern.default_attribute(elem.name)
        path = attr ? elem.attr(attr) : elem.text
      end

      if path and u = urijoin(base_uri || url, path)
        r = self.class.new u,
                           :form_data => form_data,
                           :base_uri => base_uri,
                           :referer => (url if opts[:send_referer] and url !~ %r{\Afile://}),
                           :elem => elem
        r = nil if pattern.regexp and u !~ pattern.regexp
      end

      r ? v << r : v
    end
  end

  def command opts = {}
    ref = ['--referer', referer] if referer
    cmd = ['curl', '--silent', *Dlnode.common_curl_args(opts), *ref]

    form_data.each do |kv|
      cmd << '--form-string' << kv.map { |e| URI.encode_www_form_component e }.join('=')
    end if form_data

    cmd.concat opts[:curl_opts] if opts[:curl_opts]

    cmd << url
  end

  def fetch opts = {}
    cmd = command opts
    warn cmd.shelljoin if opts[:verbose]
    buf = IO.popen(cmd) { |io| io.read }

    if $?.exitstatus.zero?
      $stderr.print "\e[32m.\e[0m"
      try_gunzip buf
    else
      $stderr.print "\e[31m.\e[0m\nFAILED to %s %s\n" % [form_data ? 'POST' : 'GET', url]
      nil
    end
  end

  def try_gunzip buf
    if buf[0] == "\x1f" and buf[1] == "\x8b"
      begin
        z = Zlib::Inflate.new Zlib::MAX_WBITS|16
        buf = z.inflate buf
      ensure
        z.finish
        z.close
      end
    end
    buf
  end

  def fetch_leaves patterns = [], opts = {}
    p, *rest = patterns
    resources = extract_resources p, opts

    if rest.any?
      resources.flat_map { |r| r.fetch_leaves rest, opts }
    else
      if opts[:verbose]
        if resources.empty?
          warn "\e[31mEmpty branch: #{url}\e[0m"
        else
          warn "\e[32mBranch #{url} leaf count: #{resources.size}\e[0m"
        end
      end
      resources
    end
  end
end

class Dlnode
  DEFAULTS = {
    :base_uri => nil,
    :cookie_jar => nil,
    :dir => '.',
    :dir_from_url => false,
    :format => nil,
    :filename_behavior => 0,
    :filename_patterns => [':title', ':'].map { |p| Dlnode::FilenamePattern.new p },
    :index => 1,
    :start => 1,
    :max_time => nil,
    :connect_timeout => nil,
    :no_download => false,
    :poll => -1,
    :send_referer => false,
    :user_agent => 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:58.0) Gecko/20100101 Firefox/58.0',
    :retry => nil,
    :verbose => false
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 32 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Download nested HTML resources. Uses cURL.

        Usage: #{File.basename __FILE__} [options] url-or-path [selector=a]:[attribute=href]:[regexp]:[gsub] …

        dlnode http://files.example.com/ a:href:subhost.com 'a[id=download]:href:\\.tar\\.gz$'
        dlnode http://files.example.com/ ::subhost.com form[rel=lolcat]:: img[class=lolcat]:src:

        Options:
      BANNER

      opt.on '-b', '--base-uri URL', 'Set an alternate base uri for relative links in file:// urls' do |arg|
        @base_uri = arg
      end

      opt.on '-c', '--cookie-jar PATH', 'Same as `curl --cookie-jar`' do |arg|
        @cookie_jar = File.expand_path arg
      end

      opt.on '-d', '--dir PATH', 'Download directory; current working directory by default' do |arg|
        @dir = File.expand_path arg
      end

      opt.on '-D', '--dir-from-url', 'Set --dir to munged domain + path' do |arg|
        @dir_from_url = true
      end

      opt.on '-f', '--format [DIR/]BASE-%02d', 'Rename resources with given format spec' do |arg|
        if arg =~ %r{.+/.+}
          @dir, _, @format = arg.rpartition '/'
        else
          @format = arg
        end
      end

      opt.on '-F', '--filename-from N,[selector][:attr],…', "See FILENAME_FROM_SELECTORS" do |arg|
        n, patterns = arg.split ',', 2
        raise ArgumentError if n !~ /\A[012]\z/
        @filename_behavior = n.to_i
        @filename_patterns = patterns.split(',').map { |p| Dlnode::FilenamePattern.new p } if patterns
      end

      opt.on '-i', '--index N[:START]', 'Begin index at N, and skip until START' % @index do |arg|
        @index, @start = arg.split(':', 2).map &:to_i
        @start = @index if @start.nil? or @start < @index
      end

      opt.on '-m', '--max-time DURATION', 'Same as `curl --max-time`' do |arg|
        @max_time = seconds arg
      end

      opt.on '-n', '--no-download', 'Do not download resources, but print the commands that would be executed' do |arg|
        @no_download = true
      end

      opt.on '-p', '--poll DURATION', 'Repeat downloads' do |arg|
        @poll = seconds arg
      end

      opt.on '-r', '--retry N', Integer, 'Same as `curl --retry`' do |arg|
        @retry = arg
      end

      opt.on '-t', '--connect-timeout DURATION', 'Same as `curl --connect-timeout`' do |arg|
        @connect_timeout = seconds arg
      end

      opt.on '-v', '--verbose' do
        @verbose = true
      end

      opt.on '-A', '--user-agent STRING', "DEFAULT: #{DEFAULTS[:user_agent]}" do |arg|
        @user_agent = arg
      end

      opt.on '-O', '--curl-opts OPTS', 'Extra options to pass directly to cURL' do |arg|
        @curl_opts = arg.shellsplit
      end

      opt.on '-R', '--send-referer', 'Send HTTP Referer (sic) headers when fetching resources' do
        @send_referer = true
      end

      opt.separator <<-EOS.gsub /^ {6}/, ''

      FILENAME_FROM_SELECTORS:

          -F N,[selector][:attr],…

          N:
            0: Do not use value from first matching selector as filename.
            1: Use value from first matching selector as filename.
            2: Join url path basename and and value from first matching
               selector as filename.

            0 is the default behavior.

          [selector][:attr],…
            List of selectors relative to a matched resource from which the
            filename for that resource will be derived.

            Selectors can be provided in the following way:

              [[parent-selector] <] [child-selector]

            The child-selector is rooted at the parent node returned by
            parent-selector. If parent-selector is missing, but `<` is
            present, the direct parent of the resource node becomes the root
            of the child-selector.

            If no selector is given, the current resource is selected.

            The attr argument specifies the attribute that holds the filename.
            If no attr is given, the text value of the node is used.

            The default list of selectors is `:title,:`.

          EXAMPLES:

            -F "2,form < label.filename,< .filename:title"
      EOS
    end
  end

  def self.common_curl_args opts = {}
    args = ['--fail', '--location', '--user-agent', opts[:user_agent] || DEFAULTS[:user_agent]]
    args.concat ['--cookie-jar', opts[:cookie_jar]] if opts[:cookie_jar]
    args.concat ['--retry', opts[:retry].to_s] if opts[:retry]
    args.concat ['--max-time', opts[:max_time].to_s] if opts[:max_time]
    args.concat ['--connect-timeout', opts[:connect_timeout].to_s] if opts[:connect_timeout]
    args
  end

  def seconds str
    str.scan(/(\d+(?:\.\d+)?)(\D*)/).inject 0.0 do |sum, (num, unit)|
      sum + case unit
      when 'D','d'    then num.to_f * 24 * 60 * 60
      when 'H','h'    then num.to_f * 60 * 60
      when 'M','m'    then num.to_f * 60
      when 'S','s','' then num.to_f # default unit
      else raise ArgumentError, 'Invalid time format'
      end
    end.round
  end

  def url_basename url
    path = URI.parse(url).path
    path.nil? ? url : File.basename(URI.parse(url).path)
  end

  def format_filename fmt, idx, file
    if fmt.index '%s'
      fmt % [idx, File.extname(file)]
    else
      (fmt % idx) << File.extname(file)
    end
  end

  def sanitize_filename f
    f.tr('/', '-').gsub /[^\p{Print}]/, '_'
  end

  def find_relative elem, patterns
    patterns.each do |p|
      case p.parent_selector
      when nil
        root = elem
      when ""
        root = elem.parent
      else
        root = elem.ancestors(p.parent_selector.strip).first
      end

      if p.child_selector
        node = root.css(p.child_selector).first
      else
        node = root
      end

      t = p.attribute ? node.attr(p.attribute) : node.text
      return t if t and t.size > 0
    end
    nil
  end

  def get_filename_from_patterns fname, elem
    title = find_relative elem, @filename_patterns
    return fname if title.nil?

    f_ext = File.extname fname
    t_ext = File.extname title

    case @filename_behavior
    when 1
      fname = File.basename title, t_ext

      if t_ext.length == 0
        fname << f_ext
      elsif f_ext.length == 0
        fname << t_ext
      elsif t_ext.size > 5 and f_ext.size < 5
        fname << f_ext
      elsif f_ext.size > 5 and t_ext.size < 5
        fname << t_ext
      elsif f_ext.size < 5 and t_ext.size < 5
        fname << t_ext
      else
        fname << f_ext
      end
    when 2
      fname = File.basename fname, f_ext
      fname << "-[#{File.basename title, t_ext}"
      fname << t_ext if f_ext != t_ext
      fname << "]"
      fname << f_ext
    else
      raise RuntimeError
    end

    fname
  end

  # Returns array of arguments for exec: […, path, url]
  def command resource, idx, opts = options
    f = url_basename resource.url

    if @filename_behavior > 0 and (elem = resource.elem)
      f = get_filename_from_patterns f, elem
    end

    f = sanitize_filename f

    path = File.join opts[:dir], (opts[:format] ? format_filename(opts[:format], idx, f) : f)
    ref = ['--referer', resource.referer] if resource.referer

    ['curl', '--progress-bar',
             *Dlnode.common_curl_args(opts),
             *ref,
             *opts[:curl_opts],
             '--output', path,
             resource.url]
  end

  def map_commands resources, opts = options
    Δ = opts[:start] - opts[:index]

    resources.drop(Δ).map.with_index do |r, i|
      command r, i + opts[:index] + Δ, opts
    end
  end

  def options
    {
      :index => @index,
      :start => @start,
      :cookie_jar => @cookie_jar,
      :dir => @dir,
      :format => @format,
      :send_referer => @send_referer,
      :user_agent => @user_agent,
      :curl_opts => @curl_opts,
      :retry => @retry,
      :max_time => @max_time,
      :connect_timeout => @connect_timeout,
      :verbose => @verbose
    }
  end

  def download! url, *pattern_args
    opts = options
    patterns = pattern_args.map { |p| Pattern.new p }
    resources = Resource.new(url, :base_uri => @base_uri).fetch_leaves patterns, opts
    commands = map_commands resources, opts

    if commands.empty?
      warn "\nNo resources found!"
      :no_resources
    elsif @no_download
      warn "\n%d resource(s)" % resources.size
      puts commands.map(&:shelljoin)
      :ok
    else
      $stderr.puts
      FileUtils.mkdir_p @dir

      n = resources.size
      failed = []

      commands.each_with_index do |cmd, i|
        path, url = cmd[-2..-1]

        warn "[#{i+1}/#{n}] #{url} → #{path}"

        if File.exists? path
          warn 'File exists!'
        else
          warn cmd.shelljoin if @verbose
          system *cmd
          failed << cmd if not $?.exitstatus.zero?
        end
      end

      if failed.any?
        $stderr.puts "\e[31mFAILED:\e[0m "
        failed.each { |cmd| puts cmd.shelljoin }
        :fail
      else
        :ok
      end
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.size > 1
    url, *rest = args
    url = "file://#{URI.escape File.expand_path(url)}" if url !~ %r{\w+://}

    if @dir_from_url and @dir == DEFAULTS[:dir]
      u = URI.parse url
      @dir = [u.host, u.path].map { |x| sanitize_filename x }.join
    end

    sleeper = nil

    if @poll > 0
      Thread.new { loop { $stdin.gets nil; sleeper&.kill } }
    end

    loop do
      case download! url, *rest
      when :no_resources then exit 2
      when :fail then exit 1
      end

      break if @poll <= 0

      sleeper = Thread.new { sleep @poll }
      sleeper.join
    end
  end
end

$0 = File.basename(__FILE__) and Dlnode.new.run ARGV if $0 == __FILE__
