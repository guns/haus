#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

require 'optparse'
require 'find'
require 'set'
require 'shellwords'

# puts nokoslurp('https://en.wikipedia.org/wiki/Video_file_format').css('table').find { |t| t.to_s.index 'File extension' }.css('tr').drop(1).flat_map { |tr| tr.css('td:nth-child(2)').flat_map { |td| td.text.downcase.scan(/\.\w+/) } }.sort.uniq
VIDEO_EXTENSIONS = Set.new %w[
  .3g2
  .3gp
  .amv
  .asf
  .avi
  .drc
  .f4a
  .f4b
  .f4p
  .f4v
  .flv
  .gifv
  .hevc
  .m2ts
  .m2v
  .m4p
  .m4v
  .mkv
  .mng
  .mov
  .mp2
  .mp4
  .mpe
  .mpeg
  .mpg
  .mpv
  .mts
  .mxf
  .nsv
  .ogv
  .qt
  .rm
  .rmvb
  .roq
  .svi
  .ts
  .viv
  .vob
  .webm
  .wmv
  .yuv
]

command = ['mpv']
limit = nil
open = false
paths = []
pattern = nil
print0 = false
recurse = true
reverse = false
sort = nil

args = OptionParser.new nil do |opt|
  opt.banner = <<-EOF.gsub /^ */, ''
    Usage: #{File.basename __FILE__} [options] [dir, â€¦]

    Options:
  EOF

  opt.on '-0', '--print0' do
    print0 = true
  end

  opt.on '-1', '--no-recurse' do
    recurse = false
  end

  opt.on '-c', '--command COMMAND', "Default: #{command.shelljoin}" do |arg|
    command = arg.shellsplit
  end

  opt.on '-l', '--limit N', Integer do |arg|
    limit = arg
  end

  opt.on '-o', '--open' do
    open = true
  end

  opt.on '-p', '--pattern PATTERN', Regexp do |p|
    pattern = p
    pattern = Regexp.new(p.source, p.options | Regexp::IGNORECASE) unless p.source.match?(/\p{Lu}/)
  end

  opt.on '-r', '--reverse' do
    reverse = true
  end

  opt.on '-t', '--sort-mtime' do
    sort = :mtime
  end
end.parse ARGV

args = ['.'] if args.empty?

def append_video ps, path, pattern
  if File.file? path and VIDEO_EXTENSIONS.include? File.extname(path).downcase
    return if pattern and path !~ pattern
    ps << File.expand_path(path)
  end
end

if recurse
  Find.find *args do |path|
    append_video paths, path, pattern
  end
else
  Dir['*'].each do |path|
    append_video paths, path, pattern
  end
end

abort if paths.empty?

case sort
when :mtime
  paths.sort_by! { |f| -File.mtime(f).to_i }
end

paths.reverse! if reverse
paths = paths.take(limit) if limit

if open
  exec *command, '--', *paths
else
  print print0 ? paths.join("\0") : paths.join("\n") << "\n"
end
