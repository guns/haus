#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'etc'
require 'haus/utils'

class Checkpermissions
  USER_FILE_PATTERN = Regexp.compile %q(\A%s/) % File.expand_path('~')

  DEFAULTS = {
    :default_mask => 0022,
    :quiet => false,
    :verbose => false
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 32 do |opt|
      opt.banner = <<~BANNER
        Usage: #{File.basename __FILE__} [options] spec …

        Specs are:

            path:user:group:octal-mask:opt1,opt2

        The path is mandatory, but the spec will be ignored if the path does
        not exist.

        The user is optional, and defaults to the current user if the path is
        in the current user's home directory, and user 0 otherwise.

        The group is optional and will not be checked by default.

        The octal-mask is optional and defaults to 0022.

        There are two options:

            no-recurse:   Do not recurse into a directory
            glob:         Interpret the path as a glob

        Options:
      BANNER

      opt.on '-m', '--default-mask OCTAL_MASK', 'DEFAULT: %04o' % DEFAULTS[:default_mask] do |arg|
        @default_mask = arg.to_i 8
      end

      opt.on '-q', '--quiet' do
        @quiet = true
      end

      opt.on '-v', '--verbose' do
        @verbose = true
      end
    end
  end

  def ignore_link? path
    File.symlink?(path) and Haus::Utils.readlink(path) =~ %r{\A/proc/self/|\A/dev/null\z}
  end

  def compile_specs spec_arguments
    specs = []

    spec_arguments.each do |arg|
      path, user, group, mask, options = arg.split(':', 5).map { |x| x.empty? ? nil : x }

      opts = options ? options.split(',') : []
      glob = opts.include? 'glob'
      no_recurse = opts.include? 'no-recurse'

      next if path.nil?

      if glob
        paths = Dir.glob File.expand_path(path)
        opts.delete 'glob'
        specs.concat compile_specs(paths.map { |p| [p, user, group, mask, opts.join(',')].join ':' })
        next
      end

      path = File.expand_path path
      next if not File.exists? path

      owner_uid = user ? Etc.getpwnam(user).uid : (path =~ USER_FILE_PATTERN ? Process.euid : 0)
      owner_gid = Etc.getgrnam(group).gid if group
      mask = mask ? mask.to_i(8) : @default_mask

      specs.push [path, owner_uid, owner_gid, mask]

      if File.directory? path and not no_recurse
        specs.concat Dir.glob(File.join(path, '**/*'), File::FNM_DOTMATCH).map { |p|
          [p, owner_uid, owner_gid, mask]
        }
      end
    end

    specs
  end

  def check specs
    errors = []

    specs.each do |(path, owner_uid, owner_gid, mask)|
      if ignore_link? path
        warn ":: Skipping symlink #{path} → #{Haus::Utils.readlink path}" unless @quiet
        next
      end

      begin
        stat = File.stat path
      rescue Errno::ENOENT => e
        if File.symlink? path
           warn ":: Skipping broken symlink #{path}" unless @quiet
        else
          raise e
        end
        next
      end

      warn path if @verbose

      if owner_uid and stat.uid != owner_uid and stat.uid != 0
        errors << "\e[31m%s: Expected owner %s, but is owned by %s\e[0m" % [
          path,
          (Etc.getpwuid(owner_uid).name.inspect rescue owner_uid),
          (Etc.getpwuid(stat.uid).name.inspect rescue stat.uid)
        ]
      elsif owner_gid and stat.gid != owner_gid and stat.gid != 0
        errors << "\e[31m%s: Expected group owner %s, but is group owned by %s\e[0m" % [
          path,
          (Etc.getgrgid(owner_gid).name.inspect rescue owner_gid),
          (Etc.getgrgid(stat.gid).name.inspect rescue stat.uid)
        ]
      elsif not (stat.mode & mask).zero?
        errors << "\e[31m%s: Mode %04o violates mask %04o\e[0m" % [
          path,
          stat.mode,
          mask
        ]
      end
    end

    errors
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.empty?
    errors = check compile_specs(args)
    if errors.any?
      puts errors
      abort
    end
  end
end

$0 = File.basename(__FILE__) and Checkpermissions.new.run ARGV if $0 == __FILE__
