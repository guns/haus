#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'set'
require 'uri'

class Getbadhosts
  DEFAULTS = {
    :all => false,
    :jobs => (File.read('/proc/cpuinfo').scan(/^processor/i).size rescue 1),
    :loopback => false,
    :ipv4_only => false,
  }

  # https://raw.githubusercontent.com/gorhill/uMatrix/master/assets/umatrix/hosts-files.json
  HOSTS_FILE_URLS = [
    "http://malwaredomains.lehigh.edu/files/immortal_domains.txt",
    "http://mirror.cedia.org.ec/malwaredomains/justdomains",
    "https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=1&mimetype=plaintext",
    "https://www.malwaredomainlist.com/hostslist/hosts.txt",
    "http://hosts-file.net/ad_servers.txt",
    "http://someonewhocares.org/hosts/hosts",
    "http://winhelp2002.mvps.org/hosts.txt",
    "http://malwaredomains.lehigh.edu/files/justdomains",
  ]

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
    @errlock = Mutex.new
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
        Fetch and print malware domains in hosts file format.

        The following lists are queried by default:

            #{HOSTS_FILE_URLS.join "\n            "}

        Alternate paths and URLs can be supplied on the command line.

        Usage: #{File.basename __FILE__} [options] [hosts-file-path-or-url â€¦]

        Options:
      BANNER

      opt.on '-a', '--all', 'Use both the default lists and urls specified on the command line' do
        @all = true
      end

      opt.on '-j', '--jobs N', Integer, "Number of concurrent network threads [DEFAULT: #{@jobs}]" do |n|
        @jobs = n
      end

      opt.on '-l', '--loopback', 'Generate loopback addresses instead of null (illegal) addresses' do
        @loopback = true
      end

      opt.on '-4', '--ipv4-only' do
        @ipv4_only = true
      end
    end
  end

  def get path
    @errlock.synchronize { warn ":: Reading #{path}" }

    if path =~ %r{\A\w+://}
      IO.popen ['curl', '--silent', '--location', '--user-agent', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0', path] do |io|
        io.read
      end
    else
      File.read path
    end
  end

  def extract_domains buf
    ds = []
    buf.each_line do |l|
      n = l.index '#'
      ws = (n ? l[0...n] : l).split
      case ws.size
      when 2 then ds << URI.parse('http://' + URI.encode(ws[1])).hostname
      when 1 then ds << URI.parse('http://' + URI.encode(ws[0])).hostname
      end
    end
    ds
  end

  def get_domains urls
    idx, domains, pool, ilock, dlock = -1, [], [], Mutex.new, Mutex.new

    @jobs.times do
      pool << Thread.new do
        loop do
          ilock.synchronize { idx += 1 }
          u = urls[idx]
          break if u.nil?
          begin
            ds = extract_domains get(u)
          rescue URI::InvalidURIError
            sleep 1 # Might be rate limiting
            ds = extract_domains get(u)
          end
          dlock.synchronize { domains.concat ds }
        end
      end
    end

    pool.each &:join
    domains.uniq.sort_by { |d| d.downcase.split('.').reverse }
  end

  def generate_hosts urls
    hosts = []
    ds = get_domains urls
    ip4, ip6 = @loopback ? %w[127.0.0.1 ::1] : %w[0.0.0.0 ::]

    if @ipv4_only
      ds.each { |d| hosts << "#{ip4}\t#{d}\n" }
    else
      ds.each { |d| hosts << "#{ip4}\t#{d}\n#{ip6}\t#{d}\n" }
    end

    hosts
  end

  def run arguments = []
    args = parser.parse arguments
    urls = args.empty? ? HOSTS_FILE_URLS : @all ? HOSTS_FILE_URLS + args : args
    puts generate_hosts(urls)
  end
end

$0 = File.basename(__FILE__) and Getbadhosts.new.run ARGV if $0 == __FILE__
