#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'set'

class Getmalwarehosts
  DEFAULTS = {
    :ipv4_only => false,
    :loopback => false,
    :all => false
  }

  # https://raw.githubusercontent.com/gorhill/uMatrix/master/assets/umatrix/hosts-files.json
  HOSTS_FILE_URLS = [
    "http://dns-bh.sagadc.org/immortal_domains.txt",
    "http://hosts-file.net/.%5Cad_servers.txt",
    "http://malwaredomains.lehigh.edu/files/justdomains",
    "http://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=1&mimetype=plaintext",
    "http://someonewhocares.org/hosts/hosts",
    "http://winhelp2002.mvps.org/hosts.txt",
    "http://www.malwaredomainlist.com/hostslist/hosts.txt",
  ]

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
        Fetch and print malware domains in hosts file format.

        The following lists are queried by default:

            #{HOSTS_FILE_URLS.join "\n            "}

        Alternate paths and URLs can be supplied on the command line.

        Usage: #{File.basename __FILE__} [options] [hosts-file-path-or-url â€¦]

        Options:
      BANNER

      opt.on '-4', '--ipv4-only' do
        @ipv4_only = true
      end

      opt.on '-l', '--loopback', 'Generate loopback addresses instead of null (illegal) addresses' do
        @loopback = true
      end

      opt.on '-a', '--all', 'Use both the default lists and urls specified on the command line' do
        @all = true
      end
    end
  end

  def get path
    warn "# Reading #{path}" if $stdout.tty?

    if path =~ %r{\A\w+://}
      IO.popen ['curl', '--progress', '--location', '--user-agent', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36', path] do |io|
        io.read
      end
    else
      File.read path
    end
  end

  def extract_domains buf
    ds = []
    buf.each_line do |l|
      n = l.index('#')
      ws = (n ? l[0...n] : l).split
      case ws.size
      when 2 then ds << ws[1]
      when 1 then ds << ws[0]
      end
    end
    ds
  end

  def generate_hosts urls
    domains, hosts = Set.new, ''

    urls.each { |u| domains.merge extract_domains(get u) }

    ds = domains.sort_by do |d|
      ws = d.split '.'
      ws.size > 2 ? ws[-2..-1].join : d
    end

    ip4, ip6 = @loopback ? %w[127.0.0.1 ::1] : %w[0.0.0.0 ::]

    if @ipv4_only
      ds.each { |d| hosts << "#{ip4}\t#{d}\n" }
    else
      ds.each { |d| hosts << "#{ip4}\t#{d}\n#{ip6}\t#{d}\n" }
    end

    hosts
  end

  def run arguments = []
    args = parser.parse arguments
    urls = args.empty? ? HOSTS_FILE_URLS : @all ? HOSTS_FILE_URLS + args : args
    puts generate_hosts(urls)
  end
end

$0 = File.basename(__FILE__) and Getmalwarehosts.new.run ARGV if $0 == __FILE__
