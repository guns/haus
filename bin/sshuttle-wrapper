#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012-2014 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'set'
require 'resolv'
require 'nerv/cli/superparser'

class SshuttleWrapper
  attr_reader :options
  attr_accessor :original_rules

  DNS_SERVERS = [
    %w[23.226.227.93 443],
    %w[208.67.220.220 443]
  ]

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.sshuttle ||= 'sshuttle'
    options.excluded ||= Set.new
    options.commands ||= []
    options.firewall_commands ||= []
    options.port ||= 3346 # IANA "trnsprntproxy"
  end

  def parser
    @parser ||= NERV::CLI::SuperParser.new nil, 28 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Tunnel ALL traffic through sshuttle and prevent any other outgoing
        connections.

        Usage: #{File.basename __FILE__} [options] [user@]host[:port]

        Options are a superset of sshuttle options, although sshuttle option
        arguments must be passed as a single shell parameter.

        e.g. #{File.basename $0} --python=/usr/bin/python2 user@host

        Options:
      BANNER

      opt.on '-c', '--command CMD', 'Command(s) to run after sshuttle terminates' do |arg|
        options.commands << arg
      end

      opt.on '-f', '--firewall-command CMD', 'Command(s) to run before appending final OUTPUT LOG+DROP' do |arg|
        options.firewall_commands << arg
      end

      opt.on '-p', '--port N', Integer, 'Local proxy port [DEFAULT: %s]' % options.port do |arg|
        options.port = arg
      end

      opt.on '-x', '--exclude SUBNET', "Same as sshuttle's --exclude" do |arg|
        options.excluded << resolve_cidr(arg)
      end

      opt.on '--sshuttle PATH', 'Path to sshuttle executable [DEFAULT: %s]' % options.sshuttle do |arg|
        options.sshuttle = File.expand_path arg
      end

      opt.on '-q', '--quiet' do
        options.quiet = true
        options.verbose = false
      end

      opt.on '-v', '--verbose' do
        options.quiet = false
        options.verbose = true
      end
    end
  end

  def resolve_cidr net
    host, bits = net.split '/', 2
    bits = nil if bits and bits.empty?
    ip = Resolv.getaddress host
    [ip, bits].compact.join '/'
  end

  def parse_ssh_host ssh_host
    ssh_host =~ /(([^@]*)@)?([^:]+)(:?(\d+)?)?/
    [$3, ($5 || 22).to_i]
  end

  def sh *args
    warn args.join(' ') unless options.quiet
    system *args or raise "#{args.join(' ').inspect} failed with status #{$?.exitstatus}"
  end

  def iptables_secure_outgoing host, port, excluded = options.excluded
    # Drop all outgoing by default
    sh *%W[iptables --flush OUTPUT]
    sh *%W[iptables --policy OUTPUT DROP]
    # except for outbound loopback
    sh *%W[iptables --append OUTPUT --out-interface lo --jump ACCEPT]
    # dnscrypt-proxy queries to DNS servers
    DNS_SERVERS.each do |addr, port|
      sh *%W[iptables --append OUTPUT --protocol udp --destination #{addr} --destination-port #{port} --jump ACCEPT]
    end
    # local redirects to the sshuttle daemon (from the gateway interface)
    sh *%W[iptables --append OUTPUT --protocol tcp --destination 127.0.0.1 --destination-port #{options.port} --jump ACCEPT]
    # traffic to the remote proxy server
    sh *%W[iptables --append OUTPUT --protocol tcp --destination #{host} --destination-port #{port} --jump ACCEPT]
    # and any excluded subnets
    excluded.each do |net|
      sh *%W[iptables --append OUTPUT --destination #{net} --jump ACCEPT]
    end
    # Execute firewall hooks now
    options.firewall_commands.each do |cmd|
      sh cmd
    end
    # Log the rest
    sh *%W[iptables --append OUTPUT --jump LOG --log-prefix #{'[OUTPUT DROPPED] '}]
  end

  def start_server ssh_host, xargs = []
    cmd = %W[#{options.sshuttle} --listen 127.0.0.1:#{options.port} --remote #{ssh_host}]
    options.excluded.each { |net| cmd << '--exclude' << net }
    cmd.concat xargs
    cmd << '0/0'

    warn cmd.join(' ') unless options.quiet
    pid = fork { exec *cmd, :err => options.verbose ? $stderr : '/dev/null' }

    trap :INT do
      trap :INT, 'DEFAULT'
      Process.kill :INT, pid
    end

    Process.wait pid
    yield if block_given?
  end

  def call *args
    xargs, hostargs = args.partition { |arg| arg =~ /\A-/ }
    raise 'Found multiple non-option arguments: %s' % hostargs.inspect if hostargs.size > 1

    ssh_host = hostargs.first
    host, port = parse_ssh_host ssh_host
    raise 'Could not parse ssh host argument' unless host

    iptables_secure_outgoing host, port

    start_server ssh_host, xargs do
      options.commands.each { |cmd| sh cmd }
    end
  end

  def run arguments = []
    args = parser.superparse arguments
    abort parser.help if args.empty?
    call *args
  end
end

$0 = File.basename(__FILE__) and SshuttleWrapper.new.run ARGV if $0 == __FILE__
