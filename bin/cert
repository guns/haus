#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2018 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'openssl'
require 'shellwords'
require 'fileutils'
require 'open3'
require 'digest/md5'
require 'digest/sha1'
require 'digest/sha2'
require 'base64'

class Cert
  X509_CERTIFICATE_PATTERN = /-+BEGIN(?: X509)? CERTIFICATE-+\n.*?\n-+END(?: X509)? CERTIFICATE-+/m
  TRUSTED_CERTIFICATE_PATTERN = /-+BEGIN TRUSTED CERTIFICATE-+\n.*?\n-+END TRUSTED CERTIFICATE-+/m
  ANY_CERTIFICATE_PATTERN = /-+BEGIN(?: X509| TRUSTED)? CERTIFICATE-+\n.*?\n-+END(?: X509| TRUSTED)? CERTIFICATE-+/m

  DEFAULTS = {
    :one => false,
    :certfile => nil,
    :keystore => nil,
    :keystore_pass => nil,
    :self_signed => false,
    :text_only => false
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 25 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
        Usage: #{File.basename __FILE__} [options] command [args]

        Arguments can be host:port, a PEM or DER certificate file, or '-' for STDIN.

        Commands:

            d[ump] [arg ...]          Dump certificates to stdout
            D[UMP] [arg ...]          Dump certificates after filtering through `openssl x509 -text`
            p[ublickey] [arg ...]     Dump public keys to stdout
            i[nfo] [arg ...]          Show detailed certificate information
            a[dd] arg ...             Add certificates to certfile
            r[m] arg ...              Remove certificates from certfile
            e[xec] arg ...            Run a command with CA environment variables set to certfile
            c[onsole]                 Open a Pry debugging session

        Options:
      BANNER

      opt.on '-1', '--one', 'Select only the first certificate / public key' do
        @one = true
      end

      opt.on '-f', '--certfile PATH', 'Certificate file, required for some commands' do |arg|
        @certfile = File.expand_path arg
      end

      opt.on '-k', '--keystore PATH', 'Create/Modify/Use Java Keystore file' do |arg|
        @keystore = File.expand_path arg
      end

      opt.on '-P', '--keystore-pass PASS', 'Optionally set password for keystore' do |arg|
        @keystore_pass = arg
      end

      opt.on '-s', '--self-signed', 'Select only self-signed certificates' do
        @self_signed = true
      end
    end
  end

  class Chain
    def self.x509_text certbuf
      Open3.popen2('openssl', 'x509', '-text') { |i, o| i.puts certbuf; i.close; o.read }
    end

    attr_reader :certs

    def initialize certs = []
      @certs = certs.dup.compact
      sort!
    end

    def [] i
      @certs[i]
    end

    def first
      Chain.new [@certs.first]
    end

    def self_signed? cert
      cert.subject.cmp(cert.issuer).zero?
    end

    def sort!
      @certs.sort_by! { |c| c.not_before }
      @certs.uniq { |c| c.to_der }
      self
    end

    def concat chain
      @certs.concat chain.certs
      sort!
      self
    end

    def - chain
      s = chain.certs.map &:to_der
      v = []
      @certs.each { |c| v << c unless s.include? c.to_der }
      @certs = v
      self
    end

    def select_self_signed!
      @certs.select! { |c| self_signed? c }
      self
    end

    def header cert
      der = cert.to_der
      [
        'Subject: %s' % cert.subject,
        'Issuer:  %s' % cert.issuer,
        'base64:  sha256//%s' % Base64.encode64(Digest::SHA256.digest(cert.public_key.to_der)).chomp,
        'SHA256:  %s' % Digest::SHA256.hexdigest(der),
        'SHA1:    %s' % Digest::SHA1.hexdigest(der),
        'MD5:     %s' % Digest::MD5.hexdigest(der),
      ]
    end

    def format text_only = false
      if text_only
        @certs.map do |cert|
          buf = Chain.x509_text cert
          cert = OpenSSL::X509::Certificate.new buf.force_encoding('ASCII-8BIT')
          [buf[/(.*)^-+BEGIN/m, 1], *header(cert), cert.to_s].join "\n"
        end.join "\n"
      else
        @certs.map { |c| (header(c) << c.to_s).join "\n" }.join "\n"
      end
    end

    def write_keystore keystore_path, keystore_pass
      # We generate keystores with random passwords, hence we won't know the
      # current store's password either.
      FileUtils.rm_f keystore_path

      @certs.each_with_index do |cert, i|
        cmd = [{ 'STOREPASS' => keystore_pass },
               'keytool', '-importcert', '-trustcacerts', '-noprompt',
               '-keystore', keystore_path,
               '-storepass:env', 'STOREPASS',
               '-alias', '%s-%d' % [File.basename(keystore_path, '.ks'), i]]
        IO.popen cmd, 'w' do |wr|
          wr.puts cert.to_s
        end
      end
    end

    def write_certfile certfile, keystore = nil, keystore_pass = nil, opts = {}
      File.open certfile, 'w' do |f|
        f.puts format(opts[:text_only])
      end

      write_keystore keystore, keystore_pass if @keystore
    end
  end

  def parse_certs_string string
    certs = string.force_encoding('ASCII-8BIT').scan @text_only ? ANY_CERTIFICATE_PATTERN : X509_CERTIFICATE_PATTERN

    if certs.any?
      Chain.new certs.map { |pem| OpenSSL::X509::Certificate.new pem }
    elsif (certs = string.force_encoding('ASCII-8BIT').scan(TRUSTED_CERTIFICATE_PATTERN)).any?
      warn '!! Reading OpenSSL TRUSTED CERTIFICATE without trust bits!'
      parse_certs_string certs.map { |pem| Chain.x509_text pem }.join("\n")
    else
      # Maybe DER format?
      Chain.new [OpenSSL::X509::Certificate.new(string)]
    end
  rescue OpenSSL::X509::CertificateError
    Chain.new
  end

  def ssl_get host, port = nil
    server = "#{host}:#{port || 443}".shellescape
    %x(openssl s_client -showcerts -connect #{server} < /dev/null 2>/dev/null)
  end

  def parse_server_arg server
    h, p = server.split ':', 2
    p = p.to_i if p
    [h, p]
  end

  def certfile
    raise "'certfile' is unset" if @certfile.nil?
    FileUtils.touch @certfile unless File.exists? @certfile
    @certfile
  end

  def makechain args, self_signed = @self_signed
    if args.is_a? String
      chain = parse_certs_string(File.read(args))
    else
      chain = args.reduce Chain.new do |ch, arg|
        if arg == '-'
          ch.concat parse_certs_string($stdin.read)
        elsif File.readable? arg
          ch.concat parse_certs_string(File.read(arg))
        else
          ch.concat parse_certs_string(ssl_get(*parse_server_arg(arg)))
        end
      end
    end

    self_signed ? chain.select_self_signed! : chain
  end

  def take chain
    @one ? chain.first : chain
  end

  def keystore_pass
    @keystore_pass ||= @keystore_pass || (require 'nerv/util/password'; NERV::Util::Password.password)
  end

  def save! chain
    chain.write_certfile certfile, @keystore, (keystore_pass if @keystore), :text_only => @text_only
  end

  def dump *args
    puts take(makechain(args)).format(@text_only)
  end

  def publickey *args
    puts take(makechain(args)).certs.map { |c| c.public_key.export }
  end

  def info *args
    puts take(makechain(args)).certs.map { |c| c.to_text + c.to_s }.join("\n")
  end

  def add *args
    save! makechain(certfile).concat(take(makechain(args)))
  end

  def rm *args
    save! makechain(certfile) - take(makechain(args))
  end

  # Duplicated in interactive.bash/cx()
  def exec *args
    env = {
      'CURL_CA_BUNDLE' => certfile, # curl
      'GIT_SSL_CAINFO' => certfile, # git
      'SSL_CERT_FILE'  => certfile  # ruby
    }
    if @keystore
      env['JVM_OPTS'] = "#{ENV['JVM_OPTS']} -Djavax.net.ssl.trustStore=#{@keystore.shellescape}"
    end
    Kernel.exec env, *args
  end

  def console *args
    require 'pry'
    c = makechain args
    binding.pry
  end

  def run arguments = []
    args = parser.parse arguments
    rest = args.drop 1

    case args.first
    when 'd', 'dump'      then dump *rest
    when 'D', 'DUMP'      then @text_only = true; dump *rest
    when 'p', 'publickey' then publickey *rest
    when 'i', 'info'      then info *rest
    when 'a', 'add'       then add *rest
    when 'r', 'rm'        then rm *rest
    when 'x', 'e', 'exec' then exec *rest
    when 'c', 'console'   then console *rest
    when nil              then @certfile ? dump : abort(parser.help)
    else abort parser.help
    end
  end
end

$0 = File.basename(__FILE__) and Cert.new.run ARGV if $0 == __FILE__
