#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <sung@metablu.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'httparty'
require 'nokogiri'

class Weather # {{{1
  class GoogleWeather # {{{2
    attr_reader   :raw_data, :data, :location, :info, :current, :forecast
    attr_accessor :days

    def initialize loc, opts = {}
      @location = loc
      @raw_data = HTTParty.get('http://www.google.com/ig/api', :query => { :weather => location })['xml_api_reply']['weather']
      @data     = rekey raw_data
      @info     = data['forecast_information']
      @current  = data['current_conditions']
      @forecast = data['forecast_conditions']
      self.days = opts['days'] || nil
    end

    def rekey hash
      new, old = {}, hash.dup

      old.each do |key, val|
        new[key] = case val
        when Hash  then val.keys == ['data'] ? val['data'] : rekey(val) # Recurse!
        when Array then val.map { |v| h = rekey v } # Recurse!
        else val
        end
      end

      new
    end

    def to_s
      return 'No forecast available for %s' % location.inspect if info.nil?

      lines, cell = [], '%-26s'

      # Current conditions
      lines[0] = cell % info['city']
      lines[1] = cell % current['wind_condition']
      lines[2] = cell % "Current:  #{current['temp_f']}°F"
      lines[3] = cell % current['humidity']
      lines[4] = cell % condition(current['condition'])

      # Upcoming
      forecast.take(days || forecast.count).each do |h|
        lines[1] << cell % h['day_of_week']
        lines[2] << cell % "High: #{h['high']}°F"
        lines[3] << cell % "Low:  #{h['low']}°F"
        lines[4] << cell % condition(h['condition'])
      end

      lines.map(&:rstrip).join "\n"
    end

    def condition str
      case str
      when /sunny|clear/i    then '☀ '
      when /cloud|overcast/i then '☁ '
      when /fog/i            then '░ '
      when /rain|showers/i   then '☔ '
      when /storm/i          then '☈ '
      when /hail/i           then '☄ '
      when /snow/i           then '❄ '
      else ''
      end + str
    end
  end

  class CheckIP # {{{2
    attr_reader :info

    def initialize
      html  = Nokogiri::HTML HTTParty.get('http://www.checkip.org/').to_s
      @info = Hash[html.css('#feature-list li').map { |n| n.children.text.split(':').map &:strip }]
    end

    def location
      info.values_at('City', 'State', 'Country').compact.join ' '
    end
  end # }}}

  def initialize args = []
    @args = args
    @opts = {}
  end

  def options
    OptionParser.new do |opt|
      opt.summary_width = 16

      opt.banner = %Q(\
        Weather forecast from undocumented iGoogle API

        Usage: #{File.basename __FILE__} [options] [location]

        Options:
      ).gsub /^ +/, ''

      opt.on '-d', '--days N', Integer, 'Number of days to show' do |arg|
        @opts[:days] = arg
      end

      opt.on '-j', '--json', 'Dump the source data as json' do
        require 'json'
        @opts[:json] = true
      end
    end
  end

  def report loc
    loc = current_location if loc.empty?
    gw  = GoogleWeather.new loc, :days => @opts[:days]
    @opts[:json] ? gw.raw_data.to_json : gw.to_s
  end

  def current_location
    CheckIP.new.location
  end

  def run
    args = options.parse @args
    puts report(args.join ' ')
  end
end

if $0 == __FILE__
  # Google Weather returns ISO-8859-1, but is marked as either ASCII-8BIT or
  # UTF-8. Parsing libraries seem to expect UTF-8, so we coerce our input.
  if defined? Encoding
    if defined? Crack
      Crack::XML.singleton_class.class_eval do
        alias_method :__parse__, :parse

        def parse xml
          __parse__ xml.force_encoding('iso-8859-1').encode 'utf-8'
        end
      end
    end

    if defined? MultiXml
      MultiXml.singleton_class.class_eval do
        alias_method :__parse__, :parse

        def parse xml, options = {}
          __parse__ xml.force_encoding('iso-8859-1').encode('utf-8'), options
        end
      end
    end
  end

  $0 = File.basename __FILE__
  Weather.new(ARGV).run
end
