#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <sung@metablu.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'httparty'

class Weather
  class GoogleWeather
    attr_reader   :data
    attr_accessor :info, :current, :forecast

    def initialize location
      self.data     = HTTParty.get('http://www.google.com/ig/api', :query => { :weather => location })['xml_api_reply']['weather']
      self.info     = data[:forecast_information]
      self.current  = data[:current_conditions]
      self.forecast = data[:forecast_conditions]
    end

    def rekey hash
      new, old = {}, hash.dup

      old.each do |key, val|
        new[key.to_sym] = case val
        when Hash  then val.keys == ['data'] ? val['data'] : rekey(val) # Recurse!
        when Array then val.map { |v| h = rekey v }
        else val
        end
      end

      new
    end

    def data= hash
      @data = rekey hash
    end

    def to_s
      lines, cell = [], '%-26s'

      # Current conditions
      lines[0] = cell % info[:city]
      lines[1] = cell % current[:wind_condition]
      lines[2] = cell % "Current:  #{current[:temp_f]}°F"
      lines[3] = cell % current[:humidity]
      lines[4] = cell % condition(current[:condition])

      # Upcoming
      forecast.each do |h|
        lines[1] << cell % h[:day_of_week]
        lines[2] << cell % "High: #{h[:high]}°F"
        lines[3] << cell % "Low:  #{h[:low]}°F"
        lines[4] << cell % condition(h[:condition])
      end

      lines.map(&:rstrip).join "\n"
    end

    def condition str
      case str
      when /sunny|clear/i    then '☀ '
      when /cloud|overcast/i then '☁ '
      when /fog/i            then '░ '
      when /rain|showers/i   then '☔ '
      when /storm/i          then '☈ '
      when /hail/i           then '☄ '
      when /snow/i           then '❄ '
      else ''
      end + str
    end
  end # GoogleWeather

  def initialize args = []
    @args = args
    @opts = {}
  end

  def options
    OptionParser.new do |opt|
      opt.summary_width = 24

      opt.banner = %Q(\
        Weather forecast from undocumented iGoogle API

        Usage: #{File.basename __FILE__} [options] [location]
      ).gsub /^ +/, ''
    end
  end

  def report loc
    GoogleWeather.new(loc).to_s
  end

  def run
    args = options.parse @args
    puts report(args.empty? ? 'Chicago' : args.join(' '))
  end
end

Weather.new(ARGV).run if $0 == __FILE__
