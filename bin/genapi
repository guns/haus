#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011-2015 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'fileutils'
require 'pathname'
require 'sdoc'

class Genapi
  DEFAULTS = {
    :lang => :ruby,
    :apidir => ENV['cdapi'],
    :outdir => nil,
    :index => nil,
    :title => nil,
    :force => false,
    :sdoc => RDoc::RDoc.new
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] project_dir

        Options:
      BANNER

      opt.on '-o', '--outdir DIR' do |arg|
        @outdir = arg
      end

      opt.on '-i', '--index PATH', 'Use PATH as index page' do |arg|
        @index = arg
      end

      opt.on '-t', '--title TITLE' do |arg|
        @title = arg
      end

      opt.on '-f', '--force' do
        @force = true
      end
    end
  end

  def check_output_directory path
    if File.exists? path
      @force ? FileUtils.rm_rf(path) : raise("#{path.inspect} already exists!")
    end
  end

  def ruby_sdoc project_dir
    # We need to expand these before the chdir
    index = File.expand_path @index if @index
    outdir = File.expand_path @outdir if @outdir
    apidir = File.expand_path @apidir if @apidir

    Dir.chdir project_dir do
      project = File.basename Dir.pwd
      title   = @title || project

      main = if index
        Pathname.new(index).relative_path_from Pathname.new(Dir.pwd)
      else
        Dir['*'].find { |f| f =~ /\AREADME/i }
      end

      outdir ||= if apidir
        File.join apidir, (project[/(.*)-\d+\.\d+(?:\.\d+)/, 1] || project)
      else
        raise 'Output directory not set! Set environment variable `$cdapi` or specify `--outdir`'
      end

      check_output_directory outdir

      args = %W[--format=sdoc --all --charset=utf-8 --title=#{title} --output=#{outdir}]
      args.push "--main=#{main}" if main

      puts 'Generating with `%s`' % args.join(' ')
      @sdoc.document args
    end
  end

  def call project_dir
    case @lang
    when :ruby then ruby_sdoc project_dir
    else raise 'No language specified'
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.size == 1
    call args.first
  end
end

$0 = File.basename(__FILE__) and Genapi.new.run ARGV if $0 == __FILE__
