#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'shellwords'

class Localmitmproxy
  DEFAULTS = {
    :intercept_ports => [80, 443, 8080, 8443],
    :proxy_port => 3346,
    :dump => false,
    :stream => nil
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 32 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] -- [mitmproxy-args]

        Options:
      BANNER

      opt.on '-d', '--dump', 'Invoke mitmdump and set `--stream 0`' do |arg|
        @dump = true
        @stream = '0'
      end

      opt.on '-p', '--intercept-ports A,B,C', Array, "DEFAULT: #{@intercept_ports.join ','}" do |arg|
        @intercept_ports = arg.map &:to_i
      end

      opt.on '-P', '--proxy-port PORT', Integer, "DEFAULT: #{@proxy_port}" do |arg|
        @proxy_port = arg
      end

      opt.on '-s', '--stream SIZE', "Same as mitmproxy --stream" do |arg|
        @stream = arg
      end
    end
  end

  def sh *args
    warn args.join(' ')
    system *args or raise "#{args.join(' ').inspect} failed with status #{$?.exitstatus}"
  end

  def with_redirected_ports intercept_ports, proxy_port
    sh *%W[iptables --table nat --append OUTPUT --match owner --uid-owner 0 --jump RETURN]
    sh *%W[iptables --table nat --append OUTPUT --protocol tcp --match multiport --dports #{intercept_ports.join ','} --jump REDIRECT --to-port #{proxy_port}]
    yield
  ensure
    sh *%W[iptables --table nat --delete OUTPUT --protocol tcp --match multiport --dports #{intercept_ports.join ','} --jump REDIRECT --to-port #{proxy_port}]
    sh *%W[iptables --table nat --delete OUTPUT --match owner --uid-owner 0 --jump RETURN]
  end

  def mitmprog
    @dump ? 'mitmdump' : 'mitmproxy'
  end

  def start! *mitmproxy_args
    with_redirected_ports @intercept_ports, @proxy_port do
      sh *(%W[#{mitmprog} --transparent --host --bind-address 127.0.0.1 --port #{@proxy_port}] \
           + (@stream ? ['--stream', @stream] : []) \
           + mitmproxy_args)
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort 'Must be run as root!' unless Process.euid.zero?
    start! *args
  end
end

$0 = File.basename(__FILE__) and Localmitmproxy.new.run ARGV if $0 == __FILE__
