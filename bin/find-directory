#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'set'
require 'haus/utils'

class FindDirectory
  DEFAULTS = { :dir => '.', :full_path => false }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Find and output the first matching directory found in a breadth-first search.

        Usage: #{File.basename __FILE__} regexp [root-dir]
      BANNER

      opt.on '-p', '--full-path', "Match the full path, not just the basename" do
        @full_path = true
      end
    end
  end

  def child_dirs dir
    Dir.entries(dir).sort.reduce [] do |v, d|
      next v if d == '.' or d == '..'
      path = File.join dir, d
      if File.directory? path
        v << path
      else
        v
      end
    end
  rescue Errno::EACCES
    []
  end

  def bfs dir, pattern
    queue = child_dirs dir
    visited = Set.new
    while queue.any?
      d = queue.shift
      if @full_path
        return d if File.expand_path(d) =~ pattern
      else
        return d if File.basename(d) =~ pattern
      end
      visited << d
      queue.concat child_dirs(d).reject { |x| visited.include? x }
    end
    nil
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless (1..2) === args.size
    rgx, dir = args
    if path = bfs(dir || '.', Haus::Utils.regexp_parse(rgx))
      puts path
    else
      abort
    end
  end
end

$0 = File.basename(__FILE__) and FindDirectory.new.run ARGV if $0 == __FILE__
