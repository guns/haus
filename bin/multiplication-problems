#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'

class MultiplicationProblems
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.rows = 17
    options.columns = 4
    options.multiplicands = (1..10).to_a
    options.multipliers = (1..10).to_a
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = %Q(\
        Print multiplication problems in a printable format. Multiplicands and
        multipliers may be given as a list of comma separated numbers, or as
        an inclusive range:

            #{File.basename __FILE__} 5,7,9 1..12

        Usage: #{File.basename __FILE__} [options] multiplicands multipliers

        Options:
      ).gsub /^ {8}/, ''

      opt.on '-s', '--shuffle' do
        options.shuffle = true
      end

      opt.on '-p', '--page ROWS,COLS', Array, 'Default: %d,%d' % [options.rows, options.columns] do |arg|
        options.rows = arg[0].to_i
        options.columns = arg[1].to_i
      end
    end
  end

  def numbers arg
    case arg
    when /\.\./ then Range.new(*arg.split('..').map(&:to_i)).to_a
    else arg.split(',').map &:to_i
    end
  end

  def format
    len = (options.multiplicands + options.multipliers).max.to_s.length
    "%#{len}d âœ– %#{len}d ="
  end

  def to_s
    problems = options.multiplicands.map do |a|
      options.multipliers.map do |b|
        format % [a, b]
      end
    end.flatten

    problems.shuffle! if options.shuffle

    rows = problems.group_by.with_index { |n, i| i % options.rows }.values

    (rows.first.size / options.columns.to_f).ceil.times.map do |n|
      offset = n * options.columns
      rows.map do |r|
        r[offset...(offset + options.columns)].join "\t\t"
      end.join "\n\n"
    end.join "\n"
  end

  def run arguments = []
    args = parser.parse arguments

    case args.size
    when 0 then true
    when 1 then options.multiplicands = numbers args[0]
    when 2 then options.multiplicands, options.multipliers = args.map { |a| numbers a }
    else abort parser.help
    end

    puts to_s
  end
end

$0 = File.basename(__FILE__) and MultiplicationProblems.new.run ARGV if $0 == __FILE__
