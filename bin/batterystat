#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'time' # Time#parse
require 'date'
require 'json'
require 'cli/meter'
require 'haus/logger'

class Batterystat
  class DarwinBattery
    attr_accessor :width

    def initialize width = nil
      @width = width
    end

    def data
      @data ||= ioreg('-n AppleSmartBattery').merge 'CurrentDate' => Time.now.utc
    end

    def ioreg query
      Hash[%x(/usr/sbin/ioreg -w0 -d1 -S -x -r #{query}).lines.drop(1).grep(/=/).map { |l| parse l }]
    end

    def parse line
      left, right = line.split('=', 2).map &:strip
      [left.gsub(/\W/, ''), str2val(right)]
    end

    def str2val str
      case str
      when /\A0x[0-9a-f]+\z/ then str.to_i 16 # Ruby 1.8 lacks \h character class
      when /\AYes|No\z/      then str == 'Yes'
      when /\A"(.*)"\z/      then $1
      when /\A\((.*)\)\z/    then $1.split(',').map { |e| str2val e.strip } # Recurse!
      when /\A\{(.*)\}\z/    then Hash[$1.split(',').map { |e| parse e }]   # Mutually recurse!
      else str
      end
    end

    def color k
      if Haus::Logger.colors256?
        # Eleven gradations of red to green
        colors = (196.step(226, 6).to_a + 190.step(46, -36).to_a).map { |n| "x#{n}".to_sym }
        colors[(k * 10).round]
      else
        case k
        when 0.75..1.0 then :green
        when 0.5..0.75 then :cyan
        when 0.25..0.5 then :yellow
        when 0.1..0.25 then :magenta
        else                :red
        end
      end
    end

    # From AppleSmartBattery.cpp:
    #
    #   Date is published in a bitfield per the Smart Battery Data spec rev
    #   1.1 in section 5.1.26
    #     Bits 0...4 => day (value 1-31; 5 bits)
    #     Bits 5...8 => month (value 1-12; 4 bits)
    #     Bits 9...15 => years since 1980 (value 0-127; 7 bits)
    #
    # Returns Time object
    def manufacture_date
      bf    = data['ManufactureDate']
      day   = bf & ((2**5)-1)
      month = (bf & (((2**4)-1) << 5)) >> 5
      year  = ((bf & (((2**7)-1) << 9)) >> 9) + 1980

      # Ruby 1.8 lacks Time#strptime
      Time.parse Date.new(year, month, day).to_s
    end

    def years_old
      # Return age in years (avg from Google calculator)
      '%s (%.2f years old)' % [
        manufacture_date.strftime('%d %b %Y'),
        (Time.now - manufacture_date) / (60*60*24*365.242199)
      ]
    end

    def loadcycles
      cc    = data['CycleCount']
      weeks = (Time.now - manufacture_date) / (60*60*24*7)
      '%d (%0.1f cycles per week)' % [cc, cc/weeks]
    end

    # Mirrors coconutBattery output
    def to_s
      cur, max, dsn = data.values_at *%w[CurrentCapacity MaxCapacity DesignCapacity]
      sw = "#{dsn}/#{dsn}".length # Summary width

      lines = []
      lines.push CLI::Meter.new("Charge [%s] %#{sw}s mAh", [[cur, color(cur.to_f/max)]], max, :width => width).to_s
      lines.push CLI::Meter.new("Health [%s] %#{sw}s mAh", [[max, color(max.to_f/dsn)]], dsn, :width => width).to_s
      lines.push ''
      if data['IsCharging']
        lines << 'Time to full: %d minutes' % data['AvgTimeToFull']
      else
        lines << 'Remaining:    %d minutes' % data['TimeRemaining']
      end
      lines.push 'Manufactured: %s'     % years_old
      lines.push 'Loadcycles:   %s'     % loadcycles
      lines.push 'Temperature:  %.2fÂ°C' % (data['Temperature'].to_f / 100)
      lines.join "\n"
    end

    def to_json
      data.to_json
    end
  end

  attr_reader :options, :stat

  def initialize opts = {}
    @options = OpenStruct.new opts

    @stat = case RUBY_PLATFORM
    when /darwin/i then DarwinBattery.new options.width
    else raise ArgumentError, "Unsupported platform: #{RUBY_PLATFORM}"
    end
  end

  def parser
    @parser ||= OptionParser.new nil, 16 do |opt|
      opt.banner = %Q(\
        Statistics about your machine's battery. Currently OS X only.

        Usage: #{File.basename __FILE__} [options]

        Options:
      ).gsub /^ +/, ''

      opt.on '-w', '--width N', Integer, 'Limit output to given width' do |arg|
        stat.width = arg
      end

      opt.on '-j', '--json', 'Dump JSON serialization of battery data' do
        options.json = true
      end
    end
  end

  def to_s
    stat.to_s
  end

  def to_json
    stat.to_json
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.empty?
    puts options.json ? to_json : to_s
  end
end

Batterystat.new.run ARGV if $0 == __FILE__
