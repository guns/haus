#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2010-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'find'
require 'etc'
require 'haus/logger'
require 'haus/ls_colors'

class Fixperm
  include Haus::Loggable

  DEFAULTS = {
    :umask => nil,
    :ownership => false,
    :recurse => false,
    :noop => false
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
    @umask = nil
    @stats = {}
    @uids = {}
    @gids = {}
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<~BANNER
        Normalize file modes and owners. Skips symbolic links.

        *Be careful*

        Usage: #{File.basename __FILE__} [options] path ...

        Options:
      BANNER

      opt.on '-u', '--umask N', 'Enable changing file mode by umask (octal)' do |arg|
        @umask = arg.to_i 8
      end

      opt.on '-o', '--ownership', 'Enable changing file ownership to match parent directories' do
        @ownership = true
      end

      opt.on '-r', '--recurse', 'Recurse into directories' do
        @recurse = true
      end

      opt.on '-n', '--noop', 'Only show what would happen' do
        @noop = true
      end
    end
  end

  def normalize path
    path = File.expand_path path
    stat = File.lstat path
    parent_path = File.expand_path '..', path

    if @umask
      if stat.ftype == 'directory' or File.basename(parent_path) =~ /\As?bin\z/
        mode = (0777 & ~@umask)
      else
        mode = (0666 & ~@umask)
      end

      if stat.ftype != 'link' and (stat.mode & 0777) != mode
        log 'chmod %04o â†’ %04o on ' % [stat.mode & 0777, mode], [path, Haus::LSColors[path]]
        File.chmod mode, path unless @noop
      end
    end

    if @ownership
      parent_stat = File.lstat parent_path

      if stat.uid != parent_stat.uid or stat.gid != parent_stat.gid
        log 'chown %s:%s -> %s:%s on ' % [
          u(stat.uid),
          g(stat.gid),
          u(parent_stat.uid),
          g(parent_stat.gid)
        ], [path, Haus::LSColors[path]]

        File.chown parent_stat.uid, parent_stat.gid, path unless @noop
      end
    end
  end

  def u id
    @uids[id] ||= Etc.getpwuid(id).name
  end

  def g id
    @gids[id] ||= Etc.getgrgid(id).name
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.empty? or (!@umask and !@ownership)

    args = args.flat_map { |f| Find.find(f).to_a } if @recurse
    args.each { |f| normalize f }
  end
end

$0 = File.basename(__FILE__) and Fixperm.new.run ARGV if __FILE__ == $0
