#!/usr/bin/env python
#
# Copyright (c) 2010-2023 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

"""
Normalize file modes and owners.

Be careful!
"""

import collections
import grp
import os
import pwd
import re
import stat
import sys
from argparse import ArgumentParser
from typing import Deque, Dict, NamedTuple, Tuple

import haus


class Mask(NamedTuple):
    fmask: int
    umask: int


class Entry(NamedTuple):
    path: str
    isdir: bool
    uid: int
    gid: int


class Info(NamedTuple):
    users: dict
    groups: dict
    lsc: haus.LSColors

    def user(self, uid):
        if name := self.users.get(uid):
            return name

        try:
            name = pwd.getpwuid(uid).pw_name
        except KeyError:
            name = str(uid)

        self.users[uid] = name
        return name

    def group(self, gid):
        if name := self.groups.get(gid):
            return name

        try:
            name = grp.getgrgid(gid).gr_name
        except KeyError:
            name = str(gid)

        self.groups[gid] = name
        return name


def parse_umask(arg: str):
    if arg.startswith("="):
        fmask, umask = 0o7777, int(arg[1:], 8)
    else:
        fmask, umask = 0o0777, int(arg, 8)

    if umask & fmask != umask:
        raise ValueError(f"umask {oct(umask)} must not be larger than {oct(fmask)}")

    return Mask(fmask=fmask, umask=umask)


def parse_args(args):
    parser = ArgumentParser(description=__doc__)
    parser.add_argument(
        "-u",
        "--umask",
        dest="mask",
        type=parse_umask,
        metavar="[=]OCTAL",
        help="""Change file mode to match new files created with umask. Specify in
        octal. Leading '=' sets all 12 mode bits (setuid + setgid + sticky + perms)""",
    )
    parser.add_argument(
        "-o",
        "--ownership",
        dest="chown",
        action="store_true",
        help="Change file ownership to match parent directories",
    )
    parser.add_argument(
        "-r", "--recurse", action="store_true", help="Recurse into subdirectories"
    )
    parser.add_argument(
        "-n", "--noop", action="store_true", help="Only show what would happen"
    )
    parser.add_argument(
        "paths",
        nargs="+",
        type=os.path.abspath,  # type: ignore[arg-type]
        metavar="path",
    )
    return parser.parse_args(args)


RE_BINDIR = re.compile(r"\As?bin\Z")
HAVE_LCHMOD = "lchmod" in dir(os)

if HAVE_LCHMOD:

    def _chmod(path, s: os.stat_result, newmode, noop, lsc: haus.LSColors):
        print(
            "%slchmod %04o → %04o on %s"
            % (
                "(noop) " if noop else "",
                s.st_mode & 0o7777,
                newmode,
                lsc.format(path, s),
            ),
        )
        if not noop:
            os.lchmod(path, newmode)  # type: ignore[attr-defined]

else:

    def _chmod(path, s: os.stat_result, newmode, noop, lsc: haus.LSColors):
        print(
            "%schmod %04o → %04o on %s"
            % (
                "(noop) " if noop else "",
                s.st_mode & 0o7777,
                newmode,
                lsc.format(path, s),
            ),
        )
        if not noop:
            os.chmod(path, newmode)


def is_bindir(path):
    return bool(RE_BINDIR.search(os.path.basename(path)))


def normalize(path, parent: Entry, mask, chown, noop, info: Info) -> Entry:
    s = os.lstat(path)
    uid = s.st_uid
    gid = s.st_gid
    isdir = stat.S_ISDIR(s.st_mode)

    if mask and not (stat.S_ISLNK(s.st_mode) and not HAVE_LCHMOD):
        mode = s.st_mode & 0o7777

        if isdir or is_bindir(parent.path):
            newmode = (mode & ~mask.fmask) | (mask.fmask & ~mask.umask)
        else:
            newmode = (mode & ~mask.fmask) | (mask.fmask & ~mask.umask & 0o7666)

        if mode != newmode:
            _chmod(path, s, newmode, noop, info.lsc)

    if chown:
        if uid != parent.uid or gid != parent.gid:
            print(
                "%slchown %s:%s → %s:%s on %s"
                % (
                    "(noop) " if noop else "",
                    info.user(uid),
                    info.group(gid),
                    info.user(parent.uid),
                    info.group(parent.gid),
                    info.lsc.format(path, s),
                )
            )

            if not noop:
                os.lchown(path, uid=parent.uid, gid=parent.gid)

            uid = parent.uid
            gid = parent.gid

    return Entry(path=path, isdir=isdir, uid=uid, gid=gid)


def execute(args):
    opts = parse_args(args)

    if opts.mask is None and not opts.chown:
        print("Must specify --umask and/or --ownership", file=sys.stderr)
        return 1

    if env := os.getenv("LS_COLORS"):
        lsc = haus.parse_ls_colors(env)
    else:
        lsc = haus.LSColors()

    info = Info(users={}, groups={}, lsc=lsc)
    queue: Deque[Tuple[str, Entry]] = collections.deque()
    entries: Dict[str, Entry] = {}

    for path in opts.paths:
        parent_path = os.path.abspath(os.path.join(path, ".."))
        parent = entries.get(parent_path)

        if parent is None:
            s = os.lstat(parent_path)
            parent = Entry(path=parent_path, isdir=True, uid=s.st_uid, gid=s.st_gid)
            entries[parent_path] = parent

        queue.appendleft((path, parent))

    while len(queue) > 0:
        path, parent = queue.pop()
        entry = normalize(
            path, parent, mask=opts.mask, chown=opts.chown, noop=opts.noop, info=info
        )

        if entry.isdir and opts.recurse:
            for fname in os.listdir(entry.path):
                queue.appendleft((os.path.join(path, fname), entry))


if __name__ == "__main__":
    sys.exit(execute(sys.argv[1:]))
