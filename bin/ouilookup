#!/usr/bin/env python
#
# Copyright (c) 2015-2023 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

"""
Query the Organizationally Unique Identifier database.
"""

import os
import re
import sqlite3
import sys
from argparse import ArgumentParser

import haus

OUI_URL = "https://standards-oui.ieee.org/"


def parse_args(args):
    parser = ArgumentParser(description=__doc__)
    parser.set_defaults(db_path=os.path.expanduser("~/.cache/oui.db"))
    parser.add_argument(
        "-a", "--all-fields", action="store_true", help="Search all fields"
    )
    parser.add_argument(
        "-d",
        "--db-path",
        type=os.path.normpath,
        help=f"Default: {parser.get_default('db_path')}",
    )
    parser.add_argument(
        "-u",
        "--update",
        action="store_true",
        help=f"Update database from {OUI_URL}",
    )
    parser.add_argument(
        "patterns",
        nargs="*",
        metavar="pattern",
        help="MAC Address or regular expression",
    )
    return parser.parse_args(args)


RE_ORG_ENTRY = re.compile(r"\A(?P<id>[0-9A-F]{6})\s+\(base 16\)\s+(?P<org>\S.*)")
RE_MAC_PREFIX = re.compile(r"(?i)\A([0-9A-F]{2})[:-]?([0-9A-F]{2})[:-]?([0-9A-F]{2})")
RE_WS_PLUS = re.compile(r"\s+")


def parse_oui_text(text) -> list:
    # Beginning of OUI text DB:
    #
    #   OUI/MA-L                                                    Organization
    #   company_id                                                  Organization
    #                                                               Address
    #
    #   00-22-72   (hex)                American Micro-Fuel Device Corp.
    #   002272     (base 16)            American Micro-Fuel Device Corp.
    #                                   2181 Buchanan Loop
    #                                   Ferndale  WA  98248
    #                                   US
    #
    #   00-D0-EF   (hex)                IGT
    #   00D0EF     (base 16)            IGT
    #                                   9295 PROTOTYPE DRIVE
    #                                   RENO  NV  89511
    #                                   US

    rows = []
    lineiter = iter(text.splitlines())

    while (line := next(lineiter, None)) is not None:
        if m := RE_ORG_ENTRY.match(line):
            addr = []
            while line := next(lineiter, "").strip():
                addr.append(RE_WS_PLUS.sub(" ", line))
            rows.append((m["id"], m["org"], "; ".join(addr)))

    return rows


def update_oui_db(db_path, url):
    text = haus.urlopen(url).read().decode("utf-8")
    rows = parse_oui_text(text)
    open(db_path, "w").close()
    conn = sqlite3.connect(db_path)
    try:
        cur = conn.cursor()
        cur.execute(
            """
            CREATE TABLE oui (
                company_id varchar(6),
                organization text,
                address text
            );
            """
        )
        cur.executemany(
            "INSERT INTO oui (company_id, organization, address) VALUES (?, ?, ?)",
            rows,
        )
        conn.commit()
    finally:
        conn.close()


def sqlite3_regexp(pattern, string):
    return haus.regex.search(pattern, string) is not None


def execute(args):
    opts = parse_args(args)

    if opts.update:
        update_oui_db(opts.db_path, OUI_URL)

    conn = sqlite3.connect(opts.db_path)
    try:
        cur = conn.cursor()

        if opts.patterns:
            conn.create_function("REGEXP", 2, sqlite3_regexp)

            for pat in opts.patterns:
                if m := (RE_MAC_PREFIX.match(pat)):
                    rows = cur.execute(
                        """
                        SELECT company_id, organization, address
                        FROM oui
                        WHERE company_id = upper(?)
                        ORDER BY upper(organization), company_id
                        """,
                        ["".join(m.groups())],
                    ).fetchall()
                else:
                    if not haus.regex.search(r"\p{Lu}", pat):
                        pat = "(?i)" + pat

                    sql = """
                        SELECT company_id, organization, address
                        FROM oui
                        WHERE organization REGEXP ?
                        """
                    params = [pat]
                    if opts.all_fields:
                        sql += " OR address REGEXP ?"
                        params.append(pat)
                    sql += " ORDER BY upper(organization), company_id"

                    rows = cur.execute(sql, params).fetchall()

        else:
            rows = cur.execute(
                "SELECT * FROM oui ORDER BY upper(organization), company_id"
            ).fetchall()

        if not rows:
            return 1

        fmt = f"%s │ %-{max([len(row[1]) for row in rows])}s │ %s"
        for row in rows:
            print(fmt % row)

    finally:
        conn.close()


if __name__ == "__main__":
    sys.exit(execute(sys.argv[1:]))
