#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'yaml'
require 'haus/utils'

class Ouilookup
  DEFAULTS = {
    :ouidb_path => File.expand_path('../../share/ouilookup/oui.yml', __FILE__)
  }

  UPDATE_URL = 'http://standards-oui.ieee.org/oui.txt'
  YAML_OPTS = { :line_width => -1 }
  FMT = "%06X\t%-60s\t%s"

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] pattern â€¦

        Options:
      BANNER

      opt.on '-d', '--ouidb-path PATH', "DEFAULT: #{@ouidb_path} (`-` for stdin/stdout)" do |arg|
        @ouidb_path = arg == '-' ? nil : File.expand_path(arg)
      end

      opt.on '-u', '--update=[FILE]', "Update #{@ouidb_path} from a file or #{UPDATE_URL}" do |arg|
        @update = arg ? File.expand_path(arg) : UPDATE_URL
      end
    end
  end

  def slurp path
    if path =~ %r{\A\w+://}
      IO.popen(['curl', '--user-agent', 'Mozilla/5.0 (X11; Linux x86_64; rv:70.0) Gecko/20100101 Firefox/70.0', '--progress-bar', '--location', path]) { |io| io.read }
    else
      File.read path
    end
  end

  def update_db! dbpath, update_path_or_url
    rows, db = [], {}
    ps = slurp(update_path_or_url).split("\r\n\r\n").drop 1

    ps.each do |p|
      ls = p.lines
      a, b, c = ls[0].split[0].split('-').map { |x| x.to_i 16 }
      name = ls[0].split("\t", 2)[1].strip
      country = ls.last.split("\t", 2)[1].strip
      rows.push [(a << 16) + (b << 8) + c, "#{name}\t#{country}"]
    end

    rows.sort!.each { |(k, v)| db[k] = v }

    if dbpath.nil?
      puts db.to_yaml(YAML_OPTS)
    else
      File.open(dbpath, 'w') { |f| f.puts db.to_yaml(YAML_OPTS) }
    end
  end

  def ouidb
    @ouidb ||= begin
      if @ouidb_path.nil?
        YAML.load $stdin.read
      elsif File.exists? @ouidb_path
        YAML.load_file @ouidb_path
      elsif File.exists? @ouidb_path + '.gz'
        IO.popen ['gzip', '-cd', @ouidb_path + '.gz'] do |io|
          YAML.load io.read
        end
      else
        raise "Could not find oui db at #{@ouidb_path}{.gz,}"
      end
    end
  end

  def grep pattern
    case pattern
    when /\A(\h\h)[:-]?(\h\h)[:-]?(\h\h)/
      mac = ($1.to_i(16) << 16) + ($2.to_i(16) << 8) + $3.to_i(16)
      if o = ouidb[mac]
        return FMT % [mac, *o.split("\t")]
      else
        return nil
      end
    when %r{\A[^/]}
      pat = Regexp.new pattern, Regexp::IGNORECASE
    else
      pat = Haus::Utils.regexp_parse pattern
    end

    lines = []

    ouidb.each do |(k, v)|
      vs = v.split "\t"
      if vs.size < 2
        vs << '' until vs.size >= 2
      end
      lines << FMT % [k, *vs] if v =~ pat
    end

    lines if lines.any?
  end

  def run arguments = []
    args = parser.parse arguments
    if @update
      abort parser.help if args.any?
      update_db! @ouidb_path, @update
    elsif args.empty?
      abort parser.help
    else
      args.each { |pattern| puts grep(pattern) }
    end
  end
end

$0 = File.basename(__FILE__) and Ouilookup.new.run ARGV if $0 == __FILE__
