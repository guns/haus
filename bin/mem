#!/usr/bin/env python
#
# Copyright (c) 2010-2023 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

"""
Print RAM and swap usage.
"""

import os
import re
import shutil
import sys
from argparse import ArgumentParser
from pathlib import Path

import haus


def parse_args(args):
    parser = ArgumentParser(description=__doc__)
    parser.add_argument("-w", "--width", type=int, help="Set output width")
    return parser.parse_args(args)


def mib(nbytes):
    return round(nbytes / 2**20)


def build_meter(fmt, values, max_value, width=None):
    if max_value <= 0:
        raise ValueError(f"max_value ({max_value}) must be a positive number")

    if width is None:
        width, _ = shutil.get_terminal_size()

    # Graph length is space left over when sum == max_value
    graphlen = width - len(fmt % ("", max_value, max_value))
    chars, charstyles = [], []
    total = 0

    for ch, val, *styles in values:
        if val < 0:
            raise ValueError(f"value ({val}) must be a non-negative number")

        total += val
        pct = val / max_value
        count = round(graphlen * pct)
        overflow = len(chars) + count - graphlen

        if overflow > 0:
            count -= overflow

        chars.extend([ch] * count)
        charstyles.append([count, *styles])

    blanks = graphlen - len(chars)
    chars.extend([" "] * blanks)
    charstyles.append([blanks])

    # Embed percentage
    if graphlen >= len("100%"):
        percentage = str(round(100 * total / max_value)) + "%"
        chars[-len(percentage) :] = list(percentage)

    # Chunk, join, and colorize chars
    pos = 0
    graph = []
    for count, *styles in charstyles:
        graph.append(haus.format("".join(chars[pos : pos + count]), styles))
        pos += count

    return fmt % ("".join(graph), total, max_value)


def get_memory_stats():
    info = {}
    pat = re.compile(r"\d+")

    for line in Path("/proc/meminfo").read_text().splitlines():
        key, kb = line.split(":", maxsplit=1)
        info[key] = int(pat.search(kb)[0]) * (2**10)

    active = (
        info["MemTotal"]
        - info["MemFree"]
        - info["Buffers"]
        - info["Cached"]
        - info["SReclaimable"]
        - info["SUnreclaim"]
    )

    chars = {True: "|||||", False: "█▓▒░│"}[os.isatty(sys.stdout.fileno())]

    return {
        "mem_total": mib(info["MemTotal"]),
        "swap_total": mib(info["SwapTotal"]),
        "mem_values": [
            [chars[0], mib(active), "green", "bold"],
            [chars[1], mib(info["SUnreclaim"]), "green"],
            [chars[2], mib(info["SReclaimable"]), "cyan"],
            [chars[3], mib(info["Cached"]), "yellow"],
            [chars[4], mib(info["Buffers"]), "magenta"],
        ],
        "swap_values": [
            [chars[0], mib(info["SwapTotal"] - info["SwapFree"]), "red"],
        ],
    }


def execute(args):
    opts = parse_args(args)
    m = get_memory_stats()
    mlen = len(str(m["mem_total"]))
    print(
        build_meter(
            f"Mem [%s] %{mlen}d/%d MiB", m["mem_values"], m["mem_total"], opts.width
        )
    )

    if m["swap_total"] > 0:
        slen = len(str(m["swap_total"]))
        print(
            build_meter(
                f"Swp [%s] %{slen}d/%d MiB",
                m["swap_values"],
                m["swap_total"],
                opts.width,
            )
        )


if __name__ == "__main__":
    sys.exit(execute(sys.argv[1:]))
