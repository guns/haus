#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'set'
require 'haus/utils'

class Plookup
  DEFAULTS = {
    :file => nil,
    :ugly => false,
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] port|regexp ...

        Options:
      BANNER

      opt.on '-f', '--file PATH', 'Services file; defaults to:', services.join(' + ') do |arg|
        @file = arg
      end

      opt.on '-u', '--ugly', 'Do not pretty print results' do
        @ugly = true
      end
    end
  end

  def services
    fs = (@file ? [@file] : [
      '/etc/services',
      File.expand_path('../../share/nmap/nmap-services', %x(/bin/sh -c 'command -v nmap').chomp)
    ]).select { |f| File.exists? f }

    raise 'No services files found!' if fs.empty?

    fs
  end

  def grep pattern
    rgx = case pattern
    # Restrict search to port numbers
    when /\A0x(\h+)\z/ then Regexp.new '\s%d/\w' % $1.to_i(16)
    when /\A\d+\z/     then Regexp.new '\s%s/\w' % pattern
    # Case insensitive search by default
    when %r{\A[^/]}    then Regexp.new pattern, Regexp::IGNORECASE
    else Haus::Utils.regexp_parse pattern
    end

    services.flat_map { |f| File.readlines f }.grep rgx
  end

  def pp lines
    lines.map do |line|
      line.gsub! /\t/, ' '
      if m = line.match(%r(\A(.*?)\s+(\d+/.*?)\s*(#.*)))
        '%-16s %-20s %s' % m[1..3]
      elsif m = line.match(%r(\A(.*?)\s+(\d+.*)))
        '%-16s %s' % m[1..2]
      else
        line
      end
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.empty?

    args.each { |arg| puts @ugly ? grep(arg) : pp(grep arg) }
  end
end

$0 = File.basename(__FILE__) and Plookup.new.run ARGV if $0 == __FILE__
