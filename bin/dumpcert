#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'openssl'
require 'shellwords'
require 'net/http'

class Dumpcert
  module Certificate
    extend self

    def parse string
      certs = string.scan /-+BEGIN CERTIFICATE-+\n.*?\n-+END CERTIFICATE-+/m

      if certs.any?
        certs.map { |pem| OpenSSL::X509::Certificate.new pem }
      else
        # Maybe DER format?
        [OpenSSL::X509::Certificate.new(string)]
      end
    rescue OpenSSL::X509::CertificateError
      []
    end

    def parse_server_arg server
      h, p = server.split ':', 1
      p = p.to_i if p
      [h, p]
    end

    def self_signed? cert
      cert.subject == cert.issuer
    end

    def ssl_get host, port = nil
      server = "#{host}:#{port || 443}".shellescape
      certs = parse %x(openssl s_client -connect #{server} < /dev/null 2>/dev/null)
      raise 'Multiple certificates returned from %s' % host if certs.count > 1
      certs.first
    end

    def http_get url
      certs = parse Net::HTTP.get(URI.parse url)
      raise 'Multiple certificates returned from %s' % url if certs.count > 1
      certs.first
    end

    def get url
      case url
      when /\.html$/ then http_get url
      else ssl_get *parse_server_arg(url)
      end
    end

    def get_chain url
      chain = []
      cert = get url

      loop do
        chain.push cert
        break unless cert.extensions.find { |e| e.oid == 'authorityInfoAccess' and e.value =~ /URI:(http.*?\.crt)/ }
        break unless cert = http_get($1)
      end

      chain
    end

    def get_root url
      cert = get_chain(url).last
      cert if self_signed? cert
    end
  end

  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.cabundle ||= File.expand_path '~/.certificates/cabundle.pem'
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options]

        Options:
      BANNER

      opt.on '-f', '--cabundle', 'File containing CA Roots [DEFAULT: %s]' % options.cabundle do
        options.cabundle = File.expand_path arg
      end
    end
  end

  def cabundle
    Certificate.parse File.read(options.cabundle)
  end

  def write_cabundle certs
    File.open options.cabundle, 'w' do |f|
      f.puts certs.sort_by { |c| c.subject.to_s }.map { |c| [c.subject.to_s, c.to_s].join "\n" }
    end
  end

  def mapcerts args = []
    args.flat_map do |arg|
      if arg == '-'
        Certificate.parse($stdin.read)
      elsif File.readable? arg
        Certificate.parse File.read(arg)
      else
        Certificate.get_root arg
      end
    end.compact.select { |c| Certificate.self_signed? c }
  end

  def dump *args
    puts (args.empty? ? cabundle : mapcerts(args)).map { |c| [c.subject.to_s, c.to_s].join "\n" }.join
  end

  def add *args
    write_cabundle mapcerts(args).reduce(cabundle) { |certs, root|
      certs << root unless certs.find { |c| c.subject == root.subject }
      certs
    }
  end

  def rm *args
    write_cabundle mapcerts(args).reduce(cabundle) { |certs, root|
      certs.reject { |c| c.subject == root.subject }
    }
  end

  def exec *args
    env = { 'CURL_CA_BUNDLE' => options.cabundle, 'GIT_SSL_CAINFO' => options.cabundle }
    Kernel.exec env, *args
  end

  def console
    require 'pry'
    binding.pry
  end

  def run arguments = []
    args = parser.parse arguments
    rest = args.drop 1

    case args.first
    when 'dump', nil then dump *rest
    when 'add' then add *rest
    when 'rm' then show *rest
    when 'exec' then exec *rest
    when 'console' then console *rest
    else abort parser.help
    end
  end
end

$0 = File.basename(__FILE__) and Dumpcert.new.run ARGV if $0 == __FILE__
