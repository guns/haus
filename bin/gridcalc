#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011-2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'rational'

class Gridcalc
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.ratio ||= 1
    options.width ||= 0
  end

  def parser
    @parser ||= OptionParser.new nil, 16 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/,''
        Calculate all possible horizontal grid measurements for a given
        pixel width.

        Usage: #{File.basename __FILE__} [options] width

        Options:
      BANNER

      opt.on '-c', '--columns N',
             'Show solutions that have N columns, where N is an',
             'Integer or Range: `-n 24` or `-n 12..24`' do |arg|
        options.columns = arg
      end

      opt.on '-r', '--ratio N',
             'Show solutions that have a minumum column:gutter width ratio',
             'expressed as a ratio `-r 3:2` or a number `-r 1.5`',
             "Default: #{options.ratio.to_s.tr '/',':'}" do |arg|
        options.ratio = arg
      end
    end
  end

  def ratio
    case r = options.ratio
    when Numeric           then Rational r.to_s # Floats are unreliable!
    when /^\d+(?:\.\d+)?$/ then Rational r
    when /^\d+:\d+$/       then Rational *r.split(':')
    else raise ArgumentError, 'must be in the form of /\d+:\d+/'
    end
  end

  def columns
    case cols = options.columns
    when NilClass         then nil
    when Integer          then [cols]
    when /^\d+$/          then [cols.to_i]
    when /^\d+\.\.\d+$/   then Range.new *cols.split('..').map(&:to_i)
    when /^\d+\.\.\.\d+$/ then Range.new *cols.split('...').map(&:to_i), true
    else raise ArgumentError, 'must be an Integer, Range, or nil'
    end
  end

  def solutions
    table   = []
    mincw   = ratio.numerator
    mingw   = ratio.denominator
    maxcols = (options.width + mingw) / (mincw + mingw)

    (columns || (2..maxcols)).each do |n|
      (options.width / n).downto mincw do |cw|
        gutters = options.width - (n * cw)
        next unless (gutters % (n - 1)).zero? # Only whole pixels

        gw = gutters / (n - 1)
        break if not gw.zero? and (cw / gw) < ratio # Too small, throw it back

        table << [n, cw, gw]
      end
    end

    table
  end

  def to_s
    ss = solutions.map do |n, cw, gw|
      buf  = '%d %dpx columns' % [n, cw]
      buf << ' with %dpx gutters' % gw unless gw.zero?
      buf
    end.join "\n"

    size = solutions.size
    ss << "\n--\n%d solution%s found" % [size, (size == 1 ? '' : 's')]
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.size != 1
    options.width = args.first.to_i
    puts to_s
  end
end

$0 = File.basename(__FILE__) and Gridcalc.new.run ARGV if $0 == __FILE__
