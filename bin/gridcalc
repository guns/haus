#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'rational'

class Gridcalc
  DEFAULTS = { :ratio => 1, :width => 0 }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 16 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/,''
        Calculate all possible horizontal grid measurements for a given
        pixel width.

        Usage: #{File.basename __FILE__} [options] width

        Options:
      BANNER

      opt.on '-c', '--columns N',
             'Show solutions that have N columns, where N is an',
             'Integer or Range: `-c 24` or `-c 12..24`' do |arg|
        @columns = arg
      end

      opt.on '-r', '--ratio N',
             'Show solutions that have a minumum column:gutter width ratio',
             'expressed as a ratio `-r 3:2` or a number `-r 1.5`',
             "Default: #{@ratio.to_s.tr '/', ':'}" do |arg|
        @ratio = arg
      end
    end
  end

  def ratio
    case r = @ratio
    when Numeric             then Rational r.to_s # Rational from a string yields better precision than from a float
    when /\A\d+(?:\.\d+)?\z/ then Rational r
    when /\A\d+:\d+\z/       then Rational *r.split(':')
    else raise ArgumentError
    end
  end

  def columns
    case cols = @columns
    when NilClass           then nil
    when Integer            then [cols]
    when /\A\d+\z/          then [cols.to_i]
    when /\A\d+\.\.\d+\z/   then Range.new *cols.split('..').map(&:to_i)
    when /\A\d+\.\.\.\d+\z/ then Range.new *cols.split('...').map(&:to_i), true
    else raise ArgumentError
    end
  end

  def solutions
    table   = []
    r       = ratio
    mincw   = r.numerator
    mingw   = r.denominator
    maxcols = (@width + mingw) / (mincw + mingw)

    (columns || (2..maxcols)).each do |n|
      (@width / n).downto mincw do |cw|
        gutters = @width - (n * cw)
        next unless (gutters % (n - 1)).zero? # Only whole pixels

        gw = gutters / (n - 1)
        break if not gw.zero? and (cw / gw) < r # Too small, throw it back

        table << [n, cw, gw]
      end
    end

    table
  end

  def to_s
    ss = solutions.map do |n, cw, gw|
      buf  = '%d %dpx columns' % [n, cw]
      buf << ' with %dpx gutters' % gw unless gw.zero?
      buf
    end.join "\n"

    size = solutions.size
    ss << "\n--\n%d solution%s found" % [size, (size == 1 ? '' : 's')]
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.size != 1
    @width = args.first.to_i
    puts to_s
  end
end

$0 = File.basename(__FILE__) and Gridcalc.new.run ARGV if $0 == __FILE__
