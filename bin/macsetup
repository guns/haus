#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'set'
require 'etc'
require 'haus/logger'
require 'plist'

class Macsetup
  class ShelloutError < RuntimeError; end

  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    @indent = 0
    @logger = Haus::Logger.new
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = %Q(\
        OS X user and system preferences script. Global system preferences are
        not altered unless executed as root.

        Usage: #{File.basename __FILE__} [options] [regexp-filter]

        Options:
      ).gsub /^ +/, ''

      opt.on '-l', '--list', 'Display preference descriptions' do
        options.list = true
      end

      opt.on '-u', '--user NAME', "Set given user's preferences (when root)" do |arg|
        if Process.euid.zero?
          options.user = Etc.getpwnam arg
        else
          raise "Only root may set another user's preferences!"
        end
      end

      opt.on '-v', '--verbose' do
        options.verbose = true
      end
    end
  end

  def verbose_log msg
    with_indent { log msg } if options.verbose
  end

  def log *messages
    @logger.log *prepend_indent(messages)
  end

  def logf *messages
    @logger.io.print @logger.fmt(*prepend_indent(messages))
  end

  def prepend_indent messages
    messages.map { |msg, styles| [('  ' * @indent) + msg, *styles] }
  end

  def sh *args
    verbose_log '%s %s' % [(Process.euid.zero? ? '#' : '$'), args.join(' ')]
    system *args or raise ShelloutError, args.join(' ')
  end

  def with_indent
    @indent += 1
    yield
  ensure
    @indent -= 1
  end

  def sudo_user
    if user = ENV['SUDO_USER']
      Etc.getpwnam user
    elsif uid = ENV['SUDO_UID']
      Etc.getpwuid uid.to_i
    else
      raise 'Could not determine unprivileged user!'
    end
  end

  def as_user user
    if Process.euid != user.uid
      euid, uid, gid = Process.euid, Process.uid, Process.gid
      Process.gid = user.gid
      Process.uid = user.uid
      Process.euid = user.uid
    end
    yield
  ensure
    Process.gid = gid if gid
    Process.uid = uid if uid
    Process.euid = euid if euid
  end

  def summarize label, messages
    log label
    with_indent do
      messages.each { |m| log '• %s' % m }
    end
  end

  def appvers app
    if File.readable? "#{app}/Contents/Info.plist"
      with_xml_plist "#{app}/Contents/Info.plist" do |p|
        p['CFBundleShortVersionString'] || ''
      end
    else
      ''
    end
  end

  def network_service_ports
    @network_service_ports ||= %x(networksetup -listallhardwareports).scan(/Hardware Port: (.*)/).flatten
  end

  def launchctl_jobs
    @launchctl_jobs ||= Set.new %x(launchctl list).lines.map { |l| l.strip.split("\t")[2] }
  end

  def launchctl_load plist, name = nil
    sh 'launchctl', 'load', '-w', plist unless launchctl_jobs.include? name || File.basename(plist, '.plist')
  end

  def launchctl_unload plist, name = nil
    sh 'launchctl', 'unload', '-w', plist if launchctl_jobs.include? name || File.basename(plist, '.plist')
  end

  def launchctl_disable plist
    verbose_log "Disabling #{plist}"
    modify_plist! plist do |p|
      p['Disabled'] = true; p
    end
  end

  def with_xml_plist plist
    buf = File.read plist
    if buf[0..7] == 'bplist00'
      sh 'plutil', '-convert', 'xml1', plist
      begin
        yield Plist.parse_xml(File.read plist)
      ensure
        sh 'plutil', '-convert', 'binary1', plist
      end
    else
      yield Plist.parse_xml(buf)
    end
  end

  def modify_plist! plist
    with_xml_plist plist do |p|
      data = yield p
      File.open(plist, 'w') { |f| f.puts Plist::Emit.dump(data) }
    end
  end

  def execute! label, prefs
    log label
    with_indent do
      prefs.each do |msg, λ|
        logf ['• %s →%s' % [msg, (options.verbose ? "\n" : ' ')]]
        begin
          res = λ.call
          logf '  ' if options.verbose
          @logger.log res.respond_to?(:each) ? res : ['OK', :green, :bold]
        rescue ShelloutError => e
          logf '  ' if options.verbose
          @logger.log ['ERROR', :red, :bold]
          with_indent { log '✖ %s' % e }
        end
      end
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.size > 1
    filter = Regexp.new args.first || '.', 'i'

    options.user ||= Process.euid.zero? ? sudo_user : Etc.getpwuid(Process.euid)

    if options.list
      summarize 'Root preferences:', root_preferences.keys.grep(filter)
      summarize 'User preferences (%s):' % options.user.name, user_preferences.keys.grep(filter)
      summarize 'Recommendations:', recommendations.keys.grep(filter)
    else
      execute! 'Setting root preferences:', root_preferences.select { |k,v| k =~ filter  } if Process.euid.zero?
      as_user options.user do
        execute! 'Setting user preferences (%s):' % options.user.name, user_preferences.select { |k,v| k =~ filter }
      end
      execute! 'Recommendations:', recommendations.select { |k,v| k =~ filter }
    end
  end

  def root_preferences
    {
      'Set verbose boot' => lambda {
        sh 'nvram boot-args="-v"'
      },

      "Allow root to connect to user's X server" => lambda {
        sh 'ln', '-sf', "#{options.user.dir}/.Xauthority", File.expand_path('~/.Xauthority')
      },

      'Set power management settings' => lambda {
        sh 'pmset -a displaysleep 10 disksleep 10 sleep 60 womp 0'
        sh 'pmset -b sleep 10'
        sh 'pmset -u sleep 10'
        sh 'pmset -a hibernatemode 0 hibernatefile /dev/null destroyfvkeyonstandby 1'
        sh 'ln -sf /dev/null /var/vm/sleepimage'
      },

      'Set DNS servers to 127.0.0.1' => lambda {
        sh 'mkdir -p /etc/resolver'
        sh 'echo "nameserver 127.0.0.1" > /etc/resolver/root'
        sh 'echo "domain ." >> /etc/resolver/root'
        network_service_ports.each do |iface|
          sh 'networksetup', '-setdnsservers', iface, '127.0.0.1'
        end
        true
      },

      'Disable IPv6' => lambda {
        network_service_ports.each do |iface|
          sh 'networksetup', '-setv6off', iface
        end
        true
      },

      'Change NTP servers' => lambda {
        ntp = '/etc/ntp.conf'
        verbose_log "Modifying #{ntp}"
        buf = File.read ntp
        File.open ntp, 'w' do |f|
          f.puts buf.lines.reject { |l| l =~ /\Aserver / }
          f.puts (0..3).map { |n| 'server %d.ch.pool.ntp.org' % n }
        end
        true
      },

      'Disable Spotlight' => lambda {
        sh 'mdutil -d / &>/dev/null'
        sh 'mdutil -E / &>/dev/null'
        sh 'chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search'
        Dir['/System/Library/LaunchDaemons/*.mds.*'].each do |plist|
          launchctl_unload plist
        end
        true
      },

      # cf. http://support.apple.com/kb/HT3789
      'Disable Bonjour advertising' => lambda {
        mdns = '/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist'
        unless File.read(mdns).index '-NoMulticastAdvertisements'
          verbose_log "Modifying #{mdns}"
          modify_plist! mdns do |p|
            p['ProgramArguments'] << '-NoMulticastAdvertisements'; p
          end
        end
      },

      'Enable Application Firewall OR Little Snitch 3' => lambda {
        if launchctl_jobs.include? 'at.obdev.littlesnitchd' and appvers('/Library/Little Snitch/Little Snitch Daemon.bundle')[/^\d+./].to_i >= 3
          launchctl_unload '/System/Library/LaunchDaemons/com.apple.alf.agent.plist', 'com.apple.alf'
          ['LS3 detected, ALF DISABLED', :green, :bold]
        else
          launchctl_load '/System/Library/LaunchDaemons/com.apple.alf.agent.plist', 'com.apple.alf'
          ['LS3 no detected, ALF ENABLED', :yellow, :bold]
        end
      },

      'Disable applepushserviced' => lambda {
        launchctl_unload '/System/Library/LaunchDaemons/com.apple.applepushserviced.plist'
      },

      'Disable revisiond' => lambda {
        launchctl_unload '/System/Library/LaunchDaemons/com.apple.revisiond.plist'
      },

      'Disable stackshot daemon' => lambda {
        launchctl_unload '/System/Library/LaunchDaemons/com.apple.stackshot.plist'
      },

      'Disable netbiosd' => lambda {
        launchctl_unload '/System/Library/LaunchDaemons/com.apple.netbiosd.plist'
      },

      'Disable usbmuxd' => lambda {
        launchctl_unload '/System/Library/LaunchDaemons/com.apple.usbmuxd.plist'
      },

      'Disable msrpc daemons' => lambda {
        Dir['/System/Library/LaunchDaemons/com.apple.msrpc.*.plist'].each do |plist|
          launchctl_unload plist
        end
        true
      },

      'Disable Find My Mac' => lambda {
        launchctl_unload '/System/Library/LaunchDaemons/com.apple.findmymac.plist'
      },

      'Disable helpd' => lambda {
        launchctl_disable '/System/Library/LaunchAgents/com.apple.helpd.plist'
      },

      'Disable SubmitDiagInfo' => lambda {
        launchctl_disable '/System/Library/LaunchAgents/com.apple.SubmitDiagInfo.plist'
      },

      'Disable Airport Base Station Agent' => lambda {
        launchctl_disable '/System/Library/LaunchAgents/com.apple.AirPortBaseStationAgent.plist'
      },

      'Disable Transparent App Lifecycle Agent' => lambda {
        launchctl_disable '/System/Library/LaunchAgents/com.apple.talagent.plist'
      },

      'Disable IM Agent' => lambda {
        launchctl_disable '/System/Library/LaunchAgents/com.apple.imagent.plist'
      },

      'Disable imklaunchagent' => lambda {
        launchctl_disable '/System/Library/LaunchAgents/com.apple.imklaunchagent.plist'
      }
    }
  end

  def user_preferences
    {
      'Set Dock and Spaces preferences' => lambda {
        sh 'defaults write com.apple.dock no-glass -boolean TRUE' # Disable 3D Dock
        sh 'defaults write com.apple.dock showhidden -boolean TRUE' # Hidden applications are translucent
        sh 'defaults write com.apple.dock workspaces-edge-delay -float 5.0'
      },

      'Set Finder preferences' => lambda {
        sh 'defaults write com.apple.finder _FXShowPosixPathInTitle -boolean TRUE'
        sh 'defaults write com.apple.finder FXEnableExtensionChangeWarning -boolean FALSE' # Disable file extension change warning
        sh 'defaults write com.apple.finder QuitMenuItem -boolean TRUE'
      },

      'Set Mail Preferences' => lambda {
        sh 'defaults write com.apple.mail EnableBundles -boolean TRUE'
        sh 'defaults write com.apple.mail PreferPlainText -boolean TRUE'
      },

      'Enable Disk Utility debug menu' => lambda {
        sh 'defaults write com.apple.DiskUtility DUDebugMenuEnabled -boolean TRUE'
      },

      'Clear login items' => lambda {
        sh 'defaults write loginwindow AutoLaunchedApplicationDictionary -array'
        sh 'defaults write com.apple.loginitems SessionItems -dict'
      },

      'Disable crash reports' => lambda {
        sh 'defaults write com.apple.CrashReporter DialogType -string None'
      },

      'Disable Time Machine nag about new external disks' => lambda {
        sh 'defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -boolean TRUE'
      },

      'Disable Dashboard' => lambda {
        sh 'defaults write com.apple.dashboard mcx-disabled -boolean TRUE'
      },

      'Disable Certificate Revocation checks' => lambda {
        sh 'defaults write com.apple.security.revocation CRLStyle -string None'
        sh 'defaults write com.apple.security.revocation OCSPStyle -string None'
        sh 'defaults write com.apple.security.revocation RevocationFirst -string OCSP'
      },

      'Set NSGlobalDomain preferences' => lambda {
        sh 'defaults write -g NSNavPanelExpandedStateForSaveMode -boolean TRUE'
        sh 'defaults write -g PMPrintingExpandedStateForPrint -boolean TRUE'
        sh 'defaults write -g KeyRepeat -int 1'
        sh 'defaults write -g InitialKeyRepeat -int 12'
      },

      'Set Loginwindow preferences' => lambda {
        sh 'defaults write com.apple.loginwindow TALLogoutSavesState -boolean FALSE'
        sh 'defaults write com.apple.loginwindow LoginwindowLaunchesRelaunchApps -boolean FALSE'
      }
    }
  end

  def recommendations
    yes = ['RECOMMENDED', :yellow, :bold]
    no = ['UNNECESSARY', :green, :bold]
    {
      'Restrict sudo privileges in /etc/sudoers' => lambda {
        if File.readable? '/etc/sudoers' and File.read('/etc/sudoers') !~ /^Defaults\s+timestamp_timeout\s*=\s*0\s*$/
          if options.verbose
            with_indent do
              <<-EOF.lines.each { |l| log l.sub(/^ {16}/, '').chomp }
                · Using visudo, add these lines to /etc/sudoers:

                  # User whitelist only
                  root ALL=(ALL) ALL
                  #{options.user.name} ALL=(ALL) ALL

                  # Disable timeouts and force passwords every time
                  Defaults timestamp_timeout = 0

                  # Convenient environment variables
                  Defaults env_reset
                  Defaults env_keep += "SSH_AUTH_SOCK SSH_AGENT_PID"
                  Defaults env_keep += "DISPLAY XAUTHORIZATION XAUTHORITY WINDOWID"
                  Defaults env_keep += "WINDOW TMUX TMUX_PANE"
              EOF
            end
          end
          yes
        else
          no
        end
      },

      'Remove system certificates and certificate authorities' => lambda {
        Dir['/System/Library/Keychains/*'].size > 0 ? yes : no
      },

      'Disable unused drivers on boot' => lambda {
        File.exists?('/Library/LaunchDaemons/com.sungpae.macdriver.plist') ? no : yes
      },

      'Disable path_helper in /etc/profile' => lambda {
        File.readlines('/etc/profile').grep(/^[^#].*\bpath_helper\b/).empty? ? no : yes
      }
    }
  end
end

$0 = File.basename(__FILE__) and Macsetup.new.run ARGV if $0 == __FILE__
