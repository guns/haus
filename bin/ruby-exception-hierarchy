#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# http://blog.nicksieger.com/articles/2006/09/06/rubys-exception-hierarchy

require 'optparse'
require 'ostruct'

class RubyExceptionHierarchy
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.indent ||= 2
  end

  def parser
    @parser ||= OptionParser.new nil, 16 do |opt|
      opt.banner = %Q(\
        http://blog.nicksieger.com/articles/2006/09/06/rubys-exception-hierarchy

        Usage: #{File.basename __FILE__} [options]

        Options:
      ).gsub /^ +/, ''

      opt.on '-a', '--all', 'Show SystemCallError Errnos' do
        options.all = true
      end

      opt.on '-i', '--indent N', Integer, 'Indent step size' do |arg|
        options.indent = arg
      end
    end
  end

  def to_hash
    exceptions, tree = [], {}

    ObjectSpace.each_object Class do |klass|
      next unless klass.ancestors.include? Exception
      next if exceptions.include? klass
      next if not options.all and klass.superclass == SystemCallError

      exceptions.push klass

      klass.ancestors.reject do |k|
        [BasicObject, Object, Kernel].include? k
      end.reverse.inject tree do |k, v|
        k[v] ||= {}
      end
    end

    tree
  end

  def to_s
    fold to_hash
  end

  def fold tree, buf = '', indent = 0
    tree.keys.sort_by(&:name).each do |k|
      buf << "%s%s\n" % [' ' * indent, k]
      indent += options.indent
      fold tree[k], buf, indent # Recurse!
      indent -= options.indent
    end

    buf
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.empty?
    puts to_s
  end
end

RubyExceptionHierarchy.new.run ARGV if $0 == __FILE__
