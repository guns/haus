#!/usr/bin/env ruby
# encoding: utf-8
#
# http://blog.nicksieger.com/articles/2006/09/06/rubys-exception-hierarchy

require 'optparse'

class RubyExceptionHierarchy
  def initialize args
    @args, @opts, @indent = args, {}, 0
  end

  def options
    OptionParser.new do |opt|
      opt.summary_width = 16
      opt.banner = %Q{\
        Print a tree representing Ruby's exception hierarchy.

        http://blog.nicksieger.com/articles/2006/09/06/rubys-exception-hierarchy

        Usage: #{File.basename __FILE__} [options]

        Options:
      }.gsub(/^ +/, '')

      opt.on '-a', '--all', 'Show all, including SystemCallError Errnos' do
        @opts[:show_all] = true
      end
    end
  end

  def error_tree
    exceptions = []
    tree = {}

    ObjectSpace.each_object Class do |klass|
      next unless klass.ancestors.include? Exception
      next if exceptions.include? klass
      next if klass.superclass == SystemCallError and not @opts[:show_all]

      exceptions << klass

      klass.ancestors.delete_if do |e|
        [Object, Kernel].include? e
      end.reverse.inject tree do |k,v|
        k[v] ||= {}
      end
    end

    tree
  end

  def print_tree tree
    tree.keys.sort_by(&:name).each do |k|
      space = (' ' * @indent); space ||= ''
      puts space + k.to_s
      @indent += 2; print_tree tree[k]; @indent -= 2
    end
  end

  def run
    options.parse @args
    print_tree error_tree
  end
end

RubyExceptionHierarchy.new(ARGV).run if __FILE__ == $0
