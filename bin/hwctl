#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012-2018 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'fileutils'
require 'json'

class Hwctl
  CPU = {
    '/sys/devices/system/cpu/intel_pstate' => {
      'min'      => '/sys/devices/system/cpu/intel_pstate/min_perf_pct',
      'max'      => '/sys/devices/system/cpu/intel_pstate/max_perf_pct',
      'no_turbo' => '/sys/devices/system/cpu/intel_pstate/no_turbo'
    },
  }

  FAN = {
    '/sys/devices/platform/it87.2608' => {
      'pwm_enable' => Dir['/sys/devices/platform/it87.2608/hwmon/hwmon1/pwm[0-9]_enable'],
      'pwm'        => Dir['/sys/devices/platform/it87.2608/hwmon/hwmon1/pwm[0-9]'],
    }
  }

  CPU_STATE_FILE = '/var/run/hwctl/cpu.json'
  FAN_STATE_FILE = '/var/run/hwctl/fan.json'

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
        Usage: #{File.basename __FILE__} command [arg]

        Commands:
          [b]enchmode
            Prepare for benchmarking:
              · Disable CPU turbo
              · Pin CPU percentage to 100%
              · Set fans to 100%
          [b]enchmode [w]ait
            Same as benchmode, but wait for stdin to close.
          [b]enchmode [r]estore
            Restore CPU and fan state.

          [c]pu
            Dump CPU state to stdout.
          [c]pu min/max
            Set CPU min/max speed percentages.
          [c]pu [n]oturbo
            Disable CPU turbo.
          [c]pu [r]estore
            Restore CPU state.

          [f]an
            Dump fan state to stdout.
          [f]an pct
            Set fan speed percentages.
          [f]an [r]estore
            Restore fan state.
          [f]an [i]nteractive
            Read fan speed percentages on stdin.
            Fan state is restored on exit.
      BANNER
    end
  end

  def save_state file, state
    warn ":: Saving state to #{file}"
    FileUtils.mkdir_p File.dirname(file)
    File.open file, 'w', 0600 do |f|
      f.puts state.to_json
    end
  end

  def write file, value
    warn "echo #{value} > #{file}"
    File.open(file, 'w') { |f| f.puts value }
  end

  #
  # BENCHMODE
  #

  def benchmode arg = nil
    _, cpu = CPU.find { |k, _| Dir.exists? k }
    _, fan = FAN.find { |k, _| Dir.exists? k }
    abort 'Unsupported hardware' if cpu.nil? or fan.nil?

    case arg
    when 'r', 'restore'
      restore_cpu_state cpu
      restore_fan_state fan
    when 'w', 'wait'
      set_cpu_no_turbo cpu, '1'
      set_cpu_speeds cpu, '100', '100'
      set_fan_speeds fan, '100'

      $stdin.gets nil

      restore_cpu_state cpu
      restore_fan_state fan
    else
      set_cpu_no_turbo cpu, '1'
      set_cpu_speeds cpu, '100', '100'
      set_fan_speeds fan, '100'
    end
  end

  #
  # CPU
  #

  def current_cpu_state sys
    { 'min'      => File.read(sys['min']).chomp,
      'max'      => File.read(sys['max']).chomp,
      'no_turbo' => File.read(sys['no_turbo']).chomp }
  end

  def restore_cpu_state sys
    abort unless File.readable? CPU_STATE_FILE

    warn ":: Restoring CPU state from #{CPU_STATE_FILE}"
    state = JSON.load File.read(CPU_STATE_FILE)

    ['min', 'max'].each do |k|
      write sys[k], state[k]
    end

    FileUtils.rm_f CPU_STATE_FILE, :verbose => true
  end

  def set_cpu_speeds sys, min, max
    state = current_cpu_state sys
    save_state CPU_STATE_FILE, state unless File.readable? CPU_STATE_FILE

    write sys['min'], min if min
    write sys['max'], max if max

    pp current_cpu_state(sys)
  end

  def set_cpu_no_turbo sys, val
    state = current_cpu_state sys
    save_state CPU_STATE_FILE, state unless File.readable? CPU_STATE_FILE

    write sys['no_turbo'], val rescue Errno::EPERM

    pp current_cpu_state(sys)
  end

  def cpu arg = nil
    driver, sys = CPU.find { |k, _| Dir.exists? k }
    abort 'Unsupported hardware' if driver.nil?

    case arg
    when nil                   then pp current_cpu_state(sys)
    when 'n', 'noturbo'        then set_cpu_no_turbo sys, '1'
    when 't', 'turbo'          then set_cpu_no_turbo sys, '0'
    when 'r', 'restore'        then restore_cpu_state sys
    when /\A(\d+)(?:\/(\d+))?/ then set_cpu_speeds sys, $1, $2
    else raise ArgumentError
    end
  end

  #
  # FAN
  #

  def current_fan_state sys
    s = { 'pwm_enable' => [], 'pwm' => [] }
    sys['pwm_enable'].each { |f| s['pwm_enable'] << File.read(f).chomp }
    sys['pwm'].each        { |f| s['pwm']        << File.read(f).chomp }
    s
  end

  def restore_fan_state sys
    abort unless File.readable? FAN_STATE_FILE

    warn ":: Restoring fan state from #{FAN_STATE_FILE}"
    state = JSON.load File.read(FAN_STATE_FILE)

    ['pwm', 'pwm_enable'].each do |k|
      sys[k].zip(state[k]).each do |f, v|
        write f, v
      end
    end

    FileUtils.rm_f FAN_STATE_FILE, :verbose => true
    warn "Restored fan state"
  end

  def set_fan_speeds sys, arg
    state = current_fan_state sys
    save_state FAN_STATE_FILE, state unless File.readable? FAN_STATE_FILE

    sys['pwm_enable'].zip(state['pwm_enable']).each do |switch, val|
      write switch, '1' if val != '1'
    end

    pct = case arg
    when /\A[+-]\d+\z/ then arg.to_f/100.0 + state['pwm'][0].to_i/255.0
    when /\A\d+\z/     then arg.to_i/100.0
    else raise ArgumentError
    end

    pct = 1 if pct > 1
    n = (0xff * pct).round.to_s

    sys['pwm'].each do |dial|
      write dial, n
    end

    pp current_fan_state(sys)
  end

  def set_fan_speeds_interactively sys
    loop do
      input = $stdin.gets "\n"
      break if input.nil?
      set_fan_speeds sys, input.strip rescue ArgumentError
    end
  ensure
    restore_fan_state sys
  end

  def fan arg = nil
    driver, sys = FAN.find { |k, _| Dir.exists? k }
    abort 'Unsupported hardware' if driver.nil?

    case arg
    when nil                then pp current_fan_state(sys)
    when 'r', 'restore'     then restore_fan_state sys
    when 'i', 'interactive' then set_fan_speeds_interactively sys
    when /\A[+-]?\d+\z/     then set_fan_speeds sys, arg
    else raise ArgumentError
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.empty?

    rest = args.drop 1

    case args.first
    when 'b', 'benchmode' then benchmode *rest
    when 'c', 'cpu'       then cpu *rest
    when 'f', 'fan'       then fan *rest
    else abort parser.help
    end
  end
end

$0 = File.basename(__FILE__) and Hwctl.new.run ARGV if $0 == __FILE__
