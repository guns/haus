#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'fileutils'

class Hwctl
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.sys_backlight ||= '/sys/class/backlight/intel_backlight'
    options.sys_fnmode ||= '/sys/module/hid_apple/parameters/fnmode'
  end

  def parser
    @parser ||= OptionParser.new nil, 28 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
        Linux hardware control wrapper.

        Usage: #{File.basename __FILE__} [options] command [args]

        Commands:

          b[acklight] [pct]
            Query or set backlight as a percentage. Argument can be signed for
            relative adjustment.

          backlight-permissions mode user group
            Set backlight control file permissions.

          fnmode [fn|media]
            Set MacBook function key mode.

        Options:
      BANNER

      opt.on '--sys-backlight PATH', '[DEFAULT: %s]' % options.sys_backlight do |arg|
        options.sys_backlight = File.expand_path arg
      end

      opt.on '--sys-fnmode PATH', '[DEFAULT: %s]' % options.sys_fnmode do |arg|
        options.sys_fnmode = File.expand_path arg
      end
    end
  end

  def brightness cur, max
    '%d %.2f%%' % [cur, cur.to_f/max * 100]
  end

  def set_brightness value, max
    v = value
    v = max if value > max
    v = 0 if value < 0

    File.open File.join(options.sys_backlight, 'brightness'), 'w' do |f|
      f.puts v
    end

    v
  end

  def backlight setting = nil
    max = File.read(File.join options.sys_backlight, 'max_brightness').to_i
    cur = File.read(File.join options.sys_backlight, 'actual_brightness').to_i

    case setting
    when nil           then brightness cur, max
    when /\A[+-]\d+\z/ then brightness set_brightness((cur + (max * (setting.to_f / 100))).round, max), max
    when /\A\d+\z/     then brightness set_brightness((max * (setting.to_f / 100)).round, max), max
    else raise ArgumentError
    end
  end

  def backlight_permissions mode, user, group
    f = File.join options.sys_backlight, 'brightness'
    FileUtils.chmod (mode.kind_of?(Fixnum) ? mode : mode.to_i(8)), f
    FileUtils.chown user, group, f
    s = File.stat f
    '%o %s %s %s' % [s.mode, s.uid, s.gid, f]
  end

  def fnmode type = nil
    case type
    when 2, 'fn'    then File.open(options.sys_fnmode, 'w') { |f| f.puts '2' }
    when 1, 'media' then File.open(options.sys_fnmode, 'w') { |f| f.puts '1' }
    when nil        then nil
    else raise ArgumentError
    end
    File.read options.sys_fnmode
  end

  def run arguments = []
    args = parser.order arguments
    rest = args.drop 1

    out = case args.first
    when 'b', 'backlight' then backlight *rest
    when 'backlight-permissions' then backlight_permissions *rest
    when 'fnmode' then fnmode *rest
    else abort parser.help
    end

    puts out if out
  end
end

$0 = File.basename(__FILE__) and Hwctl.new.run ARGV if $0 == __FILE__
