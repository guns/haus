#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'shellwords'
require 'nokogiri'

# http://stackoverflow.com/questions/747075/how-to-git-svn-clone-the-last-n-revisions-from-a-subversion-repository
class GitSvnshallowclone
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.depth ||= 5
  end

  def parser
    @parser ||= OptionParser.new nil, 16 do |opt|
      opt.banner = %Q(\
        Do a shallow clone of a svn repository.

        Usage: #{File.basename __FILE__} [options] url [basedir]

        Options:
      ).gsub /^ +/, ''

      opt.on '-d', '--depth N', Integer, 'Checkout last N revisions; default: %d' % options.depth do |arg|
        options.depth = arg
      end

      opt.on '-s', '--stdlayout', 'Assume SVN standard layout' do
        options.stdlayout = true
      end
    end
  end

  def head_rev url
    Nokogiri::XML(%x(svn log --xml --limit 1 #{url.shellescape})).css('logentry').first.attr('revision').to_i
  end

  def clone url, basedir = nil
    cmd  = %w[git svn clone]
    cmd << '--stdlayout' if options.stdlayout
    cmd += %W[--revision #{head_rev(url) - options.depth}:HEAD]
    cmd += [url, basedir || File.basename(url)]
    puts cmd.shelljoin
    system *cmd
  end

  def run arguments
    args = parser.parse arguments
    abort parser.help unless [1, 2].include? args.size
    clone *args
  end
end

GitSvnshallowclone.new.run ARGV if $0 == __FILE__
