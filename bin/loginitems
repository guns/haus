#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <sung@metablu.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'yaml'
require 'shellwords'

class Loginitems
  def initialize args = []
    @args = args
    @opts = { :rcfile => File.expand_path('~/.loginitems') }
  end

  def options
    OptionParser.new do |opt|
      opt.banner = %Q(\
        Launch apps from #{@opts[:rcfile].inspect}

        Applications should be listed in dictionary format:

            dnsmasq: sudo dnsmasq
            Mail: /Applications/Mail.app

        Keys should match the output of `ps o ucomm'.
        Values that end in `.app' will be opened with `open -g'

        Usage: #{File.basename __FILE__} [options]

        Options:\
      ).gsub /^ {8}/, ''

      opt.on '-f', '--file PATH', 'Read apps from an alternate file' do |arg|
        @opts[:rcfile] = File.expand_path arg
      end

      opt.on '-e', '--edit', 'Open config file in EDITOR' do
        exec *(ENV['EDITOR'].shellsplit << @opts[:rcfile])
      end
    end
  end

  def alive? name
    %x(ps axo ucomm).lines.map(&:strip).include? name
  end

  def open app
    Process.wait fork {
      # TODO: We should be sourcing a common PATH setting shell script
      env = {}
      env['PATH'] = ENV['PATH'].split(':').unshift(File.expand_path '..', __FILE__).uniq.join ':'
      env['DISPLAY'] = ENV['DISPLAY']
      ENV.replace env
      system *(app =~ /\.app\z/ ? %W[open -g #{File.expand_path app}] : app.shellsplit)
    }
  end

  def launch!
    YAML.load_file(@opts[:rcfile]).each do |name, app|
      if not name.kind_of? String and not app.kind_of? String
        raise "Invalid item found in #{@opts[:rcfile]}"
      elsif alive? name
        puts ":: #{name} is already running."
      else
        puts "-> #{app}"
        open app
      end
    end
  end

  def run
    args = options.parse @args
    abort 'OS X only!' unless RUBY_PLATFORM =~ /darwin/i
    launch!
  end
end

Loginitems.new(ARGV).run if $0 == __FILE__
