#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2016-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'shellwords'
require 'fileutils'

class Uz
  DEFAULTS = {
    :delete => false,
    :ignore_errors => false,
    :nowrap => false,
    :outdir => '.',
    :password => nil,
    :overwrite => false
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Convenient wrapper around `7z x`

        Usage: #{File.basename __FILE__} [options] archive â€¦

        Options:
      BANNER

      opt.on '-d', '--delete' do
        @delete = true
      end

      opt.on '-i', '--ignore-errors' do
        @ignore_errors = true
      end

      opt.on '-n', '--nowrap' do
        @nowrap = true
      end

      opt.on '-o', '--outdir PATH' do |arg|
        @outdir = File.expand_path arg
      end

      opt.on '-p', '--password STRING' do |arg|
        @password = arg
      end

      opt.on '-O', '--overwrite' do
        @overwrite = true
      end
    end
  end

  def sh *args
    warn "\e[32;1m:: #{args.shelljoin}\e[0m"
    system *args
  end

  def cmdargs tempdir, file
    cmd = ['7z', 'x', "-o#{tempdir}", "-ao#{@overwrite ? 'a' : 's'}"]
    cmd << "-p#{@password}" if @password
    cmd << file
  end

  def extract! *files
    files.each do |file|
      dir = File.join @outdir, File.basename(file, File.extname(file))
      sh *cmdargs(dir, file)
      unless @ignore_errors
        exit $?.exitstatus if $? and $?.exitstatus != 0
      end

      out = Dir.entries(dir).reject { |f| f =~ /\A\.{1,2}\z/ }
      if @nowrap or out.size == 1
        FileUtils.mv dir, dir + '__uztmp__', :verbose => true
        dir << '__uztmp__'
        out.each do |f|
          outf = File.join @outdir, f
          raise "#{outf} already exists! Leaving #{f}" if File.exists? outf and not @overwrite
          FileUtils.mv File.join(dir, f), outf, :verbose => true
        end
        FileUtils.rmdir dir, :verbose => true
      end

      if @delete
        list = file
        if File.extname(file) == '.001'
          list = Dir['%s.[0-9][0-9][0-9]' % file.chomp('.001')]
        end
        FileUtils.rm_f list, :verbose => true if @delete
      end
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.empty?
    extract! *args
  end
end

$0 = File.basename(__FILE__) and Uz.new.run ARGV if $0 == __FILE__
