#!/usr/bin/env python
#
# Copyright (c) 2016-2023 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

"""
Convenient 7z extract/list wrapper.
"""

import enum
import glob
import os
import re
import subprocess
import sys
import threading
import time
from argparse import ArgumentParser

import haus

Wrap = enum.Enum("Wrap", ("auto", "never", "always"))


def parse_args(args):
    parser = ArgumentParser(description=__doc__)
    parser.set_defaults(wrap=Wrap.auto)
    parser.add_argument("-d", "--delete", action="store_true")
    parser.add_argument("-i", "--ignore-errors", action="store_true")
    parser.add_argument(
        "-l", "--list", action="store_true", help="List archive contents"
    )
    parser.add_argument(
        "-n", "--no-wrap", dest="wrap", action="store_const", const=Wrap.never
    )
    parser.add_argument(
        "-W", "--force-wrap", dest="wrap", action="store_const", const=Wrap.always
    )
    parser.add_argument("-o", "--outdir", default="")
    parser.add_argument("-p", "--password")
    parser.add_argument("-O", "--overwrite", action="store_true")
    parser.add_argument("-w", "--wait-close", action="store_true")
    parser.add_argument("archives", nargs="+", metavar="archive")
    return parser.parse_args(args)


def build_extraction_command(path, outdir, overwrite, password):
    cmd = ["7z", "x", f"-o{outdir or '.'}", f"-ao{'a' if overwrite else 's'}"]
    if password:
        cmd.append(f"-p{password}")
    cmd.append("--")
    cmd.append(path)
    return cmd


RE_ZIP_PART = re.compile(r"\A(.*\.(?:7z|zip))\.001\Z")
RE_RAR_PART = re.compile(r"\A(.*)\.part1\.rar\Z")


def extract(paths, opts):
    for path in paths:
        xdir, _ = os.path.splitext(os.path.join(opts.outdir, os.path.basename(path)))
        haus.run(
            build_extraction_command(path, xdir, opts.overwrite, opts.password),
            check=True,
        )
        entries = os.listdir(xdir)

        if opts.wrap == Wrap.never or (opts.wrap == Wrap.auto and len(entries) <= 1):
            tmpdir = xdir + "__uztmp"
            os.rename(xdir, tmpdir)

            for filename in entries:
                oldpath = os.path.join(tmpdir, filename)
                newpath = os.path.join(opts.outdir, filename)
                if os.path.exists(newpath):
                    if opts.overwrite:
                        os.remove(newpath)
                    else:
                        raise RuntimeError(
                            f"{newpath} already exists! Leaving {oldpath}"
                        )
                os.rename(oldpath, newpath)

            os.rmdir(tmpdir)

        if opts.delete:
            if m := RE_ZIP_PART.match(path):
                removals = glob.glob(f"{m.group(1)}.[0-9][0-9][0-9]")
            elif m := RE_RAR_PART.match(path):
                removals = glob.glob(f"{m.group(1)}.part[0-9]*.rar")
            else:
                removals = [path]

            for p in removals:
                haus.print(f"Removing {p}", ["yellow"], file=sys.stderr)
                os.remove(p)


def wait_and_extract(lock, path, opts):
    haus.run(
        ["inotifywait", "-e", "close_write", "--", path],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    time.sleep(0.5)
    with lock:
        extract([path], opts)


def wait_and_extract_all(paths, opts):
    lock = threading.Lock()
    threads = []
    for path in paths:
        th = threading.Thread(target=wait_and_extract, args=(lock, path, opts))
        th.start()
        threads.append(th)

    for th in threads:
        th.join()


def execute(args):
    opts = parse_args(args)

    if opts.list:
        for path in opts.archives:
            haus.run(["7z", "l", "--", path])
    elif opts.wait_close:
        wait_and_extract_all(opts.archives, opts)
    else:
        extract(opts.archives, opts)


if __name__ == "__main__":
    sys.exit(execute(sys.argv[1:]))
