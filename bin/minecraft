#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'fileutils'

class Minecraft
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.jar ||= :server
    options.memory ||= 256
    options.gamedir ||= '/srv/games/minecraft'
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
           _____   ___ _______ ______________________________   _____ _____________________
          /     \\ |   |\\      \\\\_   _____/\\_   ___ \\______   \\ /  _  \\\\_   _____/__    ___/
         /  \\ /  \\|   |/   |   \\|    __)_ /    \\  \\/|       _//  /_\\  \\|    __)   |    |
        /    Y    \\   /    |    \\        \\\\     \\___|    |   \\    |    \\     \\    |    |
        \\____|__  /___\\____|__  /______  / \\______  /____|_  /____|__  /___  /    |____|
                \\/            \\/       \\/         \\/       \\/        \\/    \\/

        Usage: #{File.basename __FILE__} [options] start|stop|restart

        Options:
      BANNER

      opt.on '-b', '--bukkit', 'Load craftbukkit.jar' do
        options.jar = :bukkit
      end

      opt.on '-g', '--gamedir PATH', 'Path to minecraft directory [DEFAULT: %s]' % options.gamedir do |arg|
        options.gamedir = File.expand_path arg
      end

      opt.on '-m', '--memory SIZE', Integer, 'Memory in MB [DEFAULT: %d]' % options.memory do |arg|
        options.memory = arg
      end

      opt.on '-w', '--world NAME', 'World to play. Creates new world if not found.' % options.world do |arg|
        options.world = arg
      end

      opt.on '-u', '--update', 'Update all server jars' do
        options.update = true
      end

      opt.on '-d', '--debug', 'Keep server process in foreground' do
        options.debug = true
      end
    end
  end

  def gamedir
    options.gamedir
  end

  def savedir
    File.join gamedir, 'saves'
  end

  def pidfile
    File.join gamedir, 'minecraft.pid'
  end

  def jar_paths
    { :server => File.join(gamedir, 'minecraft_server.jar'),
      :bukkit => File.join(gamedir, 'craftbukkit.jar') }
  end

  def jar_urls
    { :server => 'https://s3.amazonaws.com/MinecraftDownload/launcher/minecraft_server.jar',
      :bukkit => 'http://dl.bukkit.org/latest-rb/craftbukkit.jar' }
  end

  def write_pidfile pid
    File.open(pidfile, 'w') { |f| f.puts pid }
  end

  def read_pidfile
    File.read(pidfile).to_i
  end

  def remove_pidfile
    FileUtils.rm_f pidfile
  end

  def have_pidfile
    File.exists? pidfile
  end

  def setup_minecraft!
    raise 'Game directory "%s" does not exist!' % gamedir unless Dir.exists? gamedir

    jar_urls.each do |key, url|
      system 'curl', '-#L', '-o', jar_paths[key], url
    end

    default_savedir = File.join gamedir, 'saves', 'default'
    world_link = File.join gamedir, 'world'

    FileUtils.mkdir_p default_savedir, :mode => File.stat(gamedir).mode
    FileUtils.ln_s default_savedir, world_link unless File.exists? world_link
  end

  def setup_world! name
    src = File.join savedir, name
    dst = File.join gamedir, 'world'

    FileUtils.rm_f dst
    FileUtils.mkdir_p src
    FileUtils.ln_s src, dst
  end

  def fork_server_and_wait jar, memory, opts = {}
    Dir.chdir gamedir do
      cmd = %W[java -Xms#{memory}M -Xmx#{memory}M -jar #{jar} nogui]

      begin
        pid = fork do
          unless opts[:debug]
            $stdin.reopen opts[:stdin] || '/dev/null'
            $stdout.reopen '/dev/null'
            $stderr.reopen '/dev/null'
            Process.setsid
          end
          exec *cmd
        end

        puts '[%d] %s' % [pid, cmd.join(' ')]

        [:TERM, :QUIT, :INT].each do |sig|
          trap(sig) { Process.kill sig, pid }
        end

        write_pidfile pid
        Process.wait pid
        remove_pidfile
      end
    end
  end

  def with_fifo
    path = File.join gamedir, 'stdin'
    system 'mkfifo', '--mode=0660', path
    writer = File.open path, 'r+'
    yield writer
  ensure
    writer.close
    FileUtils.rm_f path
  end

  def start_server!
    raise 'Minecraft directory is locked!' if File.exists? pidfile

    setup_world! options.world if options.world

    if options.debug
      fork_server_and_wait jar_paths[options.jar], options.memory, :debug => options.debug
    else
      Process.detach fork {
        # Keep a channel open for the SysOp
        with_fifo do |fifo|
          fork_server_and_wait jar_paths[options.jar], options.memory, :stdin => fifo
        end
      }
    end
  end

  def stop_server!
    return unless have_pidfile
    pid = read_pidfile
    begin
      Process.kill 0, pid
      puts 'Sending SIGTERM to %d' % pid
      Process.kill :TERM, pid
      sleep 0.1 while Process.kill 0, pid rescue nil
    rescue Errno::ESRCH
      puts 'No such process, removing %s' % pidfile
      remove_pidfile
    rescue Errno::EPERM
      puts 'Insufficient permissions to kill process %d' % pid
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.size == 1

    setup_minecraft! if options.update or not File.exists? jar_paths[options.jar]

    case args.first
    when 'start'   then start_server!
    when 'stop'    then stop_server!
    when 'restart' then stop_server!; start_server!
    else abort parser.help
    end
  end
end

$0 = File.basename(__FILE__) and Minecraft.new.run ARGV if $0 == __FILE__
