#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'fileutils'

class Minecraft
  SERVER_DOWNLOAD_URL = 'https://s3.amazonaws.com/MinecraftDownload/launcher/minecraft_server.jar'
  SERVER_JAR_BASENAME = File.basename SERVER_DOWNLOAD_URL

  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.memory ||= 256
    options.gamedir ||= '/srv/games/minecraft'
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
           _____   ___ _______ ______________________________   _____ _____________________
          /     \\ |   |\\      \\\\_   _____/\\_   ___ \\______   \\ /  _  \\\\_   _____/__    ___/
         /  \\ /  \\|   |/   |   \\|    __)_ /    \\  \\/|       _//  /_\\  \\|    __)   |    |
        /    Y    \\   /    |    \\        \\\\     \\___|    |   \\    |    \\     \\    |    |
        \\____|__  /___\\____|__  /______  / \\______  /____|_  /____|__  /___  /    |____|
                \\/            \\/       \\/         \\/       \\/        \\/    \\/

        Usage: #{File.basename __FILE__} [options] start|stop|restart

        Options:
      BANNER

      opt.on '-j', '--jar JARNAME', 'Name of server jar' do |arg|
        raise '`--jar` argument must not be a path' if arg =~ /\//
        options.jar = arg
      end

      opt.on '-w', '--world NAME', 'World to play. Creates new world if not found.' % options.world do |arg|
        options.world = arg
      end

      opt.on '-g', '--gamedir PATH', 'Path to minecraft directory [DEFAULT: %s]' % options.gamedir do |arg|
        options.gamedir = File.expand_path arg
      end

      opt.on '-m', '--memory SIZE', Integer, 'Memory in MB [DEFAULT: %d]' % options.memory do |arg|
        options.memory = arg
      end

      opt.on '-u', '--update', 'Update %s' % SERVER_JAR_BASENAME do
        options.update = true
      end

      opt.on '-d', '--debug', 'Keep server process in foreground' do
        options.debug = true
      end
    end
  end

  #
  # Game paths
  #

  def gamedir *args
    File.join options.gamedir, *args
  end

  def pidfile
    gamedir 'minecraft.pid'
  end

  def jarlink
    gamedir 'server.jar'
  end

  def worldlink
    gamedir 'world'
  end

  def read_jarlink
    File.symlink?(jarlink) ? File.readlink(jarlink) : jarlink
  end

  def read_worldlink
    File.symlink?(worldlink) ? File.readlink(worldlink) : worldlink
  end

  #
  # Pidfile handling
  #

  def write_pidfile pid
    File.open(pidfile, 'w') { |f| f.puts pid }
  end

  def read_pidfile
    File.read(pidfile).to_i
  end

  def remove_pidfile
    FileUtils.rm_f pidfile
  end

  def have_pidfile
    File.exists? pidfile
  end

  #
  # Helpers
  #

  def download_official_server_jar!
    raise 'Game directory "%s" does not exist!' % gamedir unless Dir.exists? gamedir
    success = system 'curl', '-#L', '-o', gamedir(SERVER_JAR_BASENAME), SERVER_DOWNLOAD_URL
    raise 'Download failed!' unless success
  end

  def setup_links jarname, name
    world = gamedir 'saves', jarname.chomp(File.extname jarname), name

    FileUtils.rm_f worldlink
    FileUtils.mkdir_p world, :mode => File.stat(gamedir).mode
    FileUtils.ln_s world, worldlink

    FileUtils.rm_f jarlink
    FileUtils.ln_s gamedir(jarname), jarlink
  end

  def with_fifo
    path = gamedir 'stdin'
    system 'mkfifo', '--mode=0660', path
    fifo = File.open path, 'r+'
    yield fifo
  ensure
    fifo.close
    FileUtils.rm_f path
  end

  #
  # RC methods
  #

  def fork_server_and_wait jar, memory, opts = {}
    Dir.chdir gamedir do
      cmd = %W[java -Xms#{memory}M -Xmx#{memory}M -jar #{jar} nogui]

      begin
        pid = fork do
          unless opts[:debug]
            $stdin.reopen opts[:stdin] || '/dev/null'
            $stdout.reopen '/dev/null'
            $stderr.reopen '/dev/null'
            Process.setsid
          end
          exec *cmd
        end

        puts '[%d] %s' % [pid, cmd.join(' ')]
        puts 'JAR: %s' % read_jarlink
        puts 'WORLD: %s' % read_worldlink

        [:TERM, :QUIT, :INT].each do |sig|
          trap(sig) { Process.kill sig, pid }
        end

        write_pidfile pid
        Process.wait pid
        remove_pidfile
      end
    end
  end

  def start_server!
    raise 'Minecraft directory is locked!' if have_pidfile

    if not File.exists? jarlink and not File.exists? worldlink
      download_official_server_jar!
      setup_links SERVER_JAR_BASENAME, 'default'
    elsif options.update
      download_official_server_jar!
    end

    if options.jar or options.world
      setup_links options.jar || SERVER_JAR_BASENAME, options.world || 'default'
    end

    if options.debug
      fork_server_and_wait jarlink, options.memory, :debug => options.debug
    else
      Process.detach fork {
        # Keep a channel open for the SysOp
        with_fifo do |fifo|
          fork_server_and_wait jarlink, options.memory, :stdin => fifo
        end
      }
    end
  end

  def stop_server!
    return unless have_pidfile

    pid = read_pidfile

    begin
      Process.kill 0, pid
      puts 'Sending SIGTERM to %d' % pid
      Process.kill :TERM, pid
      sleep 0.1 while Process.kill 0, pid rescue nil
    rescue Errno::ESRCH
      puts 'No such process, removing %s' % pidfile
      remove_pidfile
    rescue Errno::EPERM
      # Try writing to fifo instead
      fifo = gamedir 'stdin'
      if File.writable? fifo
        File.open(fifo, 'w') { |f| f.puts 'stop' }
        sleep 0.1 while File.exists? fifo
      else
        puts 'Insufficient permissions to kill process %d' % pid
      end
    end
  end

  #
  # main
  #

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.size == 1

    case args.first
    when 'start'   then start_server!
    when 'stop'    then stop_server!
    when 'restart' then stop_server!; start_server!
    else abort parser.help
    end
  end
end

$0 = File.basename(__FILE__) and Minecraft.new.run ARGV if $0 == __FILE__
