#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2013 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'fileutils'
require 'json'
require 'pathname'

class Minecraft
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.memory ||= 256
    options.gamedir ||= '/srv/games/minecraft'
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
           _____   ___ _______ ______________________________   _____ _____________________
          /     \\ |   |\\      \\\\_   _____/\\_   ___ \\______   \\ /  _  \\\\_   _____/__    ___/
         /  \\ /  \\|   |/   |   \\|    __)_ /    \\  \\/|       _//  /_\\  \\|    __)   |    |
        /    Y    \\   /    |    \\        \\\\     \\___|    |   \\    |    \\     \\    |    |
        \\____|__  /___\\____|__  /______  / \\______  /____|_  /____|__  /___  /    |____|
                \\/            \\/       \\/         \\/       \\/        \\/    \\/

        Usage: #{File.basename __FILE__} [options] start|stop|restart|update|repl

        Options:
      BANNER

      opt.on '-j', '--jar PATH', 'Path to server jar' do |arg|
        options.jar = File.expand_path arg
      end

      opt.on '-w', '--world NAME', 'Name of world to play. Creates new world if not found.' % options.world do |arg|
        options.world = arg
      end

      opt.on '-g', '--gamedir PATH', 'Path to minecraft directory [DEFAULT: %s]' % options.gamedir do |arg|
        options.gamedir = File.expand_path arg
      end

      opt.on '-m', '--memory SIZE', Integer, 'Memory in MB [DEFAULT: %d]' % options.memory do |arg|
        options.memory = arg
      end

      opt.on '-d', '--debug', 'Keep server process in foreground' do
        options.debug = true
      end
    end
  end

  #
  # Game paths
  #

  def gamedir *args
    File.join options.gamedir, *args
  end

  def pidfile
    gamedir 'minecraft.pid'
  end

  def jarlink
    gamedir 'server.jar'
  end

  def worldlink
    gamedir 'world'
  end

  def read_jarlink
    File.symlink?(jarlink) ? File.readlink(jarlink) : jarlink
  end

  def read_worldlink
    File.symlink?(worldlink) ? File.readlink(worldlink) : worldlink
  end

  #
  # Pidfile handling
  #

  def write_pidfile pid
    File.open(pidfile, 'w') { |f| f.puts pid }
  end

  def read_pidfile
    File.read(pidfile).to_i
  end

  def remove_pidfile
    FileUtils.rm_f pidfile
  end

  def have_pidfile
    File.exists? pidfile
  end

  #
  # Helpers
  #

  def fetch_versions
    JSON.parse %x(curl -sL https://s3.amazonaws.com/Minecraft.Download/versions/versions.json)
  end

  def latest_server_jar_url
    release = fetch_versions['latest']['release']
    File.join 'https://s3.amazonaws.com/Minecraft.Download/versions', release, 'minecraft_server.%s.jar' % release
  end

  def download_latest_server_jar
    raise 'Game directory "%s" does not exist!' % gamedir unless Dir.exists? gamedir

    url = latest_server_jar_url
    path = gamedir 'jars', File.basename(url)
    FileUtils.mkdir_p File.dirname(path)

    if File.exists? path
      puts "Skipping download, #{path} already exists."
    else
      success = system 'curl', '-#L', '-o', path, url
      raise 'Download failed!' unless success
    end

    path
  end

  def link_relative src, dst
    lsrc = Pathname.new(File.expand_path src).relative_path_from Pathname.new(File.expand_path dst).dirname
    FileUtils.ln_s lsrc, dst
  end

  def setup_jarlink jarpath
    FileUtils.rm_f jarlink
    link_relative jarpath, jarlink
  end

  def setup_worldlink jarpath, worldname
    worldpath = gamedir 'saves', File.basename(jarpath)[/(.*?)\.?/, 1], worldname

    FileUtils.rm_f worldlink
    FileUtils.mkdir_p worldpath, :mode => File.stat(gamedir).mode
    link_relative worldpath, worldlink
  end

  def with_fifo
    path = gamedir 'stdin'
    system 'mkfifo', '--mode=0660', path
    fifo = File.open path, 'r+'
    yield fifo
  ensure
    fifo.close
    FileUtils.rm_f path
  end

  def have_rlwrap
    system '/bin/sh', '-c', 'type rlwrap >/dev/null 2>&1'
  end

  #
  # RC methods
  #

  def update!
    setup_jarlink download_latest_server_jar
  end

  def fork_server_and_wait memory, opts = {}
    Dir.chdir gamedir do
      cmd = %W[java -Xmx#{memory}M -jar #{jarlink} nogui]

      begin
        pid = fork do
          unless opts[:debug]
            $stdin.reopen opts[:stdin] || '/dev/null'
            $stdout.reopen '/dev/null'
            $stderr.reopen '/dev/null'
            Process.setsid
          end
          exec *cmd
        end

        puts '[%d] %s' % [pid, cmd.join(' ')]
        puts 'JAR: %s' % read_jarlink
        puts 'WORLD: %s' % read_worldlink

        [:TERM, :QUIT, :INT].each do |sig|
          trap(sig) { Process.kill sig, pid }
        end

        write_pidfile pid
        Process.wait pid
        remove_pidfile
      end
    end
  end

  def start_server!
    raise 'Minecraft directory is locked!' if have_pidfile

    if options.jar
      setup_jarlink options.jar
    end

    if not File.exists? jarlink
      raise "Server symlink #{jarlink} is broken!\nTry running `minecraft update`."
    end

    if options.world
      setup_worldlink read_jarlink, options.world
    end

    if not File.exists? worldlink
      setup_worldlink read_jarlink, 'default'
    end

    if options.debug
      fork_server_and_wait options.memory, :debug => options.debug
    else
      Process.detach fork {
        with_fifo { |fifo|
          fork_server_and_wait options.memory, :stdin => fifo
        }
      }
    end
  end

  def stop_server!
    return unless have_pidfile

    pid = read_pidfile

    begin
      Process.kill 0, pid
      puts 'Sending SIGTERM to %d' % pid
      Process.kill :TERM, pid
      sleep 0.1 while Process.kill 0, pid rescue nil
    rescue Errno::ESRCH
      puts 'No such process, removing %s' % pidfile
      remove_pidfile
    rescue Errno::EPERM
      # Try writing to fifo instead
      fifo = gamedir 'stdin'
      if File.writable? fifo
        File.open(fifo, 'w') { |f| f.puts 'stop' }
        sleep 0.1 while File.exists? fifo
      else
        puts 'Insufficient permissions to kill process %d' % pid
      end
    end
  end

  def start_repl!
    raise 'Minecraft server is not running!' unless have_pidfile

    File.open gamedir('stdin'), 'w' do |fifo|
      begin
        fifo.sync = true
        log = IO.popen ['tail', '-fn100', gamedir('logs/latest.log')]
        loop do
          (rd,), = select [log, $stdin]
          if rd == $stdin
            fifo.puts rd.gets("\n")
          else
            puts rd.gets
          end
        end
      rescue Interrupt
        puts 'Interrupt'
      ensure
        log.close
      end
    end
  end

  #
  # main
  #

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.size == 1

    case args.first
    when 'start'   then start_server!
    when 'stop'    then stop_server!
    when 'restart' then stop_server!; start_server!
    when 'update'  then update!
    when 'repl'
      if ENV['RLWRAP_MINECRAFT'] or ENV['_'] =~ /rlwrap\z/ or not have_rlwrap
        start_repl!
      else
        ENV['RLWRAP_MINECRAFT'] = '1'
        exec 'rlwrap', '-r', $0, *arguments
      end
    else
      abort parser.help
    end
  end
end

$0 = File.basename(__FILE__) and Minecraft.new.run ARGV if $0 == __FILE__
