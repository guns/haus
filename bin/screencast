#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'

class Screencast
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.audio ||= true
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Capture uncompressed X11 screen data and audio input to file. If
        argument is a directory, a timestamped file is created in that
        directory instead. If no arguments are given, the current directory is
        used as the parameter.

        Usage: #{File.basename __FILE__} [options] [file|dir]

        Options:
      BANNER

      opt.on '-w', '--window', 'Set capture area to interactively chosen window' do
        options.window = true
      end

      opt.on '--window-id ID', 'Set capture area to given window ID' do |arg|
        options.window = true
        options.window_id = arg
      end

      opt.on '-g', '--geometry WxH+X,Y', 'Geometry and offset of capture area' do |arg|
        options.geometry = arg.match(/(\d+)(?:x(\d+)(?:\+(\d+))(?:,(\d+)))/)[1..-1]
      end

      opt.on '-d', '--delay SECONDS', Integer, 'Seconds to wait before recording' do |arg|
        options.delay = arg
      end

      opt.on '-n', '--no-audio', 'Do not record audio' do
        options.audio = false
      end
    end
  end

  def fmt_geometry geometry
    w, h, x, y = geometry
    { :dimensions => "#{w}x#{h}", :offset => "+#{x},#{y}" }
  end

  def get_window_geometry id
    x, y, w, h = (id ? %x(xwininfo -id #{id}) : %x(xwininfo)).match(/
      Absolute\ upper-left\ X:\s*(\d+).*
      Absolute\ upper-left\ Y:\s*(\d+).*
      Width:\s*(\d+).*
      Height:\s*(\d+).*
    /mx)[1..4]
    [w, h, x, y]
  end

  def current_display
    ENV['DISPLAY'] + '.0'
  end

  def current_screen_dimensions
    %x(xrandr).match(/current (\d+) x (\d+)/)[1..2].join ','
  end

  def new_filename
    Time.now.strftime('%Y-%m-%d:%H:%M:%S') + '.mkv'
  end

  def countdown delay
    if delay > 0
      print 'Starting in '
      delay.times.each { |n| print '%d...' % (delay - n); sleep 1 }
      puts
    end
  end

  def record file, opts = {}
    display = opts[:display] || ':0.0'

    dimensions, offset = if opts[:geometry]
      fmt_geometry(opts[:geometry]).values_at :dimensions, :offset
    else
      [opts[:dimensions] || current_screen_dimensions, opts[:offset] || '+0,0']
    end

    # http://ubuntuforums.org/showthread.php?t=1392026
    copts = %W[-f x11grab -r 30 -s #{dimensions} -i #{display}#{offset}]
    copts += %W[-f alsa -ac 2 -i pulse] if opts[:audio]
    copts += %W[
      -vcodec libx264
      -preset ultrafast
      -tune animation
      -crf 0
      -y -threads auto
    ]
    copts += %W[
      -acodec pcm_s16le
      -af bandreject=frequency=60:width_type=q:width=1.0
    ] if opts[:audio]

    exec 'ffmpeg', *copts, file
  end

  def run arguments = []
    args = parser.parse arguments
    args = ['.'] if args.empty?
    abort parser.help if args.size > 1
    file = args.first
    file = File.join file, new_filename if File.directory? file
    geometry = options.window ? get_window_geometry(options.window_id) : options.geometry
    countdown options.delay.to_i
    record file, :geometry => geometry, :audio => options.audio
  end
end

$0 = File.basename(__FILE__) and Screencast.new.run ARGV if $0 == __FILE__
