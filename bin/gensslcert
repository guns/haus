#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'fileutils'

class Gensslcert
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.length  ||= 2048
    options.openssl ||= %x(/bin/sh -c 'command -v openssl').chomp
    @starttime = Time.now
  end

  def parser
    @parser ||= OptionParser.new do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Generate an SSL Certificate.

        http://wiki.nginx.org/NginxHttpSslModule#Generate_Certificates

        Usage: #{File.basename __FILE__} [options] /path/to/outdir/basename

        Options:
      BANNER

      opt.on '-l', '--length NUM', Integer, "Length of private key; #{options.length} by default" do |arg|
        options.length = arg
      end

      opt.on '-d', '--decrypt-private-key', 'Create an unencrypted version of the private key' do
        options.decrypt_private_key = true
      end

      opt.on '-s', '--sign', 'Create a self-signed certificate' do
        options.sign = true
      end

      opt.on '--openssl PATH', 'Specify the openssl program' do |arg|
        options.openssl = arg
      end
    end
  end

  def openssl args = []
    cmd = [options.openssl, *args]
    puts cmd.join(' ')
    system *cmd
  end

  # openssl does exit(0) even on error, so we check the files instead
  def created? file
    File.exists? file and File.mtime(file) > @starttime and File.size(file) > 0
  end

  def generate_private_key! key, nopass = nil
    openssl %W[genrsa -des3 -out #{key} #{options.length}]
    raise 'failed to generate private key' unless created? key

    if nopass
      puts "\nDecrypting private key:"

      openssl %W[rsa -in #{key} -out #{nopass}]
      raise 'failed to decrypt private key' unless created? nopass
    end

    nopass || key
  end

  def generate_certificate_signing_request! key, csr
    puts "\nGenerating certificate signing request:"

    openssl %W[req -new -key #{key} -out #{csr}]
    raise 'failed to create CSR' unless created? csr

    csr
  end

  def generate_self_signed_certificate! key, csr, crt
    puts "\nGenerating self-signed certificate:"

    openssl %W[x509 -req -days 365 -in #{csr} -signkey #{key} -out #{crt}]
    raise 'failed to create certificate' unless created? crt

    crt
  end

  def generate! path
    key = "#{path}.key"
    npw = "#{path}.key.nopass"
    csr = "#{path}.csr"
    crt = "#{path}.crt"

    FileUtils.mkdir_p File.dirname(path)

    keyfile = generate_private_key! key, (npw if options.decrypt_private_key)
    generate_certificate_signing_request! keyfile, csr
    generate_self_signed_certificate! keyfile, csr, crt if options.sign
  end

  def run arguments = []
    args = parser.parse arguments

    abort parser.help if args.length != 1
    abort 'STDIN must be a tty!' if not $stdin.tty?

    generate! args.first
  end
end

$0 = File.basename(__FILE__) and Gensslcert.new.run ARGV if __FILE__ == $0
