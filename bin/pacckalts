#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'shellwords'

@verbose = false

OptionParser.new nil, 24 do |opt|
  opt.on '-v', '--verbose' do
    @verbose = true
  end
end.parse ARGV

$write_lock = Mutex.new

def warn msg
  $write_lock.synchronize { $stderr.puts msg if @verbose }
end

def log msg
  $write_lock.synchronize { puts msg }
end

def check_line line
  pkg = line.split[0]
  upstream = pkg[/(.*)-(nerv|alt|git)$/, 1]

  if upstream.nil?
    warn "∄ #{pkg}"
    return
  end

  v2 = %x(pacman --sync --info #{upstream.shellescape} 2>/dev/null)[/Version\s*:\s*(.*)/, 1]

  if $?.exitstatus != 0
    warn "∄ #{pkg}"
    return
  end

  v1 = %x(pacman --query --info #{pkg.shellescape})[/Version\s*:\s*\S*?(\d.*)/, 1]
  cmp = %x(vercmp #{v1.shellescape} #{v2.shellescape}).to_i

  if cmp < 0
    log "✖ #{pkg}: #{v1} < #{v2}"
  else
    warn "✔ #{pkg}"
  end
end

lines = %x(pacman --query --foreign).lines
lock, i, pool = Mutex.new, -1, []

(File.read('/proc/cpuinfo').scan(/^processor/i).size rescue 1).times do
  pool << Thread.new do
    loop do
      n = lock.synchronize { i += 1 }
      line = lines[n]
      break if line.nil?
      check_line line
    end
  end
end

pool.each &:join
