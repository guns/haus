#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'fileutils'
require 'set'
require 'haus/queue'
require 'haus/utils'

class Lninstall
  DEFAULTS = {
    :init => false,
    :libs => false,
    :share => false,
    :uninstall => false,
    :broken => false,
    :src => nil,
    :dst => nil,
    :pattern => nil
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
    @queue = Haus::Queue.new :relative => true
  end

  def parser
    @parser ||= OptionParser.new nil, 16 do |opt|
      opt.banner = <<~BANNER
        Link the program executables, man pages, and init scripts of one
        directory tree to another. Also works in reverse.

        Usage: #{File.basename __FILE__} [options] src dst [pattern]

        Options:
      BANNER

      opt.on '-a', '--all', 'Also link init, headers, libraries, and all of share/' do
        @init = @libs = @share = true
      end

      opt.on '-A', '--absolute', 'Create absolute links instead of relative links' do
        @queue.options.relative = false
      end

      opt.on '-i', '--init', 'Also link init files' do
        @init = true
      end

      opt.on '-l', '--libs', 'Also link header files and libraries' do
        @libs = true
      end

      opt.on '-s', '--share', 'Also link all files in share/' do
        @share = true
      end

      opt.on '-f', '--force', 'Overwrite all files without prompting' do
        @queue.options.force = true
      end

      opt.on '-n', '--noop', 'Make no changes, but show what would have been done' do
        @queue.options.noop = true
      end

      opt.on '-q', '--quiet', 'Produce no output' do
        @queue.options.quiet = true
      end

      opt.on '-u', '--uninstall', 'Unlink files in `dst` that link to corresponding files in `src`' do
        @uninstall = true
      end

      opt.on '-b', '--broken', "Only uninstall broken links" do
        @broken = true
      end
    end
  end

  def src
    File.expand_path @src rescue nil
  end

  def dst
    File.expand_path @dst rescue nil
  end

  def dirpaths patterns
    fs = {}
    Dir[*patterns].each do |f|
      if File.symlink? f
        fs[File.join(File.realdirpath(File.dirname f), File.basename(f))] = f
      else
        fs[File.realdirpath(f)] = f
      end
    end
    Set.new fs.values
  end

  def program_files base
    dirpaths %W[
      #{base}/{,s}bin/*
      #{base}/share/man/**/*
    ]
  end

  def init_files base
    dirpaths %W[
      #{base}/lib/systemd/**/*
      #{base}/etc/{rc.d,init.d}/*
    ]
  end

  def library_files base
    dirpaths %W[
      #{base}/include/**/*
      #{base}/lib/**/*
    ]
  end

  def share_files base
    dirpaths %W[
      #{base}/share/**/*
    ]
  end

  def source_files base
    fs = program_files base
    fs.merge init_files(base)    if @init  or @uninstall
    fs.merge library_files(base) if @libs  or @uninstall
    fs.merge share_files(base)   if @share or @uninstall
    fs
  end

  def src_files
    @src_files ||= source_files(src).select do |f|
      File.file? f or File.symlink? f
    end
  end

  # Returns a list of all files in dst that link to files in src;
  # the files returned may have different basenames than their sources
  def dst_files
    @dst_files ||= begin
      src_dirs = Set.new src_files.map { |f| File.dirname f }
      source_files(dst).select do |f|
        File.symlink? f and src_dirs.include? File.dirname(Haus::Utils.readlink(f))
      end
    end
  end

  def install
    src_files.each do |f|
      next if @pattern and f !~ @pattern
      @queue.add_link f, f.sub(%r{\A#{src}(.*)}, dst + '\1')
    end

    @queue.execute
  end

  def uninstall
    dst_files.each do |f|
      next if @pattern and f !~ @pattern
      next if @broken and File.exist? Haus::Utils.readlink(f)
      @queue.add_deletion f
    end

    if @queue.execute
      dst_files.map { |f| File.dirname f }.uniq.each do |d|
        FileUtils.rmdir d if Dir.entries(d).reject { |e| e == '.' || e == '..' }.empty?
      end
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.size == 2 or args.size == 3

    @src, @dst, pat = args
    @pattern = Haus::Utils.regexp_parse pat if pat
    @uninstall ? uninstall : install
  end
end

$0 = File.basename(__FILE__) and Lninstall.new.run ARGV if $0 == __FILE__
