#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011-2015 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'nerv/util/notification'

class Notify
  attr_reader :notifier

  def initialize opts = {}
    @notifier = NERV::Util::Notification.new opts
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] [msg]

        Options:
      BANNER

      opt.on '-a', '--alert' do
        notifier.apply_preset 'alert'
      end

      opt.on '-w', '--warning' do
        notifier.apply_preset 'warning'
      end

      opt.on '-s', '--success' do
        notifier.apply_preset 'success'
      end

      opt.on '-e', '--error' do
        notifier.apply_preset 'error'
      end

      opt.on '-p', '--preset PRESET', "One of #{NERV::Util::Notification::PRESETS.keys.join '|'}" do |arg|
        notifier.apply_preset arg
      end

      opt.on '-f', '--file PATH', 'Play given audio file instead of speaking message' do |arg|
        notifier.audio = File.expand_path arg
      end

      opt.on '-i', '--icon ICON' do |arg|
        notifier.icon = arg
      end

      opt.on '-n', '--no-audio' do
        notifier.audio = nil
      end

      opt.on '-t', '--title TITLE' do |arg|
        notifier.title = arg
      end

      opt.on '-S', '--sticky' do
        notifier.sticky = true
      end

      opt.on '-? EXITVALUE' do |arg|
        if arg =~ /\A0\z/
          notifier.apply_preset 'success'
          notifier.message = 'OK'
        else
          notifier.apply_preset 'error'
          notifier.message = "$? is #{arg}"
        end
      end
    end
  end

  def run arguments = []
    msg = parser.parse(arguments).join ' '
    notifier.message = msg == '-' ? $stdin.read.chomp : (msg.empty? ? notifier.message || 'Attention' : msg)
    notifier.call
  end
end

$0 = File.basename(__FILE__) and Notify.new.run ARGV if $0 == __FILE__
