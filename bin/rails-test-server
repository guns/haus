#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'pathname'
require 'digest/md5'
require 'shellwords'
require 'set'
require 'listen'

class RailsTestServer
  attr_reader :options, :checksum, :lock

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.root ||= app_root
    @checksum = {}
    @lock = Mutex.new
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = %Q(\
        Simple forking Rails test server.

        Usage: #{File.basename __FILE__} [options] [app-root]

        app-root DEFAULT: #{options.root}

        Options:
      ).gsub /^ {8}/, ''

      opt.on '-n', '--notify COMMAND', 'Optional notification command; should accept message on stdin' do |arg|
        options.notify = arg
      end
    end
  end

  def app_root
    dirname = File.dirname File.expand_path(__FILE__)
    Pathname.new(Dir.pwd).ascend do |path|
      break path.to_s if path.join('config', 'environment.rb').exist?
    end
  end

  def checksum!
    Dir['app/**/*.rb', 'test/**/*_test.rb', 'config/routes.rb'].map do |f|
      checksum[f] = Digest::MD5.digest File.read(f)
    end
  end

  def print_ready
    puts "\e[1;32m❤ Ready for tests!\e[0m"
  end

  def notify msg
    if options.notify
      Process.detach spawn('echo %s | %s' % [msg.shellescape, options.notify])
    end
  end

  def listener
    Λ = Listen.to 'app', 'test', 'config', :filter => /\.rb\z/
    Λ.change do |mod, add, rem|
      begin
        Λ.pause
        run_tests changed!(mod + add)
      ensure
        Λ.unpause
      end
    end
  end

  def stdin_loop
    loop do
      true while $stdin.read_nonblock 4096 rescue SystemCallError # Drain stdin
      $stdin.gets "\n"
      changed! checksum.keys
      run_tests Dir['test/**/*_test.rb']
    end
  end

  def reload! files
    files.each do |file|
      if file =~ %r{\Aapp/} or file == 'config/routes.rb'
        silence_warnings { load File.expand_path(file) }
      end
    end
  end

  def tests_for file
    case file
    when %r{\Aapp/models/(.*/)?([^/]+)}
      unit = 'test/unit/%s%s_test.rb' % [$1, File.basename($2, File.extname(file))]
      File.exists?(unit) ? [unit] : []
    when %r{\Aapp/controllers/(.*/)?([^/]+)}
      functional = 'test/functional/%s%s_test.rb' % [$1, File.basename($2, File.extname(file))]
      File.exists?(functional) ? [functional, *tests_for(:integration)] : tests_for(:integration)
    when %r{\Atest/.*_test\.rb\z}
      [file]
    when 'config/routes.rb'
      tests_for(:functional) + tests_for(:integration)
    when :unit
      Dir['test/unit/**/*_test.rb']
    when :functional
      Dir['test/functional/**/*_test.rb']
    when :integration
      Dir['test/integration/**/*_test.rb']
    else
      []
    end
  end

  def changed! files
    paths, tests = Set.new, Set.new

    files.each do |file|
      path = file.sub Dir.pwd + '/', ''
      hash = Digest::MD5.digest File.read(path)
      if checksum[path] != hash
        checksum[path] = hash
        paths << path
        tests.merge tests_for(path)
      end
    end

    # App and config files that should be reloaded in the parent
    reload! paths
    tests
  end

  def run_tests tests
    if tests.any? and did_lock = lock.try_lock
      start = Time.now

      pid = fork do
        trap(:INT) { exit! 1 }
        ARGV.clear # cf. MiniTest::Unit.autorun
        count = tests.size
        puts "\e[2J\e[H[#{$$}] Loading #{count} file#{'s' if count != 1}"
        silence_warnings do
          tests.each { |f| load File.expand_path(f) }
        end
      end
      Process.wait pid
      pid = nil

      success = $?.exitstatus.zero?
      puts "\e[1;#{success ? 36 : 31}m→ Completed in #{Time.now - start}s"
      notify 'Test failure' unless success
      print_ready
    end
  ensure
    if pid
      Process.kill :INT, pid
      Process.wait pid
    end
    lock.unlock if did_lock
  end

  def run arguments = []
    args = parser.parse arguments

    case args.size
    when 1 then options.root = args.first
    when 0 then nil
    else abort parser.help
    end

    abort 'Application root not found!' unless options.root

    Dir.chdir options.root do
      ENV['RAILS_ENV'] = 'test'
      $:.push 'lib', 'test'

      # We can depend on tests autoloading app classes
      require File.expand_path('config/environment.rb')
      require 'test_helper'

      ActiveSupport::Autoload.eager_autoload!
      checksum!

      pool = []
      pool << Thread.new { listener.start }
      pool << Thread.new { stdin_loop.call }
      print_ready
      pool.each &:join
    end
  end
end

$0 = File.basename(__FILE__) and RailsTestServer.new.run ARGV if $0 == __FILE__
