#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'set'
require 'etc'
require 'shellwords'
require 'fileutils'
require 'optparse'
require 'haus/utils'

class Mountusb
  OWNED_FILESYSTEMS = Set.new %w[adfs affs debugfs devpts fat vfat msdos
                                 umsdos hfs hpfs iso9660 ntfs proc tmpfs
                                 udf usbfs]

  DEFAULTS = {
    :mountoptions => %w[noatime nodev noexec nosuid],
    :dir => '/mnt/usb',
    :uid => ENV['SUDO_UID'] || Process.euid,
    :gid => ENV['SUDO_GID'] || Process.egid,
    :unmount => false
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] [label-pattern]

        Options:
      BANNER

      opt.on '-d', '--dir PATH', "DEFAULT: #{@dir}" do |arg|
        @dir = File.expand_path arg
      end

      opt.on '-o', '--options a,b,c', Array, "DEFAULT: #{@mountoptions.join ','}" do |arg|
        @mountoptions.concat arg
      end

      opt.on '-u', '--uid UID', "Default: #{@uid}" do |arg|
        @uid = arg =~ /\A\d+\z/ ? arg.to_i : Etc.getpwnam(arg).uid
      end

      opt.on '-g', '--gid GID', "Default: #{@gid}" do |arg|
        @gid = arg =~ /\A\d+\z/ ? arg.to_i : Etc.getgrnam(arg).gid
      end

      opt.on '--unmount' do
        @unmount = true
      end
    end
  end

  def blockdevices
    Hash[%x(blkid).lines.map do |l|
      f, kvs = l.split(":", 2)
      [f, Hash[kvs.shellsplit.map { |kv| kv.split "=" }]]
    end]
  end

  def usbdevices
    Hash[Dir["/dev/disk/by-id/usb-*"].map do |l|
      [Haus::Utils.readlink(l), l]
    end]
  end

  def sh *cmd
    warn cmd.shelljoin
    system *cmd
  end

  def mount! label_pattern = nil
    blkdevs = blockdevices
    usbdevs = usbdevices

    (blkdevs.keys & usbdevs.keys).each do |dev|
      label = blkdevs[dev]["LABEL"]
      type = blkdevs[dev]["TYPE"]

      next if label_pattern and label !~ label_pattern

      mtpt = File.join @dir, label || File.basename(usbdevs[dev])
      if Dir.exists? mtpt and not File.writable? mtpt
        raise "#{mtpt} exists, but is not writable"
      end
      FileUtils.mkdir_p mtpt

      opts = @mountoptions.dup

      if OWNED_FILESYSTEMS.include? type
        opts << "uid=#{@uid}" if @uid
        opts << "gid=#{@gid}" if @gid
      end

      sh 'mount', '-v', '-t', type, '-o', opts.join(','), dev, mtpt
    end
  end

  def unmount! label_pattern
    Dir[File.join @dir, '*'].each do |mtpt|
      next if label_pattern and File.basename(mtpt) !~ label_pattern
      sh 'umount', '-v', mtpt
      FileUtils.rmdir mtpt
    end
    FileUtils.rmdir @dir
  end

  def run arguments = []
    args = parser.parse arguments
    case args.size
    when 1 then label_pattern = Haus::Utils.regexp_parse args.first
    when 0 then label_pattern = nil
    else abort parser.help
    end

    if @unmount
      unmount! label_pattern
    else
      mount! label_pattern
    end
  end
end

$0 = File.basename(__FILE__) and Mountusb.new.run ARGV if $0 == __FILE__
