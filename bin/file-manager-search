#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2014-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'pathname'
require 'fileutils'
require 'haus/utils'

class FileManagerSearch
  DEFAULTS = {
    :linkdir => File.expand_path('~/.local/share/file-manager-search'),
    :flatten => ':',
    :xdialog => false,
    :recursive => true
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] path [query]

        Options:
      BANNER

      opt.on '-d', '--linkdir PATH', 'DEFAULT: %s' % DEFAULTS[:linkdir] do |arg|
        @linkdir = File.expand_path arg
      end

      opt.on '-f', '--flatten STRING', 'DEFAULT: %s' % DEFAULTS[:flatten] do |arg|
        @flatten = arg
      end

      opt.on '-n', '--no-recursive' do
        @recursive = false
      end

      opt.on '-X', '--xdialog', 'Use Xdialog to obtain missing queries' do
        @xdialog = true
      end
    end
  end

  def get_query
    prompt = "#{@recursive ? 'Recursive' : 'Flat'} search query: "
    if @xdialog
      %x(Xdialog --stdout --inputbox "#{prompt}" 10 80)
    else
      print prompt
      $stdin.gets
    end.chomp
  end

  # Copied from find-wrapper
  def make_find_glob pattern
    case pattern
    when /\A\^.*\$\z/ then pattern.sub(/\^/, '').chomp('$')
    when /\A\^/       then '%s*' % pattern.sub(/\^/, '')
    when /\$\z/       then '*%s' % pattern.chomp('$')
    else                   '*%s*' % pattern
    end
  end

  # Returns search directory
  def make_links! path, query
    return false if query.nil? or query.empty?

    globpat = if @recursive
      File.join path, '**', make_find_glob(query)
    else
      File.join path, make_find_glob(query)
    end

    sources = Dir.glob globpat, File::FNM_CASEFOLD
    return false if sources.empty?

    dstdir = File.join @linkdir, query.tr('/', '-')
    FileUtils.rm_r dstdir if File.directory? dstdir
    FileUtils.mkdir_p dstdir

    sources.each do |src|
      dst = File.join dstdir, File.expand_path(src).split('/').join(@flatten)
      FileUtils.ln_s File.expand_path(src), dst, :verbose => true
    end

    dstdir
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless (1..2).include? args.size
    path, query = args
    if dir = make_links!(path, query || get_query)
      puts dir
    else
      abort
    end
  end
end

$0 = File.basename(__FILE__) and FileManagerSearch.new.run ARGV if $0 == __FILE__
