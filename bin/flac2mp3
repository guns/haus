#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'fileutils'
require 'shellwords'

class Flac2mp3
  attr_reader :options

  def initialize opts = {}
    @options       = OpenStruct.new opts
    options.jobs ||= 1
  end

  def parser
    @parser ||= OptionParser.new do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] [file|dir ...]

        Options:
      BANNER

      opt.on '-r', '--recurse' do
        options.recurse = true
      end

      opt.on '-o', '--outdir DIR' do |arg|
        options.outdir = arg
      end

      opt.on '-j', '--jobs N', Integer do |arg|
        options.jobs = arg
      end
    end
  end

  def search paths
    paths.map do |path|
      if File.directory? path
        pat = options.recurse ? '**/*.flac' : '*.flac'
        Dir[File.join path, pat]
      else
        path if File.extname(path) == '.flac'
      end
    end.compact.flatten
  end

  def id3tags path
    opts = [%w[--tt TITLE], %w[--ta ARTIST], %w[--tl ALBUM], %w[--tn TRACKNUMBER], %w[--tg GENRE]]
    meta = Hash[%x(metaflac --export-tags-to=- #{path.shellescape}).lines.map { |l| l.chomp.split '=' }]

    opts.map { |flag, key| [flag, meta[key]] if meta.has_key? key }.compact.flatten
  end

  def mp3encode src, dst
    system %Q(
      flac -sdc #{src.shellescape} |
      lame --preset standard #{id3tags(src).shelljoin} - #{dst.shellescape}.mp3 2>/dev/null
    )
  end

  def convert files
    count = files.count
    label = "[%#{count.to_s.length}d/#{count}] Writing %s"

    idx, pool, lock = -1, [], Mutex.new

    options.jobs.times do
      pool << Thread.new do

        loop do
          flac = lock.synchronize { files[idx+=1] }
          break if flac.nil?

          base = options.outdir || File.dirname(flac)
          dst  = File.join base, File.basename(flac, '.flac')
          FileUtils.mkdir_p base

          puts label % [idx + 1, (dst + '.mp3').inspect]
          raise 'Encoding error!' unless mp3encode flac, dst
        end

      end
    end

    pool.each &:join
  end

  def run arguments = []
    args = parser.parse arguments
    convert search(args.empty? ? %w[.] : args)
  end
end

$0 = File.basename(__FILE__) and Flac2mp3.new.run ARGV if $0 == __FILE__
