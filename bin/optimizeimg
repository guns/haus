#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2016-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'shellwords'
require 'fileutils'

class OptimizeIMG
  DEFAULTS = {
    :jobs => (File.read('/proc/cpuinfo').scan(/^processor/i).size rescue 1),
    :quality => 80,
    :tmpname => '%s__optimize__'
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] image â€¦

        Options:
      BANNER

      opt.on '-j', '--jobs N', Integer, "DEFAULT: #{@jobs}" do |arg|
        @jobs = arg
      end

      opt.on '-q', '--quality PCT', Integer, "DEFAULT: #{@quality}" do |arg|
        @quality = arg
      end

      opt.on '-t', '--tmpname BASENAME', "DEFAULT: #{@tmpname}" do |arg|
        @tmpname = arg
      end
    end
  end

  def optimize path, tmpname, quality
    ext = File.extname path
    tmp = tmpname % File.basename(path, ext)
    tmp << ext
    raise "#{path} already exists!" if File.exists? tmp
    if system 'convert', '-quality', quality.to_s, path, tmp
      FileUtils.mv tmp, path
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.empty?

    ilock, wlock = Mutex.new, Mutex.new
    pool, err = [], false
    i, n = 0, args.size

    @jobs.times do
      pool << Thread.new do
        loop do
          ilock.synchronize { i += 1 }
          break if i >= n
          path = args[i]
          wlock.synchronize { warn ":: optimize #{path}" }
          if not optimize path, @tmpname, @quality
            wlock.synchronize do
              warn "\e[31mOptimizing #{path} failed!\e[0m"
              err = true
            end
          end
        end
      end
    end

    pool.each &:join
    err ? abort : exit
  end
end

$0 = File.basename(__FILE__) and OptimizeIMG.new.run ARGV if $0 == __FILE__
