#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'shellwords'
require 'fileutils'
require 'tempfile'

class Chrome
  class DarwinUpdate
    include FileUtils::Verbose

    attr_accessor :chrome, :url

    def initialize chrome, url
      @chrome, @url = chrome, url
    end

    def hmount dmg
      puts "hdiutil mount #{dmg}"
      %x(hdiutil mount #{dmg.shellescape}).chomp[%r{(/Volumes/.*)}, 1]
    end

    def version dir
      File.basename Dir["#{dir}/Contents/Versions/*"].find { |d| Dir.exists? d }
    end

    def showdiff old, new
      [old, new].each { |d| puts "#{version d}: #{d}" }
      base = %x(#{['diff', '-rq', old, new].shelljoin}).lines.reject { |l| l =~ %r{\AOnly.*Contents/Versions:} }
      vers = %x(#{['diff', '-rq', *[old, new].map { |d| "#{d}/Contents/Versions/#{version d}" }].shelljoin}).lines.to_a
      puts (base + vers).select { |l| l =~ /\AOnly/ }.join
    end

    def confirm? msg
      return true  if chrome.options.force
      return false unless system '/bin/sh -c "command -v stty" &>/dev/null && stty -a &>/dev/null'

      system 'notify', 'Attention!'
      print msg + ' [Y/n] '

      begin
        state = %x(stty -g).chomp
        system 'stty', 'raw'
        char = $stdin.getc rescue nil
        char =~ /y|\r|\n/
      ensure
        system 'stty', state
        puts char
      end
    end

    def install src, dst
      return unless confirm? 'Would you like to install this update?'

      chrome.terminate

      if File.exists? dst
        # Swap files
        tmp = Tempfile.new('GoogleChrome').path
        rm_f tmp
        mv dst, tmp
        mv src, dst
        mv tmp, src
      else
        mv src, dst
      end

      # Relink Flash plugin
      flash = Dir[File.join dst, '**/Flash Player Plugin for Chrome.plugin'].first
      local = File.expand_path '~/Library/Internet Plug-Ins/Flash Player.plugin'
      rm_rf local
      ln_sf flash, local
    end

    def update!
      dmg = '/tmp/GoogleChrome.dmg'
      chrome.sh 'curl', '-#Lo', dmg, url unless File.exists? dmg
      new = File.join hmount(dmg), 'Google Chrome.app'
      old = '/Applications/Google Chrome.app'
      tmp = '/tmp/Google Chrome.app'

      Dir.chdir '/tmp' do
        rm_rf    tmp
        cp_r     new, tmp, :preserve => true
        rm_rf    Dir["#{tmp}/**/KeystoneRegistration.framework"]
        showdiff old, tmp if Dir.exists? old
        install  *[tmp, old].map { |d| File.join d, 'Contents' } # /Applications is root-owned
        system   'hdiutil', 'detach', File.dirname(new)
        rm_f     dmg
      end
    end
  end

  attr_reader :options

  def initialize opts = {}
    @options         = OpenStruct.new opts
    options.signal ||= '-TERM'
    options.argv   ||= [
      '--enable-extension-timeline-api', # For Speed Tracer
      '--disable-crash-reporter'         # Don't send crash reports
    ]
  end

  def parser
    @parser ||= OptionParser.new nil, 16 do |opt|
      opt.banner = %Q(\
        Google Chrome / Chromium launcher and updater.

        Usage: #{File.basename __FILE__} [options] -- [url-or-argument ...]

        Options:
      ).gsub /^ +/, ''

      opt.on '-n', '--no-sandbox', 'Disable the renderer sandbox' do
        options.argv << '--no-sandbox'
      end

      opt.on '-i', '--incognito', 'Launch in incognito mode' do
        options.argv << '--incognito'
      end

      opt.on '-r', '--relaunch', 'Relaunch application' do
        options.relaunch = :relaunch
      end

      opt.on '-u', '--update', 'Update chrome to latest dev release (OS X only)' do
        options.update = :update
      end

      opt.on '-d', '--detach', 'Fork and detach application process' do
        options.detach = true
      end

      opt.on '-f', '--force', 'Force the issue' do
        options.force = true
      end

      opt.on '-9', '--kill', 'When terminating, send SIGKILL' do
        options.signal = '-KILL'
      end
    end
  end

  def sh *args
    puts args.join(' ')
    system *args
  end

  def program
    @program ||= case RUBY_PLATFORM
    when /darwin/ then '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
    else               %x(/bin/sh -c 'command -v chromium').chomp
    end
  end

  def running?
    %x(ps axo ucomm).lines.map(&:strip).include? File.basename(program)
  end

  def terminate
    return unless running?
    sh 'killall', options.signal, File.basename(program)
    sleep 0.5 while running?
  end

  def relaunch args = []
    terminate
    launch args
  end

  def launch args = []
    if RUBY_PLATFORM =~ /darwin/i and running?
      sh 'open', '-a', program, *args
    else
      cmd  = []
      cmd += %W[sudo -u #{ENV['SUDO_USER']}] if ENV['SUDO_USER']
      cmd << program
      cmd += options.argv
      cmd += args

      puts cmd.map(&:shellescape).join(" \\\n    ")

      if options.detach
        Process.detach fork {
          [$stdin, $stdout, $stderr].each { |fd| fd.reopen '/dev/null' }
          Process.setsid
          Dir.chdir '/'
          exec *cmd
        }
      else
        exec *cmd
      end
    end
  end

  def update
    raise '--update for OS X only!' unless RUBY_PLATFORM =~ /darwin/i
    raise 'Do not update as root user!' if Process.euid.zero?
    DarwinUpdate.new(self, 'http://dl.google.com/chrome/mac/dev/GoogleChrome.dmg').update!
  end

  def run arguments = []
    args = parser.parse arguments

    if options.update
      update
      relaunch args if options.relaunch
    elsif options.relaunch
      relaunch args
    else
      launch args
    end
  end
end

$0 = File.basename(__FILE__) and Chrome.new.run ARGV if $0 == __FILE__
