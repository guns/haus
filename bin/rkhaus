#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'fileutils'

class Rkhaus
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.rakedir ||= File.expand_path '../../share/rake', __FILE__
    options.verbose ||= true
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = %Q(\
        Usage: #{File.basename __FILE__} [options] name

        Options:
      ).gsub /^ +/, ''

      opt.on '-l', '--list' do
        options.list = true
      end

      opt.on '-f', '--force' do
        options.force = true
      end

      opt.on '-q', '--quiet' do
        options.verbose = false
      end
    end
  end

  def link name, base = nil
    dst  = File.join base || Dir.pwd, 'Rakefile'
    stat = File.lstat dst rescue nil

    raise "#{dst.inspect} already exists!" if stat and not options.force

    FileUtils.rm   dst, :verbose => options.verbose if stat
    FileUtils.ln_s File.join(options.rakedir, name), dst, :verbose => options.verbose
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.size <= 2

    # For convenience, grep the intended file
    fs = Dir.entries(options.rakedir).reject { |f| f == '.' || f == '..' }
    if options.list
      puts fs
    else
      rk = fs.find { |f| f == args.first }
      rk = fs.find { |f| f =~ Regexp.new(args.first) } if rk.nil?
      rk ? link(rk, args[1]) : abort('File not found.')
    end
  end
end

$0 = File.basename(__FILE__) and Rkhaus.new.run ARGV if $0 == __FILE__
