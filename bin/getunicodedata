#!/usr/bin/env python
#
# Copyright (c) 2011-2023 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

"""
Parse and print the Unicode database.
"""

import sys
from argparse import ArgumentParser
from typing import NamedTuple

import haus

UNICODE_DATA_URL = "https://www.unicode.org/Public/UNIDATA/UnicodeData.txt"


def parse_args(args):
    parser = ArgumentParser(description=__doc__)
    parser.add_argument(
        "-r", "--raw", action="store_true", help="Print raw source data"
    )
    parser.add_argument(
        "source",
        nargs="?",
        help="Path to source data; pass - for stdin."
        + f" Defaults to reading from {UNICODE_DATA_URL}",
    )
    return parser.parse_args(args)


class UnicodeEntry(NamedTuple):
    Code_Point: str
    Name: str
    General_Category: str
    Canonical_Combining_Class: str
    Bidi_Class: str
    Decomposition: str
    Numeric_Type_Decimal_Digit: str
    Numeric_Type_Digit: str
    Numeric_Type_Numeric: str
    Bidi_Mirrored: str
    Unicode_1_Name: str
    ISO_Comment: str
    Simple_Uppercase_Mapping: str
    Simple_Lowercase_Mapping: str
    Simple_Titlecase_Mapping: str


def glyph(code_point, category):
    # cf. http://en.wikipedia.org/wiki/C0_and_C1_control_codes
    if category == "Cc":
        if code_point in range(0x00, 0x20):
            return "^" + chr(code_point + 0x40)
        elif code_point == 0x7F:
            return "^?"
        elif code_point in range(0x80, 0xA0):
            return "^[" + chr(code_point - 0x40)
    if category == "Cs":
        return ""
    return chr(code_point)


def print_unicode_data(data):
    rows = []
    max_namelen = 0

    for line in data.splitlines():
        entry = UnicodeEntry(*line.split(";"))
        if len(entry.Name) > max_namelen:
            max_namelen = len(entry.Name)
        code_point = int(entry.Code_Point, 16)
        char = glyph(code_point, entry.General_Category)
        altname = " " + entry.Unicode_1_Name if entry.Unicode_1_Name else ""
        rows.append((char, code_point, entry.General_Category, entry.Name, altname))

    fmt = f"%-3s │ U+%04X │ %s │ %-{max_namelen}s │%s"

    for row in rows:
        print(fmt % row)


def execute(args):
    opts = parse_args(args)

    match opts.source:
        case None:
            data = haus.urlopen(UNICODE_DATA_URL).read().decode()
        case "-":
            data = sys.stdin.read()
        case _ as path:
            with open(path, "r") as f:
                data = f.read()

    if opts.raw:
        print(data)
    else:
        print_unicode_data(data)


if __name__ == "__main__":
    sys.exit(execute(sys.argv[1:]))
