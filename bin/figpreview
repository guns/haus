#!/usr/bin/env python
#
# Copyright (c) 2011-2023 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

"""
Preview text with all available figlet fonts.
"""

import hashlib
import os
import random
import re
import subprocess
import sys
from argparse import ArgumentParser
from glob import glob

KERNING = {-1: "-o", 0: "-S", 1: "-s", 2: "-k", 3: "-W"}


def parse_args(args):
    parser = ArgumentParser(description=__doc__)
    parser.set_defaults(kerning=0, width=1000, ext=".[ft]lf")
    parser.add_argument(
        "-k",
        "--kerning",
        help=f"Set letter spacing. Default: {parser.get_default('kerning')}",
        type=int,
        choices=KERNING.keys(),
    )
    parser.add_argument(
        "-w",
        "--width",
        help=f"Wrapping width. Default: {parser.get_default('width')}",
        type=int,
    )
    parser.add_argument("-p", "--pattern", type=re.compile)
    parser.add_argument("-l", "--list", action="store_true")
    parser.add_argument("-r", "--random", action="store_true")
    parser.add_argument(
        "-F", "--figlet-only", dest="ext", const=".flf", action="store_const"
    )
    parser.add_argument(
        "-T", "--toilet-only", dest="ext", const=".tlf", action="store_const"
    )
    parser.add_argument("strings", metavar="string", nargs="*")
    return parser.parse_args(args)


def hashfont(path):
    h = hashlib.sha1()
    with open(path, "rb") as f:
        match os.path.splitext(path):
            case _, ".flf":
                f.readline()
            case _, ".tlf":
                pass
            case _:
                raise ValueError(f"Unknown font extension {path}")
        h.update(f.read())
    return h.digest()


def find_figlet_fonts(ext, pattern=None):
    basedirs = ["/usr/share", "/usr/local/share", os.path.expanduser("~/.local/share")]
    fonts = {}

    for base in basedirs:
        for font in glob(f"{base}/figlet/**/*{ext}"):
            if pattern:
                if not pattern.search(font):
                    continue
            fonts[hashfont(font)] = font

    paths = list(fonts.values())
    paths.sort()
    return paths


def format(font, msg, kerning, width):
    basename = os.path.basename(font)
    fontname, ext = os.path.splitext(basename)

    if not msg:
        msg = fontname

    match ext:
        case ".flf":
            cmd = [
                "figlet",
                KERNING[kerning],
                "-l",
                "-w",
                str(width),
                "-f",
                font,
                "--",
                msg,
            ]
        case ".tlf":
            cmd = [
                "toilet",
                KERNING[kerning],
                "-w",
                str(width),
                "-d",
                os.path.dirname(font),
                "-f",
                basename,
                "--",
                msg,
            ]
        case _:
            raise ValueError(f"Unknown font type: {basename}")

    try:
        buf = subprocess.run(cmd, capture_output=True, text=True).stdout
    except UnicodeDecodeError as err:
        print(f"UnicodeDecodeError: {err}", file=sys.stderr)
        return ""

    return f"\n{basename}\n\n{buf}\n"


def execute(args):
    opts = parse_args(args)
    fonts = find_figlet_fonts(opts.ext, opts.pattern)
    msg = " ".join(opts.strings)

    if opts.random:
        fonts = random.sample(fonts, 1)

    if opts.list:
        for font in fonts:
            print(font)
        return

    for font in fonts:
        print(format(font, msg, opts.kerning, opts.width))


if __name__ == "__main__":
    sys.exit(execute(sys.argv[1:]))
