#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'digest/md5'
require 'shellwords'

class Figpreview
  DEFAULTS = {
    :width => 1000,
    :kerning => 0,
    :message => nil
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Preview all figlet fonts on the system.

        Usage: #{File.basename __FILE__} [options] [message]

        Options:
      BANNER

      opt.on '-k', '--kerning NUMBER', Integer, 'Set letter spacing; value from 0..3; 0 by default' do |arg|
        @kerning = arg
      end

      opt.on '-w', '--width NUMBER', Integer, "Wrapping width; #{@width} by default" do |arg|
        @width = arg
      end

      opt.on '-l', '--list', 'List all unique figlet fonts' do
        puts fonts
        exit
      end

      opt.on '-r', '--random', 'Pick a single random font' do
        @random = true
      end
    end
  end

  def kerning
    case @kerning
    when -1 then '-o'
    when 0  then '-S'
    when 1  then '-s'
    when 2  then '-k'
    when 3  then '-W'
    else raise ArgumentError, 'kerning must be within -1..3'
    end
  end

  def fontdirs
    %w[/usr/share /usr/local/share ~/.local/share].map { |d| File.expand_path d }
  end

  def fonts
    @fonts ||= begin
      table = {}

      fontdirs.each do |base|
        Dir["#{base}/figlet/{,fonts/}*.[ft]lf"].each do |font|
          case File.extname(font)
          when '.flf'
            table.store Digest::MD5.hexdigest(File.read(font).lines.drop(1).join), font
          when '.tlf'
            table.store Digest::MD5.hexdigest(File.read(font)), font
          end
        end
      end

      table.values.sort_by { |f| File.basename f }
    end
  end

  def generate font
    msg = @message || File.basename(font, File.extname(font))
    case File.extname(font)
    when '.flf'
      cmd = ['figlet', kerning, '-l', '-w', @width.to_s, '-f', font, msg]
    when '.tlf'
      cmd = ['toilet', kerning, '-w', @width.to_s, '-d', File.dirname(font), '-f', File.basename(font), msg]
    end
    "\n%s\n\n" % %x(#{cmd.shelljoin})
  end

  def to_s
    fonts.map { |font| "#{File.basename font}:\n#{generate font}" }.join "\n"
  end

  def inspect
    "figlet #{kerning} -l -w #{@width}"
  end

  def run arguments = []
    args = parser.parse arguments
    @message = args.join ' ' unless args.empty?
    puts @random ? generate(fonts.shuffle.last) : to_s
  end
end

$0 = File.basename(__FILE__) and Figpreview.new.run ARGV if $0 == __FILE__
