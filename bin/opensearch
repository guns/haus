#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012-2017 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'uri'
require 'cgi'
require 'nokogiri'

class Opensearch
  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
        Create, use, and serve opensearch xml files.

        Usage: #{File.basename __FILE__} generate name search-url [GET|POST]
               #{File.basename __FILE__} search file query ...
               #{File.basename __FILE__} serve file

        The string '***' will be replaced with '{searchTerms}' in search-url.
      BANNER
    end
  end

  def try
    yield
  rescue URI::InvalidComponentError, NoMethodError
  end

  # URI API changed around ruby 2.2.0
  def set_value uri, key, val
    try { uri.send "#{key}=", val } or
    try { uri.send "set_#{key}", val } or
    try { uri.instance_variable_set "@#{key}", val } or
    raise "Unable to set #{key}=#{val} for #{uri}"
  end

  def format url
    # URI#check_query erroneously raises on curly braces
    uri = URI.parse url
    %w[path query fragment].each do |k|
      if v = uri.send(k)
        set_value uri, k, v.gsub('***', '{searchTerms}')
      end
    end
    uri.to_s
  end

  def document name, url, method = 'GET'
    Nokogiri::XML::Builder.new do |x|
      x.OpenSearchDescription 'xmlns' => 'http://a9.com/-/spec/opensearch/1.1/',
                              'xmlns:moz' => 'http://www.mozilla.org/2006/browser/search/' do
        x.ShortName name
        x.InputEncoding 'UTF-8'
        x.Url :type => 'text/html', :method => method, :template => format(url)
      end
    end.to_xml
  end

  def search file, *query
    xml = Nokogiri::XML File.read(file)
    url = xml.css('Url').attr('template').text.gsub '{searchTerms}', CGI.escape(query.join ' ')
    system 'open', url
  end

  def serve file
    require 'webrick'

    server = WEBrick::HTTPServer.new :Port => 8080,
                                     :DocumentRoot => File.dirname(File.expand_path(file))

    server.mount_proc '/' do |req, res|
      res.body = <<-HTML
<html>
<head>
  <link rel="search"
        type="application/opensearchdescription+xml"
        title="#{File.basename file, File.extname(file)}"
        href="#{File.basename file}">
</head>
</html>
      HTML
    end

    server.start
  rescue Interrupt
    server.shutdown
  end

  def run arguments = []
    args = parser.parse arguments
    rest = args.drop 1

    case args.first
    when 'generate' then puts document(*rest)
    when 'search' then puts search(*rest)
    when 'serve' then serve *rest
    else abort parser.help
    end
  end
end

$0 = File.basename(__FILE__) and Opensearch.new.run ARGV if $0 == __FILE__
