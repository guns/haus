#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Flags:
#   --help               Show context-sensitive help (also try --help-long and
#                        --help-man).
#   --fast               Only run fast linters.
#   -i, --install        Attempt to install all known linters.
#   -u, --update         Pass -u to go tool when installing.
#   -f, --force          Pass -f to go tool when installing.
#   -d, --debug          Display messages for failed linters, etc.
#   -j, --concurrency=16
#                        Number of concurrent linters to run.
#   -e, --exclude=REGEXP
#                        Exclude messages matching these regular expressions.
#   --cyclo-over=10      Report functions with cyclomatic complexity over N (using
#                        gocyclo).
#   --min-confidence=.80
#                        Minimum confidence interval to pass to golint
#   --dupl-threshold=50  Minimum token sequence as a clone for dupl.
#   --sort=none          Sort output by any of none, path, line, column, severity,
#                        message, linter.
#   -t, --tests          Include test files for linters that support this option
#   --deadline=5s        Cancel linters if they have not completed within this
#                        duration.
#   --errors             Only show errors.
#   --json               Generate structured JSON rather than standard line-based
#                        output.
#   -D, --disable=LINTER
#                        List of linters to disable (testify,test).
#   -E, --enable=LINTER  Enable previously disabled linters.
#   --linter=NAME:COMMAND:PATTERN
#                        Specify a linter.
#   --message-overrides=LINTER:MESSAGE
#                        Override message from linter. {message} will be expanded
#                        to the original message.
#   --severity=LINTER:SEVERITY
#                        Map of linter severities.
#   --disable-all        Disable all linters.
#
# Args:
#   [<path>]  Directory to lint. Defaults to ".". <path>/... will recurse.

linters = {
  'golint':      'golint -min_confidence {min_confidence} .:PATH:LINE:COL:MESSAGE',
  'vet':         'go tool vet -test -shadowstrict ./*.go:PATH:LINE:MESSAGE',
  # 'vetshadow':   'go tool vet --shadow ./*.go:PATH:LINE:MESSAGE',
  'gofmt':       'gofmt -l -s ./*.go:^(?P<path>[^\n]+)$',
  'gotype':      'gotype -e {tests=-a} .:PATH:LINE:COL:MESSAGE',
  'goimports':   'goimports -l ./*.go:^(?P<path>[^\n]+)$',
  'errcheck':    'errcheck .:^(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+)\t(?P<message>.*)$',
  'varcheck':    'varcheck .:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>\w+)$',
  'structcheck': 'structcheck {tests=-t} .:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>.+)$',
  'defercheck':  'defercheck .:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>.+)$',
  'aligncheck':  'aligncheck .:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>.+)$',
  'deadcode':    'deadcode .:^deadcode: (?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>.*)$',
  'gocyclo':     'gocyclo -over {mincyclo} .:^(?P<cyclo>\d+)\s+\S+\s(?P<function>\S+)\s+(?P<path>[^:]+):(?P<line>\d+):(\d+)$',
  'ineffassign': 'ineffassign -n .:PATH:LINE:COL:MESSAGE',
  # 'testify':     'go test:Location:\s+(?P<path>[^:]+):(?P<line>\d+)$\s+Error:\s+(?P<message>[^\n]+)',
  # 'test':        'go test:^--- FAIL: .*$\s+(?P<path>[^:]+):(?P<line>\d+): (?P<message>.*)$',
  'dupl':        'dupl -plumbing -threshold {duplthreshold} ./*.go:^(?P<path>[^\s][^:]+?\.go):(?P<line>\d+)-\d+:\s*(?P<message>.*)$',
}.reduce([]) { |v, entry|
  v << '--linter=%s:%s' % entry
  v << '--enable=%s' % entry[0]
}

exec 'gometalinter', '-j4', '--disable-all', '--min-confidence=0.21', '--dupl-threshold=50', '--cyclo-over=10', '--sort=path', '--tests', *(ENV['DEBUG'] ? ['--debug'] : []), *linters, './...'
