#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# usage: gometalinter [<flags>] [<path>...]
#
# Aggregate and normalise the output of a whole bunch of Go linters.
#
# Default linters:
#
# gotype  (golang.org/x/tools/cmd/gotype)
#       gotype -e {tests=-a} .
#       :PATH:LINE:COL:MESSAGE
# goimports  (golang.org/x/tools/cmd/goimports)
#       goimports -l ./*.go
#       :^(?P<path>[^\n]+)$
# ineffassign  (github.com/gordonklaus/ineffassign)
#       ineffassign -n .
#       :PATH:LINE:COL:MESSAGE
# testify
#       go test
#       :Location:\s+(?P<path>[^:]+):(?P<line>\d+)$\s+Error:\s+(?P<message>[^\n]+)
# gocyclo  (github.com/alecthomas/gocyclo)
#       gocyclo -over {mincyclo} .
#       :^(?P<cyclo>\d+)\s+\S+\s(?P<function>\S+)\s+(?P<path>[^:]+):(?P<line>\d+):(\d+)$
# dupl  (github.com/mibk/dupl)
#       dupl -plumbing -threshold {duplthreshold} ./*.go
#       :^(?P<path>[^\s][^:]+?\.go):(?P<line>\d+)-\d+:\s*(?P<message>.*)$
# golint  (github.com/golang/lint/golint)
#       golint -min_confidence {min_confidence} .
#       :PATH:LINE:COL:MESSAGE
# errcheck  (github.com/kisielk/errcheck)
#       errcheck -abspath .
#       :^(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+)\t(?P<message>.*)$
# defercheck  (github.com/opennota/check/cmd/defercheck)
#       defercheck .
#       :^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>.+)$
# aligncheck  (github.com/opennota/check/cmd/aligncheck)
#       aligncheck .
#       :^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>.+)$
# deadcode  (github.com/remyoudompheng/go-misc/deadcode)
#       deadcode .
#       :^deadcode: (?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>.*)$
# vet
#       go tool vet ./*.go
#       :PATH:LINE:MESSAGE
# vetshadow
#       go tool vet --shadow ./*.go
#       :PATH:LINE:MESSAGE
# test
#       go test
#       :^--- FAIL: .*$\s+(?P<path>[^:]+):(?P<line>\d+): (?P<message>.*)$
# gofmt
#       gofmt -l -s ./*.go
#       :^(?P<path>[^\n]+)$
# varcheck  (github.com/opennota/check/cmd/varcheck)
#       varcheck .
#       :^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>\w+)$
# structcheck  (github.com/opennota/check/cmd/structcheck)
#       structcheck {tests=-t} .
#       :^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\d+):(?P<col>\d+):\s*(?P<message>.+)$
#
# Severity override map (default is "error"):
#
# varcheck -> warning
# aligncheck -> warning
# deadcode -> warning
# ineffassign -> warning
# dupl -> warning
# errcheck -> warning
# golint -> warning
# structcheck -> warning
# gocyclo -> warning
#
# Flags:
#       --help                Show context-sensitive help (also try --help-long
#                             and --help-man).
#       --fast                Only run fast linters.
#   -i, --install             Attempt to install all known linters.
#   -u, --update              Pass -u to go tool when installing.
#   -f, --force               Pass -f to go tool when installing.
#   -d, --debug               Display messages for failed linters, etc.
#   -j, --concurrency=16      Number of concurrent linters to run.
#   -e, --exclude=REGEXP      Exclude messages matching these regular expressions.
#       --cyclo-over=10       Report functions with cyclomatic complexity over N
#                             (using gocyclo).
#       --min-confidence=.80  Minimum confidence interval to pass to golint
#       --dupl-threshold=50   Minimum token sequence as a clone for dupl.
#       --sort=none           Sort output by any of none, path, line, column,
#                             severity, message, linter.
#   -t, --tests               Include test files for linters that support this
#                             option
#       --deadline=5s         Cancel linters if they have not completed within
#                             this duration.
#       --errors              Only show errors.
#       --json                Generate structured JSON rather than standard
#                             line-based output.
#   -D, --disable=LINTER      List of linters to disable (testify,test).
#   -E, --enable=LINTER       Enable previously disabled linters.
#       --linter=NAME:COMMAND:PATTERN
#                             Specify a linter.
#       --message-overrides=LINTER:MESSAGE
#                             Override message from linter. {message} will be
#                             expanded to the original message.
#       --severity=LINTER:SEVERITY
#                             Map of linter severities.
#       --disable-all         Disable all linters.
#
# Args:
#   [<path>]  Directory to lint. Defaults to ".". <path>/... will recurse.

# gometalinter --help 2>&1 | ruby -r pp -e 'PP.pp Hash[$stdin.read[/Default linters:\n\n(.*?)\n\n/m, 1].lines.each_slice(3).reduce({}) { |m, s| m[s[0].split[0]] = s[1].strip + s[2].strip; m }.sort], $stdout, 1000'

linters = \
{"aligncheck"  => "aligncheck .:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$",
 "deadcode"    => "deadcode .:^deadcode: (?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "defercheck"  => "defercheck .:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$",
 "dupl"        => "dupl -plumbing -threshold {duplthreshold} ./*.go:^(?P<path>[^\\s][^:]+?\\.go):(?P<line>\\d+)-\\d+:\\s*(?P<message>.*)$",
 "errcheck"    => "errcheck -abspath .:^(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+)\\t(?P<message>.*)$",
 "gocyclo"     => "gocyclo -over {mincyclo} .:^(?P<cyclo>\\d+)\\s+\\S+\\s(?P<function>\\S+)\\s+(?P<path>[^:]+):(?P<line>\\d+):(\\d+)$",
 "gofmt"       => "gofmt -l -s ./*.go:^(?P<path>[^\\n]+)$",
 "goimports"   => "goimports -l ./*.go:^(?P<path>[^\\n]+)$",
 "golint"      => "golint -min_confidence {min_confidence} .:PATH:LINE:COL:MESSAGE",
 "gotype"      => "gotype -e {tests=-a} .:PATH:LINE:COL:MESSAGE",
 "ineffassign" => "ineffassign -n .:PATH:LINE:COL:MESSAGE",
 "structcheck" => "structcheck {tests=-t} .:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$",
 # "test"        => "go test:^--- FAIL: .*$\\s+(?P<path>[^:]+):(?P<line>\\d+): (?P<message>.*)$",
 # "testify"     => "go test:Location:\\s+(?P<path>[^:]+):(?P<line>\\d+)$\\s+Error:\\s+(?P<message>[^\\n]+)",
 "varcheck"    => "varcheck .:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>\\w+)$",
 "vet"         => "go tool vet -test -shadowstrict ./*.go:PATH:LINE:MESSAGE",
 # "vetshadow"   => "go tool vet --shadow ./*.go:PATH:LINE:MESSAGE"
}.reduce([]) { |v, entry|
  v << '--linter=%s:%s' % entry
  v << '--enable=%s' % entry[0]
}

exec 'gometalinter', '--concurrency=4', '--disable-all', '--min-confidence=0.21',
     '--dupl-threshold=50', '--cyclo-over=15', '--sort=path', '--tests',
     *(ENV['DEBUG'] ? ['--debug'] : []), *linters, './...'
