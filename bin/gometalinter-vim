#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# usage: gometalinter [<flags>] [<path>...]
#
# Aggregate and normalise the output of a whole bunch of Go linters.
#
# Default linters:
#
# â€¦
#
# Severity override map (default is "warning"):
#
#   gotype -> error
#   test -> error
#   testify -> error
#   vet -> error
#
# Flags:
#       --help                Show context-sensitive help (also try --help-long
#                             and --help-man).
#       --vendored-linters    Use vendored linters (recommended).
#       --fast                Only run fast linters.
#   -i, --install             Attempt to install all known linters.
#   -u, --update              Pass -u to go tool when installing.
#   -f, --force               Pass -f to go tool when installing.
#   -d, --debug               Display messages for failed linters, etc.
#   -j, --concurrency=16      Number of concurrent linters to run.
#   -e, --exclude=REGEXP ...  Exclude messages matching these regular expressions.
#   -I, --include=REGEXP ...  Include messages matching these regular expressions.
#   -s, --skip=DIR... ...     Skip directories with this name when expanding
#                             '...'.
#       --vendor              Enable vendoring support (skips 'vendor' directories
#                             and sets GO15VENDOREXPERIMENT=1).
#       --cyclo-over=10       Report functions with cyclomatic complexity over N
#                             (using gocyclo).
#       --line-length=80      Report lines longer than N (using lll).
#       --min-confidence=.80  Minimum confidence interval to pass to golint.
#       --min-occurrences=3   Minimum occurrences to pass to goconst.
#       --min-const-length=3  Minimumum constant length.
#       --dupl-threshold=50   Minimum token sequence as a clone for dupl.
#       --sort=none ...       Sort output by any of none, path, line, column,
#                             severity, message, linter.
#   -t, --tests               Include test files for linters that support this
#                             option
#       --deadline=5s         Cancel linters if they have not completed within
#                             this duration.
#       --errors              Only show errors.
#       --json                Generate structured JSON rather than standard
#                             line-based output.
#       --enable-gc           Enable GC for linters (useful on large
#                             repositories).
#   -D, --disable=LINTER ...  List of linters to disable
#                             (testify,test,gofmt,goimports,lll,misspell,unused).
#   -E, --enable=LINTER ...   Enable previously disabled linters.
#       --linter=NAME:COMMAND:PATTERN ...
#                             Specify a linter.
#       --message-overrides=LINTER:MESSAGE ...
#                             Override message from linter. {message} will be
#                             expanded to the original message.
#       --severity=LINTER:SEVERITY ...
#                             Map of linter severities.
#       --disable-all         Disable all linters.
#
# Args:
#   [<path>]  Directory to lint. Defaults to ".". <path>/... will recurse.

# gometalinter --help 2>&1 | ruby -r pp -e 'PP.pp Hash[$stdin.read[/Default linters:\n\n(.*?)\n\n/m, 1].lines.each_slice(3).reduce({}) { |m, s| m[s[0].split[0]] = s[1].strip + ":" + s[2].strip; m }.sort], $stdout, 1000'

gas_rules = %w[tls_old exec rand tls_good tls_ok templates httpoxy perms unsafe hardcoded tempfile rsa sql crypto bind].map { |r| "-rule #{r}" }.join ' '

linters = \
{"aligncheck"  => "aligncheck {path}:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$",
 "deadcode"    => "deadcode {path}:^deadcode: (?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "dupl"        => "dupl -plumbing -threshold {duplthreshold} {path}/*.go:^(?P<path>[^\\s][^:]+?\\.go):(?P<line>\\d+)-\\d+:\\s*(?P<message>.*)$",
 "errcheck"    => "errcheck -abspath {path}:^(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):[\\s\\t]+(?P<message>.*)$",
 "gas"         => "gas -fmt=csv #{gas_rules} {path}/*.go:^(?P<path>.*?\\.go+),(?P<line>\\d+),(?P<message>[^,]+,[^,]+,[^,]+)",
 "goconst"     => "goconst -min-occurrences {min_occurrences} -min-length {min_const_length} {path}:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "gocyclo"     => "gocyclo -over {mincyclo} {path}:^(?P<cyclo>\\d+)\\s+\\S+\\s(?P<function>\\S+)\\s+(?P<path>[^:]+):(?P<line>\\d+):(\\d+)$",
 "gofmt"       => "gofmt -l -s {path}/*.go:^(?P<path>[^\\n]+)$",
 "goimports"   => "goimports -l {path}/*.go:^(?P<path>[^\\n]+)$",
 "golint"      => "golint -min_confidence {min_confidence} {path}:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "gosimple"    => "gosimple {path}:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "gotype"      => "gotype -e {tests=-a} {path}:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "ineffassign" => "ineffassign -n {path}:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "interfacer"  => "interfacer {path}:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "lll"         => "lll -g -l {maxlinelength} {path}/*.go:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$",
 "misspell"    => "misspell -j 1 {path}/*.go:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "staticcheck" => "staticcheck {path}:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "structcheck" => "structcheck {tests=-t} {path}:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.+)$",
 # "test"        => "go test {path}:^--- FAIL: .*$\\s+(?P<path>[^:]+):(?P<line>\\d+): (?P<message>.*)$",
 # "testify"     => "go test {path}:Location:\\s+(?P<path>[^:]+):(?P<line>\\d+)$\\s+Error:\\s+(?P<message>[^\\n]+)",
 "unconvert"   => "unconvert {path}:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "unused"      => "unused {path}:^(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):\\s*(?P<message>.*)$",
 "varcheck"    => "varcheck {path}:^(?:[^:]+: )?(?P<path>[^:]+):(?P<line>\\d+):(?P<col>\\d+):[\\s\\t]+(?P<message>.*)$",
 "vet"         => "go tool vet {path}/*.go:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$",
 "vetshadow"   => "go tool vet --shadow {path}/*.go:^(?P<path>[^\\s][^\\r\\n:]+?\\.go):(?P<line>\\d+):\\s*(?P<message>.*)$"}
.reduce([]) { |v, entry|
  v << '--linter=%s:%s' % entry
  v << '--enable=%s' % entry[0]
}

exec 'gometalinter',
     '--vendored-linters',
     '--concurrency=4',
     '--vendor',
     '--cyclo-over=10',
     '--line-length=200',
     '--min-confidence=0.21',
     '--min-occurrences=2',
     '--dupl-threshold=50',
     '--sort=path',
     '--tests',
     '--deadline=15s',
     '--disable-all',
     *(ENV['DEBUG'] ? ['--debug'] : []),
     *linters,
     './...'
