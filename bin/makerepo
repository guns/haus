#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2015 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'set'
require 'fileutils'

class Makerepo
  DEFAULTS = {
    :delete => false,
    :name => nil,
    :cache_dir => '/var/cache/pacman/pkg',
    :lib_dir => '/var/lib/pacman/local',
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options]

        Options:
      BANNER

      opt.on '-d', '--delete', 'Delete before creating a new pkg db' do
        @delete = true
      end

      opt.on '-n', '--name NAME', 'Basename of pkg db [DEFAULT %s]' % hostname do |arg|
        @name = arg
      end

      opt.on '-C', '--cache-dir PATH', "DEFAULT: #{@cache_dir}" do |arg|
        @cache_dir = File.expand_path arg
      end

      opt.on '-L', '--lib-dir PATH', "DEFAULT: #{@lib_dir}" do |arg|
        @lib_dir = File.expand_path arg
      end
    end
  end

  def arch
    @arch ||= %x(uname -m).chomp
  end

  def hostname
    @hostname ||= ENV['HOSTNAME'] || %x(hostname).chomp
  end

  def dbpath
    @dbpath ||= "#{@cache_dir}/#{@name || hostname}.db.tar.gz"
  end

  def dbmtime
    @dbmtime ||= File.exists?(dbpath) ? File.stat(dbpath).mtime : Time.at(0)
  end

  def cached_packages
    @cached_packages ||= Set.new Dir[File.join @cache_dir, '*.pkg.tar.xz'].select { |f|
      File.stat(f).ctime > dbmtime
    }
  end

  def packages
    @packages ||= Dir[File.join @lib_dir, '*'].reduce [] do |v, f|
      base = File.join @cache_dir, File.basename(f)
      if cached_packages.include? (pkg = "#{base}-any.pkg.tar.xz")
        v << pkg
      elsif cached_packages.include? (pkg = "#{base}-#{arch}.pkg.tar.xz")
        v << pkg
      else
        v
      end
    end
  end

  def delete_db
    FileUtils.rm_f dbpath, :verbose => true
  end

  def sign_packages
    packages.each do |pkg|
      system 'gpg', '--detach-sign', pkg unless File.exists? "#{pkg}.sig"
    end
  end

  def write_db
    system 'repo-add', '--new', '--sign', dbpath, *packages
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.any?
    delete_db if @delete
    sign_packages
    write_db
  end
end

$0 = File.basename(__FILE__) and Makerepo.new.run ARGV if $0 == __FILE__
