#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2020 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'json'
require 'resolv'
require 'ipaddr'
require 'set'

class DnscryptIpsets
  DEFAULTS = {
    ipset_ipv4: 'DNS',
    ipset_ipv6: 'DNS6',
  }

  def initialize opts = {}
    DEFAULTS.each_key { |k| instance_variable_set "@#{k}", opts.has_key?(k) ? opts[k] : DEFAULTS[k] }
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<~BANNER
        Usage: dnscrypt-proxy -list -json | #{File.basename __FILE__} >> /etc/ipset.conf
      BANNER
    end
  end

  def print_ipset_conf dnscrypt_resolvers
    ipv4 = {}
    ipv6 = {}

    dnscrypt_resolvers.each do |resolver|
      name = resolver['name']
      desc = resolver['description']
      addrs = resolver['addrs'].map { |a| IPAddr.new a }
      proto = resolver['proto'] == 'DoH' ? 'tcp' : 'udp'
      ports = resolver['ports']

      addrs.each do |addr|
        ports.each do |port|
          (addr.ipv6? ? ipv6 : ipv4)[[addr, proto, port]] ||= [name, desc]
        end
      end
    rescue IPAddr::InvalidAddressError
    end

    server_names = Set.new

    if ipv4.any?
      puts "create -exist #{@ipset_ipv4} hash:ip,port comment"

      ipv4.sort_by(&:last).each do |(addr, proto, port), (name, desc)|
        server_names << name
        puts "add -exist #{@ipset_ipv4} %s,%s:%s comment %s" % [addr, proto, port, "#{name}: #{desc}".inspect]
      end
    end

    if ipv6.any?
      puts if server_names.size > 0
      puts "create -exist #{@ipset_ipv6} hash:ip,port family inet6 comment"

      ipv6.sort_by(&:last).each do |(addr, proto, port), (name, desc)|
        server_names << name
        puts "add -exist #{@ipset_ipv6} %s,%s:%s comment %s" % [addr, proto, port, "#{name}: #{desc}".inspect]
      end
    end

    if server_names.size > 0
      puts
      puts "# server_names = #{server_names.sort.inspect}"
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.any?
    print_ipset_conf(JSON.parse($stdin.read))
  end
end

$0 = File.basename(__FILE__) and DnscryptIpsets.new.run ARGV if $0 == __FILE__
