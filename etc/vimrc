
"  __     ___
"  \ \   / (_)_ __ ___
"   \ \ / /| | '_ ` _ \   Ftw
"    \ V / | | | | | | |
"     \_/  |_|_| |_| |_|  guns <sung@metablu.com>
"

if version < 702
    echo 'WARNING: Minimum vim version 7.2 not met, skipping $MYVIMRC'
    finish
endif


""" META """

" Clear all autocommands now
autocmd!

" Custom platform detection
if filereadable('/System/Library/CoreServices/Finder.app/Contents/MacOS/Finder')
    " has('macunix') doesn't describe vim compiled on OS X with --disable-darwin
    let g:VIM_PLATFORM = 'macunix'
elseif has('unix')
    let g:VIM_PLATFORM = 'unix'
endif

" Avoid python bytecode creation
if has('python')
    let $PYTHONDONTWRITEBYTECODE = 1
endif

" Pathogen
syntax off filetype off         " must be off before calling pathogen
call pathogen#runtime_append_all_bundles()
filetype plugin indent on

" Assorted commands and functions; no side effects from sourcing
source ~/.vim/local/commands.vim

set nocompatible                " break away from crusty vi compatibility
set fileformats=unix,dos        " support LF and CR/LF
set history=1024                " default command history = 20
set backspace=indent,eol,start  " More intuitive backspace
set tags=.tags,tags             " Allow hidden .tags file


""" USER INTERFACE """

" Searching / Matching
set hlsearch                    " highlighting for searched patterns
set incsearch                   " highlight as we search
set ignorecase                  " set case insensitivity
set smartcase                   " unless there's a capital letter

" Line wrapping
set nowrap                      " no soft wrap by default
set linebreak                   " but if gets turned on, break on words
set showbreak=…                 " and give us a nice visual indicator

" Completions
set completeopt=menu,longest,preview " better insert mode completion
set wildmode=list:longest       " bash style command line completion
set wildignore+=*.o,*.jpg,*.jpeg,*.png,*.gif,*.tif,*.tiff,.DS_Store,Thumbs.db
if exists('&wildignorecase')
    set wildignorecase          " case insensitive command line path completion
endif

" Folding
set foldmethod=manual           " Use manual folding by default (fastest)
set foldlevelstart=99           " But don't fold anything at the outset

" Gutter / Status line
set number                      " yay line numbers
set ruler                       " show current position at bottom
set showcmd                     " show (partial) command in status line

" Messages
set report=0                    " report back on all changes
set shortmess=aoOstTAI          " shorter and truncated messages
set autoread                    " Reread file on change after !; we can always [u]ndo

" Clipboard
set clipboard=unnamed           " use X11 PRIMARY clipboard (selection)

" Timeouts
set notimeout                   " Don't timeout on mappings
set ttimeout                    " but timeout otherwise

" Miscellaneous
set lazyredraw                  " Don't redraw while in macros
set nostartofline               " leave my cursor position alone!
set visualbell t_vb=            " don't make faces
set listchars=tab:▸\ ,trail:·   " Nice UI UTF-8 chars
set fillchars=fold:\ ,diff:·,vert:│
set sessionoptions+=globals,localoptions

" Turn on syntax and apply some global rules
source ~/.vim/local/syntax.vim


""" TEXT EDITING """

" c  Autowrap comments to textwidth
" r  Autoinsert comment leader with <Enter>
" q  Allow formatting of comments with :gq
" l  Don't format already long lines
" n  Recognize numbered lists
" 1  Don't break a line after a 1-letter word
set formatoptions=crqln1
SetTextwidth! 78

" Indenting / Tabs
set autoindent                  " set the cursor at same indent as line above
set copyindent                  " use existing indents for new indents
set shiftround                  " always round indents to multiple of shiftwidth
set expandtab                   " expand <Tab>s with spaces; death to tabs!
SetWhitespace! 4 8

" Joining lines
set nojoinspaces


""" GLOBAL OPTIONS """

" Bash
let g:is_bash = 1
let g:readline_has_bash = 1
let g:sh_minlines = 500

" Ruby
let g:ruby_operators = 1
let g:ruby_minlines = 20 " Default: 50

" JavaScript
let g:javascript_enable_domhtmlcss = 1

" Vim
let g:vim_indent_cont = 4
let g:vimsyn_folding = 'afmpPrt'

" Javadoc
let g:java_css = 1
let g:java_javascript = 1
let g:java_vb = 1

" TeX
let g:tex_fold_enabled = 1

" Netrw
let g:netrw_home = expand('~')

" Plugin: closetag
let g:closetag_html_style = 1

" Plugin: CommandT
let g:CommandTAlwaysShowDotFiles = 1
let g:CommandTMatchWindowAtTop = 1

" Plugin: NERDTree
let g:NERDChristmasTree = 1
let g:NERDTreeChDirMode = 2
let g:NERDTreeDirArrows = 1
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeMinimalUI = 1
let g:NERDTreeMouseMode = 2
let g:NERDTreeQuitOnOpen = 0
let g:NERDTreeShowHidden = 1
let g:NERDTreeWinPos = 'left'

" Plugin: NERDCommenter
let g:NERDCompactSexyComs = 1
let g:NERDSpaceDelims = 1

" Plugin: delimitMate (expand <CR> still breaks undo/redo)
let g:delimitMate_excluded_regions = ''
let g:delimitMate_expand_cr = 0
let g:delimitMate_expand_space = 1
let g:delimitMate_quotes = "\" '"

" Plugin: vim-preview
let g:PreviewBrowsers = 'chrome'

" Plugin: Gnupg
let g:GPGDefaultRecipients = ['self@sungpae.com']
let g:GPGPreferArmor = 1

" Plugin: Gundo.vim
let g:gundo_preview_bottom = 1
let g:gundo_right = 1
let g:gundo_width = 30

" Plugin: ScreenShell
let g:ScreenImpl = 'Tmux'

" Plugin: UltiSnips
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsSnippetsDir = '~/.vim/bundle/ultisnips/UltiSnips'
let g:UltiSnipsListSnippets = '<4-f>'
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-tab>'

" Plugin: ManPageView
let g:manpageview_winopen = 'vsplit='

" Plugin: Tagbar
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_compact = 1
let g:tagbar_sort = 0
let g:tagbar_width = 30

" Plugin: vim-orgmode
let g:org_leader = '<C-o>'

" Plugin: NrrwRgn
let g:nrrw_rgn_vert = 1
let g:nrrw_rgn_wdth = 120


""" MAPPINGS, COMMANDS, and AUTOCOMMANDS """

" Set modifiers and load modifier mapping functions
source ~/.vim/local/modifiers.vim

" Main mappings file
source ~/.vim/local/mappings.vim

" Autocommands
source ~/.vim/local/autocommands.vim


""" TERMINAL and GUI SETTINGS """

if has('gui_running')
    source ~/.vim/local/gvimrc.vim
else
    source ~/.vim/local/term.vim
endif
