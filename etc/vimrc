
"  __     ___
"  \ \   / (_)_ __ ___
"   \ \ / /| | '_ ` _ \   Ftw
"    \ V / | | | | | | |
"     \_/  |_|_| |_| |_|  guns <self@sungpae.com>
"

""" INITIALIZE

" Clear all autocommands
autocmd!

" Load and activate plugins
call pathogen#infect()
filetype plugin indent on

" Load commands and functions
source ~/.vim/local/commands.vim

""" USER INTERFACE

" Meta
set history=1024
set tags^=./.tags,.tags " Read hidden .tags

" Temporary files
set directory=~/.cache/vim/swap
call MkdirIfNotExists(&directory)
set viminfo+=n~/.cache/vim/viminfo
set viewdir=~/.cache/vim/view
let g:netrw_home = expand('~/.cache/vim')

" Undo
if has('persistent_undo')
	set undofile
	set undodir=~/.cache/vim/undo
	call MkdirIfNotExists(&undodir)
endif

" Dictionaries
call MkdirIfNotExists('~/.local/share/vim')
set dictionary+=/usr/share/dict/words
set thesaurus+=~/.local/share/vim/mthesaur.txt " http://www.gutenberg.org/dirs/etext02/mthes10.zip
set spellfile=~/.local/share/vim/spell.utf8.add

" Searching / Matching
set hlsearch   " Highlight matches
set incsearch  " Highlight as we search
set ignorecase " Ignore case
set smartcase  " Unless there's a capital letter

" Line wrapping
set nowrap                " Don't wrap lines
set display=lastline,uhex " Show truncated lines with @@@
set showbreak=…           " But if you do, show a nice visual indicator
set linebreak             " break on words
if exists('+breakindent')
	set breakindent       " and preserve indentation on soft wraps
endif

" Completions
set completeopt-=preview  " Disable omnicomplete preview window
set wildmode=list:longest " Bash-like command line completion
if exists('&wildignorecase')
	set wildignorecase    " Ignore case on command line
endif

" Folding
set foldlevelstart=99              " Don't fold anything on load
set foldtext=FoldText(v:foldstart) " Just show the line itself when folded

" Gutter / Status line
set ruler   " Show current position at bottom
set showcmd " Show (partial) command in status line

" Messages
set report=0            " Report back on all changes
set shortmess=aoOstTAIc " Shorten most messages

" Clipboard
set clipboard=unnamed " Use X11 PRIMARY

" Timeouts
set notimeout ttimeout " Wait for mappings, but timeout on key codes

" Cursor behavior
set nostartofline " Leave my cursor position alone!

" Display
set lazyredraw       " Don't redraw while in macros
set visualbell t_vb= " No bells, please
set listchars=tab:⇥\ ,trail:·,nbsp:░
set fillchars=vert:│,fold:\ ,diff:╳

" Sessions
set sessionoptions=curdir,folds,tabpages,winsize

" Diff
set diffopt+=vertical
set diffopt+=algorithm:histogram
set diffopt+=indent-heuristic

" Initialize syntax plugin and choose a colorscheme
source ~/.vim/local/syntax.vim

""" TEXT EDITING

" c  Autowrap comments to textwidth
" r  Autoinsert comment leader with <Enter>
" q  Allow formatting of comments with :gq
" n  Recognize numbered lists
" l  Don't format already long lines
" 1  Don't break a line after a 1-letter word
" j  Remove comment leader when joining lines
set formatoptions=crqln1j

" Global textwidth and tabstops
SetTextwidth! 78 " Standard documentation width
SetWhitespace! 8 " sw = sts = ts = 8

" Misc
set nojoinspaces               " Never join lines with two spaces
set backspace=indent,eol,start " Familiar backspace behavior
set nrformats-=octal           " Use base10 inc/dec on 0[0-7] strings
set nofixendofline             " Respect the lack of a newline in existing files

""" GLOBAL VARIABLES

" Set default arguments to par
let $PARINIT = 'B=_A_a.,?'

" C
let g:c_comment_strings = 1

" Bash
let g:is_bash = 1
let g:readline_has_bash = 1

" Ruby
let g:ruby_operators = 1
let g:ruby_indent_assignment_style = 'variable'

" Python
let g:python_highlight_all = 1

" Vim
let g:vim_indent_cont = 4

" Javadoc
let g:java_javascript = 1
let g:java_css = 1
let g:java_vb = 1

" SQL
let g:omni_sql_no_default_maps = 1

" Markdown
let g:markdown_fenced_languages = ['vim', 'sql', 'ruby', 'yaml', 'dockerfile']

" HTML
let g:html_indent_inctags = "p"
let g:html_indent_autotags = ""

" Plugin: vim-clojure-static
let g:clojure_align_multiline_strings = 1
let g:clojure_syntax_keywords = { 'clojureMacro': ['defproject'] }
let g:clojure_fuzzy_indent_patterns = [
	\ '^with-', '^def', '^let', '^when-', 'ing$', '-for$', '^for-', '^fn',
	\ '-fn$', '^at-', '-to$', '-loop$', '\v(cond|as)-\>\*', '^case[*+]$',
	\ '^pprint-logical-block$', '^eval-in-project$'
	\ ]
let g:clojure_fuzzy_indent_blacklist = ['\v^with-%(meta|out-str|loading-context)$']

" Plugin: NERDTree
let g:NERDTreeBookmarksFile = expand('~/.cache/vim/NERDTreeBookmarks')
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeMinimalUI = 1
let g:NERDTreeMouseMode = 2
let g:NERDTreeNaturalSort = 1
let g:NERDTreeQuitOnOpen = 0
let g:NERDTreeShowHidden = 1
let g:NERDTreeSortOrder = []

" Plugin: NERDCommenter
let g:NERDSpaceDelims = 1
let g:NERDMenuMode = 0

" Plugin: delimitMate (expand <CR> breaks undo/redo)
let g:delimitMate_excluded_regions = 'Comment,String'

" Plugin: Gundo.vim
let g:gundo_preview_bottom = 1
let g:gundo_right = 1
let g:gundo_width = 30
let g:gundo_auto_preview = 0
let g:gundo_prefer_python3 = 1

" Plugin: ScreenShell
let g:ScreenImpl = 'Tmux'

" Plugin: UltiSnips
call has('python3') " Force preloading of python3 for UltiSnips
let g:UltiSnipsNoPythonWarning = 1
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsListSnippets = '<4-`>'
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'

" Plugin: Tagbar
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1
let g:tagbar_compact = 1
let g:tagbar_sort = 0
let g:tagbar_width = 60
let g:tagbar_type_rust = {
	\ 'ctagstype': 'rust',
	\ 'kinds': [
	\	'c:CONSTANTS',
	\	'g:Enumerations',
	\	's:Structures',
	\	'T:Types',
	\	't:Traits',
	\	'm:Modules',
	\	'd:Macros',
	\	'f:Functions',
	\	'i:Trait Implementations',
	\	]
	\ }

" Plugin: NrrwRgn
let g:nrrw_rgn_vert = 1
let g:nrrw_rgn_wdth = 160
let g:nrrw_rgn_write_on_sync = 1

" Plugin: Regbuf
let g:regbuf_open_command = 'vnew'
let g:regbuf_edit_open_command = '80vnew'

" Plugin: Org
let g:org_home = isdirectory('~/Documents/Org') ? '~/Documents/Org' : '~guns/Documents/Org'
let g:org_agenda_files = [g:org_home . '/TODO.org']
let g:org_indent = 1

" Plugin: rainbow_parentheses.vim
let g:rbpt_colorpairs = [
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [235, '#1c1c1c'],
	\ [236, '#303030'],
	\ [237, '#3a3a3a'],
	\ [238, '#444444'],
	\ [239, '#4e4e4e'],
	\ [240, '#585858'],
	\ [241, '#606060'],
	\ [242, '#666666'],
	\ [243, '#767676'],
	\ [244, '#808080'],
	\ [245, '#8a8a8a'],
	\ ]
let g:rbpt_max = len(g:rbpt_colorpairs)

" Plugin: splitjoin.vim
let g:splitjoin_split_mapping = ''
let g:splitjoin_join_mapping = ''

" Plugin: Ack.vim
let g:ackprg = 'rg --vimgrep'
let g:ack_apply_qmappings = 0
let g:ack_apply_lmappings = 0

" Plugin: EasyAlign
let g:easy_align_ignore_groups = ['Comment', 'String', 'Quote']
let g:easy_align_delimiters = {
	\ 'l': { 'pattern': '->' },
	\ 't': { 'pattern': ':-' },
	\ ';': { 'pattern': ';\+', 'ignore_groups': ['String', 'Quote'] }
	\ }

" Plugin: sparkup
let g:sparkupExecuteMapping = '<Leader>j'
let g:sparkupNextMapping = '<Leader>n'
let g:sparkupMapsNormal = 1

" Plugin: vim-go
let g:go_test_show_name = 1
" let g:go_test_timeout= '10s'
let g:go_play_browser_command = 'open'
" let g:go_play_open_browser = 1
" let g:go_auto_type_info = 0
" let g:go_info_mode = 'gocode'
" let g:go_auto_sameids = 0
" let g:go_updatetime = 800
let g:go_jump_to_error = 0
" let g:go_fmt_autosave = 1
let g:go_fmt_command = 'goimports'
" let g:go_fmt_options = ''
" let g:go_fmt_fail_silently = 0
" let g:go_fmt_experimental = 0
" let g:go_mod_fmt_autosave = 1
" let g:go_doc_keywordprg_enabled = 1
" let g:go_doc_max_height = 20
" let g:go_doc_url = 'https://godoc.org'
" let g:go_def_mode = 'guru'
" let g:go_def_mapping_enabled = 1
" let g:go_def_reuse_buffer = 0
" let g:go_doc_command = ["godoc"]
" let g:go_bin_path = ""
let g:go_snippet_engine = ""
" let g:go_get_update = 1
" let g:go_guru_scope = []
" let g:go_build_tags = ''
" let g:go_autodetect_gopath = 0
" let g:go_textobj_enabled = 1
" let g:go_textobj_include_function_doc = 1
let g:go_textobj_include_variable = 0
" let g:go_metalinter_autosave = 0
" let g:go_metalinter_autosave_enabled = ['vet', 'golint']
" let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
" let g:go_metalinter_disabled = []
let g:go_metalinter_command = "gometalinter-vim"
let g:go_metalinter_deadline = "30s"
" let g:go_list_height = 0
" let g:go_list_type = ""
" let g:go_list_type_commands = {}
" let g:go_list_autoclose = 1
let g:go_asmfmt_autosave = 1
" let g:go_term_mode = "vsplit"
" let g:go_term_height = 30
" let g:go_term_width = 30
" let g:go_term_enabled = 0
" let g:go_alternate_mode = "edit"
" let g:go_gorename_prefill = 'expand("<cword>") =~# "^[A-Z]"' .
" 	\ '? go#util#pascalcase(expand("<cword>"))' .
" 	\ ': go#util#camelcase(expand("<cword>"))'
" let g:go_gocode_propose_builtins = 1
" let g:go_gocode_socket_type = 'unix'
let g:go_template_autocreate = 0
" let g:go_template_file = "hello_world.go"
" let g:go_template_test_file = "hello_world_test.go"
" let g:go_template_use_pkg = 0
" let g:go_decls_includes = 'func,type'
" let g:go_decls_mode = ''
let g:go_echo_command_info = 0
" let g:go_echo_go_info = 1
" let g:go_statusline_duration = 60000
" let g:go_addtags_transform = 'snakecase'
" let g:go_debug = []
let g:go_fold_enable = []
" let g:go_highlight_array_whitespace_error = 0
" let g:go_highlight_chan_whitespace_error = 0
let g:go_highlight_extra_types = 1
" let g:go_highlight_space_tab_error = 0
" let g:go_highlight_trailing_whitespace_error = 0
let g:go_highlight_operators = 1
" let g:go_highlight_functions = 0
" let g:go_highlight_function_arguments = 0
" let g:go_highlight_function_calls = 0
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
" let g:go_highlight_string_spellcheck = 1
" let g:go_highlight_variable_declarations = 0
" let g:go_highlight_variable_assignments = 0

" Plugin: pgsql.vim
let g:sql_type_default = 'pgsql'

" Plugin: rust.vim
let g:rustfmt_autosave = 1

" Plugin: vim-racer
let g:racer_experimental_completer = 1

" Plugin: vim-rubocop
let g:vimrubocop_keymap = 0

" Plugin: vim-ruby-refactoring
let g:ruby_refactoring_map_keys = 0

" Plugin: fzf, fzf.vim
let $FZF_DEFAULT_OPTS = '--layout=reverse'
let g:fzf_command_prefix = 'Fzf'

" Plugin: vim-table-mode
let g:table_mode_map_prefix = '<LocalLeader>t'
let g:table_mode_tableize_d_map = '<LocalLeader>T'
let g:table_mode_corner = '|'

" Plugin: vim-lsp
let g:lsp_auto_enable = 1
let g:lsp_use_native_client = 1
let g:lsp_preview_keep_focus = 1
let g:lsp_preview_float = 1
let g:lsp_preview_autoclose = 1
let g:lsp_preview_doubletap = [function('lsp#ui#vim#output#closepreview')]
let g:lsp_insert_text_enabled = 0
let g:lsp_text_edit_enabled = 0
let g:lsp_completion_documentation_enabled = 1
let g:lsp_completion_documentation_delay = 0
let g:lsp_diagnostics_enabled = 0
let g:lsp_diagnostics_echo_cursor = 0
" let g:lsp_diagnostics_echo_delay = 500
let g:lsp_diagnostics_float_cursor = 0
" let g:lsp_diagnostics_float_delay = 500
let g:lsp_diagnostics_float_insert_mode_enabled = 0
let g:lsp_format_sync_timeout = -1
let g:lsp_diagnostics_highlights_enabled = 0
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
" let g:lsp_diagnostics_highlights_delay = 500
let g:lsp_diagnostics_signs_enabled = 0
let g:lsp_diagnostics_signs_insert_mode_enabled = 0
" let g:lsp_diagnostics_signs_delay = 500
let g:lsp_diagnostics_signs_priority = 10
" let g:lsp_diagnostics_signs_priority_map = {}
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_diagnostics_virtual_text_insert_mode_enabled = 0
let g:lsp_diagnostics_virtual_text_delay = 0
let g:lsp_diagnostics_virtual_text_prefix = ''
let g:lsp_diagnostics_virtual_text_align = 'below'
let g:lsp_diagnostics_virtual_text_padding_left = 1
let g:lsp_diagnostics_virtual_text_wrap = 'truncate'
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_document_code_action_signs_delay = 0
let g:lsp_inlay_hints_enabled = 0
" let g:lsp_inlay_hints_delay = 350
" let g:lsp_inlay_hints_mode = {}
let g:lsp_tree_incoming_prefix = '← '
let g:lsp_use_event_queue = 1
let g:lsp_max_buffer_size = 1<<20
let g:lsp_document_highlight_enabled = 0
" let g:lsp_document_highlight_delay = 350
" let g:lsp_get_supported_capabilities
let g:lsp_peek_alignment = 'center'
let g:lsp_preview_max_width = -1
let g:lsp_preview_max_height = -1
let g:lsp_preview_fixup_conceal = 0
let g:lsp_float_max_width = 120
let g:lsp_signature_help_enabled = 0
" let g:lsp_signature_help_delay = 200
let g:lsp_show_workspace_edits = 0
let g:lsp_fold_enabled = 1
let g:lsp_hover_conceal = 0
let g:lsp_hover_ui = ''
let g:lsp_ignorecase = 0
let g:lsp_log_file = ''
let g:lsp_log_verbose = 1
let g:lsp_semantic_enabled = 0
" let g:lsp_semantic_delay = 500
" let g:lsp_text_document_did_save_delay = -1
" let g:lsp_snippet_expand = []
" let g:lsp_completion_resolve_timeout = 200
" let g:lsp_tagfunc_source_methods = ['definition', 'declaration', 'implementation', 'typeDefinition']
let g:lsp_show_message_request_enabled = 1
let g:lsp_work_done_progress_enabled = 0
" let g:lsp_show_message_log_level = 'warning'
let g:lsp_untitled_buffer_enabled = 1

""" MAPPINGS and AUTOCOMMANDS

" Set modifiers and load modifier mapping functions
source ~/.vim/local/modifiers.vim

" Main mappings file
source ~/.vim/local/mappings.vim

" Autocommands
source ~/.vim/local/autocommands.vim

""" TERMINAL and GUI SETTINGS

if has('gui_running')
	source ~/.vim/local/gvimrc.vim
else
	source ~/.vim/local/tty.vim
endif
