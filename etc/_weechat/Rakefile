# -*- encoding: utf-8 -*-

require 'shellwords'
require 'yaml'

class WeeChatLog < Hash
  class << self
    def load_dir path
      Hash[Dir['%s/*.weechatlog' % path].map do |f|
        [File.basename(f), new(File.read f)]
      end]
    end
  end

  def initialize buf
    super().merge! buf.lines.group_by { |l| l.split("\t").first }
  end

  def to_s
    sort_by { |k,v| k }.map { |k,v| v }.join
  end
end

desc 'Merge logs from a (remote) directory. First argument should be a path or an ssh remote host'
task :merge do
  arg = ARGV.drop_while { |a| a != 'merge' }[1] || ARGV.last
  raise 'No path given' unless arg

  local_logs = WeeChatLog.load_dir 'logs'

  remote_logs = if File.directory? arg
    WeeChatLog.load_dir arg
  else
    # Serialize to YAML
    cmd = %W[ssh #{arg} ruby -E utf-8 -r yaml -e] << %q("
      puts Dir[File.expand_path '~/.weechat/logs/*.weechatlog'].map { |f|
        [File.basename(f), File.read(f)]
      }.to_yaml
    ")

    sshbuf = %x(#{cmd.shelljoin})
    raise 'SSH command failed' unless $?.exitstatus.zero?

    Hash[YAML.load(sshbuf).map { |f, buf| [f, WeeChatLog.new(buf)] }]
  end

  (local_logs.keys | remote_logs.keys).each do |file|
    l, r = local_logs[file], remote_logs[file]

    log = if l and r
      # Iterate through all keys
      (l.keys | r.keys).sort.map do |t|
        if l[t] and r[t]
          # Append uniq lines in r to l
          r[t].to_a.inject l[t].to_a.dup do |lines, rl|
            lines << rl unless lines.include? rl
            lines
          end
        else
          l[t] || r[t]
        end.join
      end.join
    else
      (l || r).to_s
    end

    File.open File.join('logs', file), 'w' do |f|
      f.puts log
    end
  end

  exit # Stop processing ARGV
end

desc 'Archive old logs'
task :archive do
  sh 'cd logs; tar zcv *.weechatlog > "$(date --iso-8601=seconds).tar.gz" && rm *.weechatlog'
end
