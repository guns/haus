# =========================
# Bash completions for nerv
# =========================

# Copyright (c) 2010 Sung Pae <sung@metablu.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

type nerv &>/dev/null && {

# return list of words, one per line, with specified suffix
_nerv_words() {
    local w suffix="$1" words="${@:2}" IFS=' '$'\t'$'\n'
    for w in $words; do
        echo "$w$suffix"
    done
}

# fill the COMPREPLY array
_nerv_comp() {
    local cur="$1" words="$2" suffix="${3:- }" IFS=$'\n'
    COMPREPLY=($(compgen -W "$(_nerv_words "$suffix" "$words")" \
                         -- "$cur"))
}

_nerv() {
    # bash4 introduces COMP_WORDBREAKS, which is a pain in the ass
    [[ ${BASH_VERSINFO[0]} -ge 4 ]] && {
        local comp_cword=$COMP_CWORD comp_wordbreaks="${COMP_WORDBREAKS//:}="
        local i j comp_words=()
        # rebuild COMP_WORDS, adjusting COMP_CWORD appropiately
        for ((i=0, j=0; i<${#COMP_WORDS[@]}; ++i)); do
            # special case colons: append to previous word (yes this sucks)
            if [[ ${COMP_WORDS[i]} == : ]]; then
                ((--comp_cword))
                comp_words[$j]+=:
            # likewise, append word to previous if all magic conditions apply
            elif [[ ${comp_words[$j]} == *: && ${COMP_WORDS[i]:0:1} != - ]];then
                ((--comp_cword))
                comp_words[$j]+=${COMP_WORDS[i]}
            # is word a metacharacter?
            elif [[ ${COMP_WORDS[i]} == [$comp_wordbreaks] ]]; then
                # compress the list if this word is not the cword
                if [[ $i -lt $comp_cword ]]; then
                    ((--comp_cword))
                # otherwise, set cword to an empty value
                else
                    comp_words[$((++j))]=''
                fi
            # else just append to list
            else
                comp_words[$((++j))]="${COMP_WORDS[i]}"
            fi
        done
        COMP_WORDS=("${comp_words[@]}") COMP_CWORD=$comp_cword
    }

    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[COMP_CWORD-1]}
    local cmd=${COMP_WORDS[1]}

    local cmds='setup'
    local nerv_opts='--help --version'
    local global_opts='--path --user --etc --force --help'
    local setup_opts='--install-mode --tmp'
    local setup_cmds='bash dotfiles etcfiles ssh-keys all'
    local install_modes='link copy mixed'

    # Options first
    if [[ $cur == @(-p|-u|-i|-f|-h) ]]; then
        _nerv_comp "$cur" "$cur" # complete short options if given
    elif [[ $prev == @(-p|--path|--etc|--tmp) ]]; then
        : # let bash do directory completions
    elif [[ $prev == @(-u|--user) ]]; then
        _nerv_comp "${cur##*:}" "$(compgen -u)" :
    elif [[ $prev == @(-i|--install-mode) ]]; then
        _nerv_comp "$cur" "$install_modes"
    elif [[ $cur == -* ]]; then
        [[ $prev == nerv ]] && local opts="$nerv_opts"
        [[ $cmd == setup ]] && local opts="$global_opts $setup_opts"
        _nerv_comp "$cur" "$opts"
    # Then commands
    elif [[ $prev == nerv ]]; then
        _nerv_comp "$cur" "$cmds"
    elif [[ $cmd == setup ]]; then
        _nerv_comp "$cur" "$setup_cmds"
    fi

    return
} && complete -o dirnames -o nospace -F _nerv nerv

}
