### PREPROCESSOR

snippet once "#pragma once" b
#pragma once
#ifndef $1
#define ${1:_`!v toupper(substitute(expand("%:t:r"), '\v[^A-Za-z0-9_]', '_', 'g'))`_}
$0
#endif
endsnippet

snippet def "#define" b
#define $0
endsnippet

snippet ifdef "#ifdef" b
#ifdef ${1:SYMBOL}
#endif
endsnippet

snippet ifndef "#ifndef … #define … #endif" b
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL}
$0
#endif
endsnippet

snippet inc "#include <>" b
#include <${2:${1:stdio}.h}>
endsnippet

snippet Inc "#include" b
#include "${2:${1:`!p snip.rv = snip.basename`}.h}"
endsnippet

### DECLARATIONS

snippet main "int main(int argc, char const **argv)" b
int main(int argc, char const **argv)
{
	$0
	return 0;
}
endsnippet

snippet mainv "int main(void)" b
int main(void)
{
	$0
	return 0;
}
endsnippet

snippet f "Function" b
${1:type} ${2:fn}($3)
{
	$0
}
endsnippet

snippet fd "Function declaration" b
${1:type fn}($0);
endsnippet

snippet td "typedef" b
typedef ${1:int} ${2:CustomType};
endsnippet

snippet S "struct" w
struct $0
endsnippet

snippet ST "static" w
static $0
endsnippet

snippet N "null" w
NULL
endsnippet

snippet E "enum" w
enum $0
endsnippet

snippet C "char" w
char $0
endsnippet

snippet CC "char const" w
char const $0
endsnippet

snippet I "int" w
int $0
endsnippet

snippet L "long" w
long $0
endsnippet

snippet V "void" w
void $0
endsnippet

snippet U "unsigned" w
unsigned $0
endsnippet

snippet co "const" w
const $0
endsnippet

snippet D "double" w
double $0
endsnippet

snippet st "size_t" w
size_t $0
endsnippet

### CONDITIONALS

snippet if "if" w
if ($1)
endsnippet

snippet el "else" w
else
endsnippet

snippet ? "Ternary conditional" w
${1:cond} ? ${2:true} : ${0:false}
endsnippet

snippet sw "switch" w
switch ($1) {
case $2:
	$0
	break;
default:
}
endsnippet

snippet case "case" w
case $1:
	$0
	break;
endsnippet

### LOOPS

snippet for "for loop" w
for (${1:i} = 0; $1 < ${2:count}; ${3:++$1})
endsnippet

snippet for- "reverse for loop" w
for (${1:i} = ${2:count}; $1 >= 0; ${3:--$1})
endsnippet

snippet wh "while loop" w
while ($0)
endsnippet

snippet do "do {} while" w
do {
	$0
} while ($1);
endsnippet

### STATEMENTS

snippet r "return" w
return $1;
endsnippet

snippet pr "printf" w
printf("${1}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet prv "var" w
printf("${1:var}: ${2:<%s>}\n", ${0:$1});
endsnippet

snippet fpr "fprintf" w
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet deb "call debugger" w
__asm__("int \$3");
endsnippet

snippet fdeb "printf debug to file" w
{
	FILE *_f = fopen("/tmp/${1:debug.log}", "a");
	fprintf(_f, "$0");
	fclose(_f);
}
endsnippet

snippet so "sizeof" w
sizeof($0)
endsnippet

snippet ma "malloc" w
malloc($0);
endsnippet

snippet fr "free" w
free($0);
endsnippet
