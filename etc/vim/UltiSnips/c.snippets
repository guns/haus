### PREPROCESSOR

snippet once "#pragma once" b
#pragma once
${1:#ifndef ${2:`!v toupper(substitute(expand("%:p")[strlen(system('git rev-parse --show-toplevel')):], '\v[^A-Za-z0-9_]', '_', 'g'))`_}
#define $2
$0
#endif // $2}
endsnippet

snippet def "#define" b
#define $0
endsnippet

snippet ifd "#ifdef" b
#ifdef ${1:SYMBOL}
#endif
endsnippet

snippet ifnd "#ifndef … #define … #endif" b
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL}
$0
#endif
endsnippet

snippet inc "#include <>" b
#include <${2:${1:stdio.h}}>
endsnippet

snippet Inc "#include" b
#include "${2:${1:`!p snip.rv = snip.basename`}.h}"
endsnippet

### DECLARATIONS

snippet main "int main(int argc, char *argv[])" b
int main(int argc, char *argv[])
{
	$0
	return 0;
}
endsnippet

snippet mainv "int main(void)" b
int main(void)
{
	$0
	return 0;
}
endsnippet

snippet f "Function" b
${1:type} ${2:fn}(${3:void})
{
	$0
}
endsnippet

snippet fd "Function declaration" b
${1:type fn}(${0:void});
endsnippet

snippet td "typedef" b
typedef ${1:int} ${2:CustomType};
endsnippet

snippet S "struct" w
struct $0
endsnippet

snippet ST "static" w
static $0
endsnippet

snippet N "new" w
new $0
endsnippet

snippet a "auto" w
auto $0
endsnippet

snippet ca "const auto" w
const auto $0
endsnippet

snippet E "enum" w
enum $0
endsnippet

snippet ext "extern" w
extern $0
endsnippet

snippet C "char" w
char $0
endsnippet

snippet cc "char const" w
char const $0
endsnippet

snippet u "unsigned" w
unsigned $0
endsnippet

snippet c "const" w
const $0
endsnippet

snippet ci "const int" w
const int $0
endsnippet

snippet st "size_t" w
size_t $0
endsnippet

### CONDITIONALS

snippet if "if" w
if ($1)
endsnippet

snippet el "else" w
else
endsnippet

snippet ? "Ternary conditional" w
${1:cond} ? ${2:true} : ${0:false}
endsnippet

snippet sw "switch" w
switch ($1) {
case $2:
	$0
	break;
default:
}
endsnippet

snippet case "case" w
case $1:
	$0
	break;
endsnippet

### LOOPS

snippet for "for loop" w
for (${1:int }${2:i} = 0; $2 < ${3:count}; ${4:$2++}) {
	$0
}
endsnippet

snippet for- "reverse for loop" w
for (${1:int }${2:i} = ${3:count}; $2 >= 0; ${4:$2--}) {
	$0
}
endsnippet

snippet forit "for iterator loop" w
for (${1:auto }${2:it} = ${3:v}${4:.begin()}; $2 < $3.end(); ++$2) {
	$0
}
endsnippet

snippet forr "for range loop" w
for (${1:auto }${2:x} : ${3:xs}) {
	$0
}
endsnippet

snippet wh "while loop" w
while ($0)
endsnippet

snippet do "do {} while" w
do {
	$0
} while ($1);
endsnippet

### STATEMENTS

snippet r "return" w
return $1;
endsnippet

snippet pr "printf" w
printf("${1}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet prv "var" w
printf("${1:var}: ${2:<%s>}\n", ${0:$1});
endsnippet

snippet fpr "fprintf" w
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet deb "call debugger" w
asm ("int \$3");
endsnippet

snippet fdeb "printf debug to file" w
{
	FILE *_f = fopen("/tmp/${1:debug.log}", "a");
	fprintf(_f, "$0");
	fclose(_f);
}
endsnippet

snippet so "sizeof" w
sizeof($0)
endsnippet

snippet ma "malloc" w
malloc($0);
endsnippet

snippet fr "free" w
free($0);
endsnippet

snippet asm "asm" w
${1:#define NL "\n\t"
}asm ${2:volatile }(
	$0
	: // Output
	: // Input
	: // Clobbers
);
endsnippet

snippet _a "__attribute__(())" w
__attribute__(($0))
endsnippet

snippet ns "namespace" w
namespace $0
endsnippet

snippet s "std::" w
std::
endsnippet

snippet sv "std::vector" w
std::vector<${1}>
endsnippet

snippet sum "std::unordered_map" w
std::unordered_map<${1}>
endsnippet

snippet templ "template" w
template <${1:typename} ${2:T}>
endsnippet

snippet b "begin()" w
begin()
endsnippet

snippet e "end()" w
end()
endsnippet

snippet eb "emplace_back" w
emplace_back(${1})
endsnippet

snippet pb "push_back" w
push_back(${1})
endsnippet
