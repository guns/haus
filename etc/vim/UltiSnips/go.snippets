# Snippets for Go

# when to abbriviate and when not?
# b doesn't work here, because it ignores whitespace
# optional local name?
snippet /^I/ "Import declaration" r
import (
	"${0:fmt}"
)
endsnippet

snippet /^P/ "Package declaration" r
package ${1:`!v expand('%:p:h:t')`}
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^CS/ "Constants declaration" r
const (
	$0
)
endsnippet

snippet /^VS/ "Variables declaration" r
var (
	$0
)
endsnippet

snippet pf "fmt.Printf()" w
fmt.Printf($0)
endsnippet

snippet fpf "fmt.Fprintf()" w
fmt.Fprintf($0)
endsnippet

snippet pl "fmt.Println()" w
fmt.Println($0)
endsnippet

snippet sf "fmt.Sprintf()" w
fmt.Sprintf($0)
endsnippet

snippet ef "fmt.Errorf()" w
fmt.Errorf($0)
endsnippet

snippet ssc "fmt.Sscan()" w
fmt.Sscan($0)
endsnippet

snippet PL "pretty.Println()" w
pretty.Println($0)
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet bench "Benchmark" b
func Benchmark$1(b *testing.B) {
	for i := 0; i < b.N; i++ {
		$0
	}
}
endsnippet

snippet test "Test" b
func Test$1(t *testing.T) {
	$0
}
endsnippet

snippet ase "assert.Equal()" w
assert.Equal(t, $0)
endsnippet

snippet asf "assert.False()" w
assert.False(t, $0)
endsnippet

snippet ast "assert.True()" w
assert.True(t, $0)
endsnippet

snippet asn "assert.Nil()" w
assert.Nil(t, $0)
endsnippet

snippet aser "assert.Error()" w
assert.Error(t, $0)
endsnippet

snippet asd "assert.InDelta()" w
assert.InDelta(t, $0)
endsnippet

snippet L "len()" w
len($0)
endsnippet

snippet C "cap()" w
cap($0)
endsnippet

snippet S "[]string" w
[]string
endsnippet

snippet T "type" b
type $0
endsnippet

snippet TS "TS" b
type $1 struct {
	$0
}
endsnippet

snippet TI "type interface" b
type $1 interface {
	$0
}
endsnippet

# statements
snippet for "For loop" !b
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet fori "for i := 0 â€¦" w
for ${1:i} := ${2:0}; $1 ${3:<} ${4:n}; ${5:$1++} {
	$0
}
endsnippet

snippet forin "For range loop" !b
for ${1:i} := range ${2} {
	${0:${VISUAL}}
}
endsnippet

snippet fl "float32" w
float32
endsnippet

snippet FL "float64" w
float64
endsnippet

snippet u8 "uint8" w
uint8
endsnippet

snippet u6 "uint64" w
uint64
endsnippet

snippet u3 "uint32" w
uint32
endsnippet

snippet ui "uint" w
uint
endsnippet

snippet B "BS" w
[]byte
endsnippet

snippet ap "append" w
$1 = append(${1}, $0)
endsnippet

snippet ra "range" w
range $0
endsnippet

snippet if "If statement" !b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet ifl "if let" w
if ${1} := ${2} {
	$0
}
endsnippet

snippet : "key: value" w
$1: $0,
endsnippet

snippet ife "if {} else {}" w
if $1 {
	$0
} else {
}
endsnippet

snippet ifer "if err != nil { return err }" w
if ${1:err} != nil {
	return $1
}
endsnippet

snippet el "else" w
else {
	$0
}
endsnippet

snippet sw "Switch statement" !b
switch ${1:expression}${1/(.+)/ /}{
case ${0}:
}
endsnippet

snippet sel "select" !b
select {
case ${0}:
}
endsnippet

snippet case "Case clause" !b
case ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet def "Default clause" !b
default:
	${0:${VISUAL}}
endsnippet

snippet D "defer" w
defer $0
endsnippet

snippet mk "make()" w
make($0)
endsnippet

snippet cp "copy()" w
copy($0)
endsnippet

snippet N "new()" w
new($0)
endsnippet

# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^fm/ "Method" r
func (${1:receiver} *${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet /^f/ "Function" !r
func ${1}(${2})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet fn "Closure" w
func(${1})${2/(.+)/ /}${2:type} {
	${0:${VISUAL}}
}
endsnippet

snippet gof "go func" w
go func() {
	${0:${VISUAL}}
}()
endsnippet

snippet fd "function decl" w
func($1)${2/(.+)/ /}${2:type}
endsnippet

snippet r "return" w
return $0
endsnippet

snippet cl "close" w
close($0)
endsnippet

# types and variables
snippet M "map" w
map[${1:keytype}]${0:valtype}
endsnippet

snippet str "string()" w
string($0)
endsnippet

snippet del "delete" w
delete($0)
endsnippet

snippet unsp "unsafe.Pointer" w
unsafe.Pointer($0)
endsnippet

# vim:ft=snippets:
