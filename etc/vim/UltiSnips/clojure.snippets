###
### Clojure
###

clearsnippets { [ ({ ([

### Meta {{{1

snippet #! "#!/usr/bin/env lein-exec" b
#!/usr/bin/env lein-exec
endsnippet

snippet ns "ns" b
(ns ${1:`!v tr(substitute(expand("%:p:r"), '\v.*(src|test)/', '', ''), '/_', '.-')`}$0)
endsnippet

snippet req "require"
(require '$0)
endsnippet

snippet :r ":require"
(:require [$0])
endsnippet

snippet imp "import"
(import '$0)
endsnippet

snippet :i ":import"
(:import ($0))
endsnippet

snippet rc "refer-clojure"
(refer-clojure :exclude [$0])
endsnippet

snippet :rc ":refer-clojure"
(:refer-clojure :exclude [$0])
endsnippet

snippet me "meta" w
(meta $0)
endsnippet

snippet wm "with-meta" w
(with-meta $0)
endsnippet

snippet main "main" w
(defn -main [& argv]
	$0)
endsnippet

snippet CC "comment" w
(comment
	$0
	)
endsnippet

snippet SH "clojure.java.shell/sh" w
(clojure.java.shell/sh $0)
endsnippet

snippet prv "^:private" w
^:private $0
endsnippet

### Collections {{{1

snippet conj "conj" w
(conj $0)
endsnippet

snippet co "count" w
(count $0)
endsnippet

snippet cons "cons" w
(cons $0)
endsnippet

snippet rev "reverse" w
(reverse $0)
endsnippet

snippet fi "first" w
(first $0)
endsnippet

snippet sec "second" w
(second $0)
endsnippet

snippet la "last" w
(last $0)
endsnippet

snippet nt "nth" w
(nth $0)
endsnippet

snippet nex "next" w
(next $0)
endsnippet

snippet re "rest" w
(rest $0)
endsnippet

snippet bl "butlast" w
(butlast $0)$
endsnippet

snippet dr "drop" w
(drop $0)
endsnippet

snippet dl "drop-last" w
(drop-last $0)
endsnippet

snippet dw "drop-while" w
(drop-while $0)
endsnippet

snippet ta "take" w
(take $0)
endsnippet

snippet tl "take-last" w
(take-last $0)
endsnippet

snippet tn "take-nth" w
(take-nth $0)
endsnippet

snippet tw "take-while" w
(take-while $0)
endsnippet

snippet nthn "nthnext" w
(nthnext $0)
endsnippet

snippet into "into" w
(into $0)
endsnippet

snippet pe "peek" w
(peek $0)
endsnippet

snippet pop "pop" w
(pop $0)
endsnippet

snippet ass "assoc" w
(assoc $0)
endsnippet

snippet dis "dissoc" w
(dissoc $0)
endsnippet

snippet get "get" w
(get $0)
endsnippet

snippet geti "get-in" w
(get-in $1 [$0])
endsnippet

snippet sv "subvec" w
(subvec $0)
endsnippet

snippet se "set" w
(set $0)
endsnippet

snippet hs "hash-set" w
(hash-set $0)
endsnippet

snippet ss "sorted-set" w
(sorted-set $0)
endsnippet

snippet sb "sort-by" w
(sort-by $0)
endsnippet

snippet disj "disj" w
(disj $0)
endsnippet

snippet am "array-map" w
(array-map $0)
endsnippet

snippet hm "hash-map" w
(hash-map $0)
endsnippet

snippet sm "sorted-map" w
(sorted-map $0)
endsnippet

snippet smb "sorted-map-by" w
(sorted-map-by $0)
endsnippet

snippet ks "keys" w
(keys $0)
endsnippet

snippet vs "vals" w
(vals $0)
endsnippet

snippet ve "vec" w
(vec $0)
endsnippet

snippet vec "vector" w
(vector $0)
endsnippet

snippet li "list" w
(list $0)
endsnippet

snippet map "map" w
(map $0)
endsnippet

snippet mapv "mapv" w
(mapv $0)
endsnippet

snippet mapc "mapcat" w
(mapcat $0)
endsnippet

snippet red "reduce" w
(reduce $0)
endsnippet

snippet redk "reduce-kv" w
(reduce-kv $0)
endsnippet

snippet fil "filter" w
(filter $0)
endsnippet

snippet sel "select" w
(select $0)
endsnippet

snippet selk "select-keys" w
(select-keys $0)
endsnippet

snippet gi "get-in" w
(get-in ${1:map} [${0:keys}])
endsnippet

snippet assi "assoc-in" w
(assoc-in $0)
endsnippet

snippet ui "update-in" w
(update-in $0)
endsnippet

snippet dist "distinct?" w
(distinct? $0)
endsnippet

snippet inter "interleave" w
(interleave $0)
endsnippet

snippet interp "interpose" w
(interpose $0)
endsnippet

snippet iter "iterate" w
(iterate $0)
endsnippet

snippet cat "concat" w
(concat $0)
endsnippet

snippet lcat "lazy-cat" w
(lazy-cat $0)
endsnippet

snippet ran "range" w
(range $0)
endsnippet

snippet seq "seq" w
(seq $0)
endsnippet

snippet lseq "lazy-seq" w
(lazy-seq $0)
endsnippet

snippet tseq "tree-seq" w
(tree-seq $0)
endsnippet

snippet part "partition" w
(partition $0)
endsnippet

snippet res "re-seq" w
(re-seq ${1:#"$2"} $0)
endsnippet

snippet ref "re-find" w
(re-find ${1:#"$2"} $0)
endsnippet

snippet rem "remove" w
(remove $0)
endsnippet

snippet rep "repeat" w
(repeat $0)
endsnippet

snippet repe "repeatedly" w
(repeatedly $0)
endsnippet

snippet ff "(first (filter))" w
(first (filter λ $0))
endsnippet

snippet grb "group-by" w
(group-by λ $0)
endsnippet

snippet zm "zipmap" w
(zipmap $0)
endsnippet

snippet fl "flatten" w
(flatten $0)
endsnippet

snippet pq "clojure.lang.PersistentQueue/EMPTY" w
clojure.lang.PersistentQueue/EMPTY
endsnippet

### Predicates and Reflection {{{1

snippet cla "class" w
(class $0)
endsnippet

snippet tp "type" w
(type $0)
endsnippet

snippet anc "ancestors" w
(ancestors $0)
endsnippet

snippet com "compare" w
(compare $0)
endsnippet

snippet ident "identical?" w
(identical? $0)
endsnippet

snippet isa "isa?" w
(isa? $0)
endsnippet

snippet em "empty?" w
(empty? $0)
endsnippet

snippet nem "not-empty" w
(not-empty $0)
endsnippet

snippet col "coll?" w
(coll? $0)
endsnippet

snippet inst "instance?" w
(instance? $0)
endsnippet

snippet ev "every?" w
(every? $0)
endsnippet

snippet nev "not-every?" w
(not-every? $0)
endsnippet

snippet som "some" w
(some λ $0)
endsnippet

snippet na "not-any?" w
(not-any? $0)
endsnippet

snippet con "contains?" w
(contains? $0)
endsnippet

snippet zer "zero?" w
(zero? $0)
endsnippet

### Functions {{{1

snippet fn "fn" w
(fn [$1] $0)
endsnippet

snippet app "apply" w
(apply $0)
endsnippet

snippet OPTS "(apply hash-map $0)" w
{:keys [$1]} (apply hash-map $0)
endsnippet

snippet comp "comp" w
(comp $0)
endsnippet

snippet par "partial" w
(partial $0)
endsnippet

snippet mem "memoize" w
(memoize $0)
endsnippet

snippet time "time" w
(time $0)
endsnippet

snippet compl "complement" w
(complement $0)
endsnippet

snippet -- "->" w
(-> $0)
endsnippet

snippet --- "->>" w
(->> $0)
endsnippet

### Definitions {{{1

snippet let "let" w
(let [$0]
	)
endsnippet

snippet letf "letfn" w
(letfn [($0)]
	)
endsnippet

snippet bind "binding" w
(binding [$0]
	)
endsnippet

snippet def "def"
(def $0)
endsnippet

snippet defc "def ^:const" w
(def ^:const $0)
endsnippet

snippet defd "def ^:dynamic"
(def ^:dynamic *$0*)
endsnippet

snippet defp "def ^:private"
(def ^:private $0)
endsnippet

snippet defo "defonce"
(defonce $0)
endsnippet

snippet defn "defn"
(defn $1 [$0])
endsnippet

snippet sdefn "s/defn :-"
(s/defn $1 :- $2
	[$0])
endsnippet

snippet defn- "defn-"
(defn- $1 [$0])
endsnippet

snippet defr "defrecord" w
(defrecord $0)
endsnippet

snippet defm "defmacro"
(defmacro $1 [$0])
endsnippet

snippet defs "defschema" w
(defschema $0)
endsnippet

snippet deft "deftest" w
(deftest test-$1
	$0)
endsnippet

snippet defsp "defspec" w
(defspec $0)
endsnippet

snippet qc "quick-check" w
(quick-check $0)
endsnippet

snippet VS "(use-fixtures :once validate-schemas)" w
(use-fixtures :once validate-schemas)
endsnippet

snippet defty "deftype" w
(deftype $1 [$0])
endsnippet

snippet defpr "defprotocol" w
(defprotocol $0)
endsnippet

snippet defproj "defproject" b
(defproject ${1:org.example/sample} "0.0.1-SNAPSHOT"
	:description "$2"
	:url "$3"
	:license {:name "MIT License"
	          :url "http://opensource.org/licenses/MIT"}
	:dependencies [[org.clojure/clojure "1.5.1"]])
endsnippet

snippet defin "definline"
(definline $1
	[$0])
endsnippet

snippet decl "declare"
(declare $0)
endsnippet

snippet kwa "keyword args" w
{:keys [$0]}
endsnippet

snippet extt "extend-type" w
(extend-type $0)
endsnippet

### Java Interop {{{1

snippet S "System/" w
(System/$0)
endsnippet

snippet T "Thread/" w
(Thread/$0)
endsnippet

snippet M "Math" w
(Math/$0)
endsnippet

snippet doto "doto" w
(doto $1
	$0)
endsnippet

snippet memfn "memfn" w
(memfn $0)
endsnippet

### Exception Handling {{{1

snippet thr "throw" w
(throw $0)
endsnippet

snippet try "try" w
(try
	$0)
endsnippet

snippet catch "cat" w
(catch ${1:Throwable} ${2:e}
	$0)
endsnippet

snippet fin "finally" w
(finally
	$0)
endsnippet

### Conditionals and Logic {{{1

snippet = "=" w
(= $0)
endsnippet

snippet if "if" w
(if $0)
endsnippet

snippet ifn "if-not" w
(if-not $0)
endsnippet

snippet N "not" w
(not $0)
endsnippet

snippet NE "not=" w
(not= $0)
endsnippet

snippet wh "when" w
(when $0)
endsnippet

snippet wn "when-not" w
(when-not $0)
endsnippet

snippet ifl "if-let" w
(if-let [$0]
	(comment then)
	(comment else))
endsnippet

snippet wl "when-let" w
(when-let [$0]
	)
endsnippet

snippet ws "when-some" w
(when-some [$0]
	)
endsnippet

snippet cond "cond" w
(cond $0)
endsnippet

snippet condp "condp" w
(condp $0)
endsnippet

snippet case "case" w
(case $0)
endsnippet

snippet and "and" w
(and $0)
endsnippet

snippet or "or" w
(or $0)
endsnippet

### Expressions, Iteration, and Looping {{{1

snippet do "do exprs" w
(do $0)
endsnippet

snippet dos "doseq" w
(doseq [$0]
	)
endsnippet

snippet dot "dotimes" w
(dotimes [$0]
	)
endsnippet

snippet dor "dorun" w
(dorun $0)
endsnippet

snippet doa "doall" w
(doall $0)
endsnippet

snippet for "for" w
(for [$0])
endsnippet

snippet fora "for-all" w
(for-all [$0])
endsnippet

snippet lo "loop" w
(loop [$0]
	)
endsnippet

snippet rec "recur" w
(recur$0)
endsnippet

snippet whi "while" w
(while $0)
endsnippet

snippet tram "trampoline" w
(trampoline $0)
endsnippet

### Concurrency {{{1

snippet sleep "Thread/sleep" w
(Thread/sleep $0)
endsnippet

snippet lock "locking" w
(locking $0)
endsnippet

snippet addw "add-watch" w
(add-watch $0)
endsnippet

snippet remw "remove-watch" w
(remove-watch $0)
endsnippet

snippet fut "future" w
(future$0)
endsnippet

snippet futc "future-cancel" w
(future-cancel $0)
endsnippet

snippet dosy "dosync" w
(dosync
	$0)
endsnippet

snippet aw "await" w
(await $0)
endsnippet

snippet comm "commute" w
(commute $0)
endsnippet

snippet sw "swap!" w
(swap! $0)
endsnippet

snippet se "set!" w
(set! $0)
endsnippet

snippet rese "reset!" w
(reset! $0)
endsnippet

snippet at "atom" w
(atom $0)
endsnippet

### Strings and Numbers {{{1

snippet st "str" w
(str $0)
endsnippet

snippet prs "pr-str" w
(pr-str $0)
endsnippet

snippet fmt "format" w
(format ${1:"$2"} $0)
endsnippet

snippet kw "keyword" w
(keyword $0)
endsnippet

snippet rand "rand" w
(rand $0)
endsnippet

snippet randi "rand-int" w
(rand-int $0)
endsnippet

snippet randn "rand-nth" w
(rand-nth $0)
endsnippet

### IO {{{1

snippet io "io!" w
(io! $0)
endsnippet

snippet pr "prn" w
(prn $0)
endsnippet

snippet pl "println"
(println $0)
endsnippet

snippet (pl "println" i
(println
endsnippet

snippet ERR "(.println System/err …)"
(.println System/err $0)
endsnippet

snippet (ERR "(.println System/out" i
(.println System/err
endsnippet

snippet OUT "(.println System/out …)"
(.println System/out $0)
endsnippet

snippet (OUT "(.println System/out" i
(.println System/out
endsnippet

snippet warn "warn" w
(binding [*out* *err*]
	$0)
endsnippet

snippet pf "printf" w
(printf ${1:"$2"} $0)
endsnippet

snippet pp "clojure.pprint/pprint" w
(clojure.pprint/pprint $0)
endsnippet

snippet pt "clojure.pprint/print-table" w
(clojure.pprint/print-table $0)
endsnippet

snippet wos "with-out-str" w
(with-out-str $0)
endsnippet

snippet wo "with-open" w
(with-open [$1]
	$0)
endsnippet

snippet sl "slurp" w
(slurp $0)
endsnippet

snippet sp "spit" w
(spit $0)
endsnippet

### Testing {{{1

snippet is "clojure.test/is" w
(is $0)
endsnippet

snippet test "testing" w
(testing "$0"
	)
endsnippet

### Debugging {{{1

snippet P "guns.repl/p"
(guns.repl/p $0)
endsnippet

snippet (P "guns.repl/p" i
(guns.repl/p
endsnippet

snippet perr "guns.repl/perr"
(guns.repl/perr $0)
endsnippet

snippet (perr "guns.repl/perr" i
(guns.repl/perr
endsnippet

snippet DL "guns.repl/dump-locals" w
(guns.repl/dump-locals)
endsnippet

snippet BM "guns.repl/bm" w
(guns.repl/bm $0)
endsnippet

snippet trace "guns.repl/trace"
(guns.repl/trace $0)
endsnippet

snippet (trace "guns.repl/trace" i
(guns.repl/trace
endsnippet

snippet SP "#spy/p" w
#spy/p $0
endsnippet

snippet SD "#spy/d" w
#spy/d $0
endsnippet

snippet ST "#spy/t" w
#spy/t $0
endsnippet

### ClojureScript {{{1

snippet .log ".log" w
(js/console.log $0)
endsnippet
