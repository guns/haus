snippet f "function" b
${1:ALIGN(16)
};; ${2:type} ${3:func}($0)
$3:
	; push rbp
	; push rbx
	; push r12
	; push r13
	; push r14
	; push r15

ret:
	; pop r15
	; pop r14
	; pop r13
	; pop r12
	; pop rbx
	; pop rbp
	ret
endsnippet

snippet c "call with push/pop" b
	; push rax
	; push rcx
	; push rdx
	; push rdi
	; push rsi
	; push r8
	; push r9
	; push r10
	; push r11
	call $0
	; pop r11
	; pop r10
	; pop r9
	; pop r8
	; pop rsi
	; pop rdi
	; pop rdx
	; pop rcx
	; pop rax
endsnippet

snippet def "%define" b
%define $0
endsnippet

snippet ifd "%ifdef" b
%ifdef $0
%endif
endsnippet

snippet ifn "%ifndef" b
%ifndef $0
%endif
endsnippet

snippet once "include guard" b
%ifndef $1
%define ${1:__`!v toupper(substitute(expand("%:t"), '\v[^A-Za-z0-9_]', '_', 'g'))`__} 1
$0
%endif
endsnippet

snippet inc "include" b
%include "$0"
endsnippet

snippet use "use" b
%use "$0"
endsnippet

snippet sec "section ." b
section .
endsnippet

snippet t ".text" b
section .text
	$0
endsnippet

snippet d ".data" b
section .data
	$0
endsnippet

snippet b ".bss" b
section .bss
	$0
endsnippet

snippet seg "segment ." b
segment .
endsnippet

snippet eq "equ" b
$1 equ $0
endsnippet

snippet m "%macro" b
%macro ${1:nparams}
	$0
%endmacro
endsnippet

snippet al "align 16" w
ALIGN(16)
endsnippet

snippet deb "int3" w
int3 ;;; BREAKPOINT
endsnippet
