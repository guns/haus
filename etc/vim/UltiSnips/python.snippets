snippet APP "Command line application template" b
#!/usr/bin/env python
#
# Copyright (c) `date +%Y` Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

"""
$0
"""

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from typing import Sequence
import sys


def parser() -> ArgumentParser:
	parser = ArgumentParser(description=__doc__)
	parser.formatter_class = RawDescriptionHelpFormatter
	return parser


def main(args: Sequence[str]) -> int:
	opts = parser().parse_args(args)
	return 0


if __name__ == "__main__":
	sys.exit(main(sys.argv[1:]))
endsnippet

snippet #! "#!" w
#!/usr/bin/env python
endsnippet

snippet def "def" b
def ${1}(${2}) -> ${3}:
	$0
endsnippet

snippet defs "def (self)" b
def ${1}(self${2}) -> $3:
	$0
endsnippet

snippet defc "def (cls)" w
@classmethod
def ${1}(cls${2}) -> ${3}:
	$0
endsnippet

snippet adef "async def" w
async def ${1}(${2}) -> ${3}:
	$0
endsnippet

snippet for "for" w
for $1 in $2:
	$0
endsnippet

snippet wh "while" w
while $1:
	$0
endsnippet

snippet ra "range()" w
range($0)
endsnippet

snippet l "len" w
len($0)
endsnippet

snippet pr "print" w
print($0)
endsnippet

snippet warn "print(..., file=sys.stderr)" w
print($0, file=sys.stderr)
endsnippet

snippet en "enumerate" w
enumerate($0)
endsnippet

snippet if "if" w
if $1:
	$0
endsnippet

snippet el "else" w
else:
	$0
endsnippet

snippet eli "elif" w
elif $1:
	$0
endsnippet

snippet n "None" w
None
endsnippet

snippet t "True" w
True
endsnippet

snippet f "False" w
False
endsnippet

snippet r "return" w
return $0
endsnippet

snippet s "self." w
self.
endsnippet

snippet im "import" b
import $0
endsnippet

snippet ift "if TYPE_CHECKING:" w
if TYPE_CHECKING:
	$0
endsnippet

snippet fr "fr" b
from $1 import $0
endsnippet

snippet frf "from __future__ import" b
from __future__ import $0
endsnippet

snippet _d "__doc__" w
__doc__
endsnippet

snippet _n "__name__" w
__name__
endsnippet

snippet _m "__main__" w
__main__
endsnippet

snippet _f "__file__" w
__file__
endsnippet

snippet ifn "if __name__ == __main__" b
if __name__ == "__main__":
	$0
endsnippet

snippet arg "parser.add_argument" w
${1:parser}.add_argument($0)
endsnippet

snippet argt "parser.add_argument(action='store_true')" w
parser.add_argument($1, action="store_true"$0)
endsnippet

snippet setd "parser.set_defaults" w
parser.set_defaults($0)
endsnippet

snippet doc "triple quoted string" w
"""
$0
"""
endsnippet

snippet w "with" w
with $1 as $2:$0
endsnippet

snippet wo "with open" w
with open(${1}) as ${2:f}:
	$0
endsnippet

snippet try "try:" w
try:
	$0
finally:
endsnippet

snippet exc "except:" w
except$1:
	$0
endsnippet

snippet fin "finally:" w
finally:
	$0
endsnippet

snippet P "Path" w
Path($0)
endsnippet

snippet rt "Path().read_text()" w
Path($0).read_text()
endsnippet

snippet RT "reveal_type" w
reveal_type($0)
endsnippet

snippet osp "osp" w
os.path.
endsnippet

snippet bas "os.path.basename" w
os.path.basename($0)
endsnippet

snippet dir "os.path.dirname" w
os.path.dirname($0)
endsnippet

snippet abs "os.path.abspath" w
os.path.abspath($0)
endsnippet

snippet nor "os.path.normpath" w
os.path.normpath($0)
endsnippet

snippet rp "os.path.realpath" w
os.path.realpath($0)
endsnippet

snippet pj "os.path.join" w
os.path.join($0)
endsnippet

snippet isd "os.path.isdir" w
os.path.isdir($0)
endsnippet

snippet isf "os.path.isfile" w
os.path.isfile($0)
endsnippet

snippet M "match" w
match $1:
	$0
	case _:
endsnippet

snippet case "case" w
case $1:
	$0
endsnippet

snippet deb "pdb" w
breakpoint()
endsnippet

snippet bp "pdb" w
breakpoint()
endsnippet

snippet dump "json.dump" w
with open("${1:_debug.json}", "a") as _f: json.dump($0, _f, sort_keys=2, indent=2, default=str)
endsnippet

snippet dumps "json.dump stderr" w
json.dump($0, fp=sys.stderr, indent=2, sort_keys=True, default=str)
endsnippet

snippet sub "subprocess" w
subprocess.
endsnippet

snippet run "subprocess.run()" w
subprocess.run($0)
endsnippet

snippet rai "raise" w
raise ${1:RuntimeError($2)}
endsnippet

snippet rec "re.compile" w
re.compile($0)
endsnippet

snippet rem "re.match" w
re.match($0)
endsnippet

snippet res "re.search" w
re.search($0)
endsnippet

snippet refm "re.fullmatch" w
re.fullmatch($0)
endsnippet

snippet fn "lambda" w
lambda $1: $0
endsnippet

snippet ft "functools" w
functools.$0
endsnippet

snippet it "itertools" w
itertools.$0
endsnippet

snippet defgrp "def groupby" w
def groupby(coll: Collection[Any], key: Callable[[Any], Any]) -> dict[Any, list[Any]]:
	d: dict[Any, list[Any]] = {}
	for item in coll:
		k = key(item)
		if k in d:
			d[k].append(item)
		else:
			d[k] = [item]
	return d
endsnippet

snippet op "operator" w
operator.
endsnippet

snippet dd "collections.defaultdict" w
collections.defaultdict($0)
endsnippet

snippet deq "deque" w
collections.deque
endsnippet

snippet red "functools.reduce" w
functools.reduce($0)
endsnippet

snippet li "list[]" w
list[$0]
endsnippet

snippet di "dict[]" w
dict[$0]
endsnippet

snippet m "math" w
math.
endsnippet

snippet cl "class" b
class $1:
	$0
endsnippet

snippet dcl "dataclasses.dataclass" b
@dataclasses.dataclass(${1:frozen=True, }${2:kw_only=True})
class $3:
	$0
endsnippet

snippet dclr "dataclasses.replace" w
dataclasses.replace($0)
endsnippet

snippet dclf "dataclasses.field" w
dataclasses.field(${1:default_factory=}$0)
endsnippet

snippet nt "namedtuple" b
class $1(NamedTuple):
	$0
endsnippet

snippet enum "enum" w
class ${1}(Enum):
	$0
endsnippet

snippet au "auto()" w
auto()
endsnippet

snippet ini "__init__" b
def __init__(self, $1):
	$0
endsnippet

snippet _iter "__iter__" b
def __iter__(self) -> Iterable[$1]:
	$0
endsnippet

snippet ent "__enter__" b
def __enter__(self) -> $1:
	$0
endsnippet

snippet EXI "__exit__ full" b
def __exit__(
	self,
	exc_type: Optional[type[BaseException]],
	exc_value: Optional[BaseException],
	traceback: Optional[types.TracebackType],
) -> None:
	$0
endsnippet

snippet exi "__exit__ light" b
def __exit__(self, *args: object) -> None:
	$0
endsnippet

snippet testcl "class ... unittest.TestCase" b
class $1(unittest.TestCase):
	def setUp(self) -> None:
		self.maxDiff = None

	$0
endsnippet

snippet deft "def test" b
def test_${2: }$1(self) -> None:
	tests = {
		$0
	}

	for test in tests:
		pass
endsnippet

snippet kv "key: value" w
"$1": $0
endsnippet

snippet ass "assert" w
assert $0
endsnippet

snippet ase "assertEqual" w
self.assertEqual($0)
endsnippet

snippet asr "assertRegex" w
self.assertRegex($0)
endsnippet

snippet asra "assertRaises" w
self.assertRaises($0)
endsnippet

snippet join "join" w
"$1".join($0)
endsnippet

snippet ap "append" w
append($0)
endsnippet

snippet apl "appendleft" w
appendleft($0)
endsnippet

snippet ex "extend" w
extend($0)
endsnippet

snippet gl "glob" w
glob.glob($0)
endsnippet

snippet thr "threading.Thread" w
threading.Thread($0)
endsnippet

snippet thrl "threading.Lock" w
threading.Lock()
endsnippet

snippet urlop "urllib.request.urlopen" w
request.urlopen($0)
endsnippet

snippet O "Optional[]" w
Optional[$0]
endsnippet

snippet map "map" w
Mapping[$0]
endsnippet

snippet pp "pprint" w
import pprint; pprint.pprint($0, stream=sys.stderr)
endsnippet

snippet supp "contextlib.suppress" w
with contextlib.suppress($1):
	$0
endsnippet

snippet seq "Sequence[]" w
Sequence[$0]
endsnippet

snippet col "Collection[]" w
Collection[$0]
endsnippet

snippet iter "Iterable[]" w
Iterable[$0]
endsnippet

snippet cal "Callable[]" w
Callable[$0]
endsnippet

snippet mpt "types.MappingProxyType" w
types.MappingProxyType($0)
endsnippet

snippet defp "@property def" b
@property
def $1(self$2) -> $3:
	$0
endsnippet

snippet _a "__all__" w
__all__ = [$0]
endsnippet

snippet asi "asyncio" w
asyncio.
endsnippet

snippet dt "datetime" w
datetime
endsnippet

snippet now "now" w
datetime.now(timezone.utc)
endsnippet

snippet td "timedelta" w
timedelta
endsnippet

snippet tb "traceback" w
traceback
endsnippet

snippet 00 "0.0.0.0/0" w
0.0.0.0/0
endsnippet
