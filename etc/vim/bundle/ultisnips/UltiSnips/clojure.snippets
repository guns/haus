###
### Clojure
### http://java.ociweb.com/mark/clojure/article.html
###

clearsnippets { [ ({ ([

### Meta {{{1

snippet #! "#!/usr/bin/env lein-exec" b
#!/usr/bin/env lein-exec
endsnippet

snippet loadf "load-file" w
(clojure.core/load-file "$0")
endsnippet

snippet load "load" w
(clojure.core/load "$0")
endsnippet

snippet ns "ns" b
(ns ${1:`!v tr(substitute(expand("%:p:r"), '\v.*(src|test)/', '', ''), '/_', '.-')`}$0)
endsnippet

snippet NS "ns with schema.core" w
(ns ${1:`!v tr(substitute(expand("%:p:r"), '\v.*(src|test)/', '', ''), '/_', '.-')`}
	(:require [schema.core :refer [defn]])
	(:refer-clojure :exclude [defn]))
endsnippet

snippet nst "test ns"
(ns ${1:`!v tr(substitute(expand("%:p:r"), '\v.*(src|test)/', '', ''), '/_', '.-')`}
	(:require [$0]
	          [clojure.test :as test :refer [deftest is testing]]))
endsnippet

snippet req "require"
(require '$0)
endsnippet

snippet :r ":require"
(:require [$0])
endsnippet

snippet imp "import"
(import '$0)
endsnippet

snippet :i ":import"
(:import ($0))
endsnippet

snippet rc "refer-clojure"
(refer-clojure :exclude [$0])
endsnippet

snippet :rc ":refer-clojure"
(:refer-clojure :exclude [$0])
endsnippet

snippet me "meta" w
(meta $0)
endsnippet

snippet wm "with-meta" w
(with-meta $0)
endsnippet

snippet main "main" w
(defn -main [& argv]
	$0)
endsnippet

snippet CC "comment" w
(comment
	$0
	)
endsnippet

snippet SH "clojure.java.shell/sh" w
(clojure.java.shell/sh $0)
endsnippet

### Collections {{{1

snippet conj "conj" w
(conj ${1:coll} ${0:values})
endsnippet

snippet co "count" w
(count ${0:coll})
endsnippet

snippet cons "cons" w
(cons $0)
endsnippet

snippet rev "reverse" w
(reverse ${0:coll})
endsnippet

snippet fi "first" w
(first ${0:coll})
endsnippet

snippet sec "second" w
(second ${0:coll})
endsnippet

snippet la "last" w
(last ${0:coll})
endsnippet

snippet nt "nth" w
(nth $0)
endsnippet

snippet nex "next" w
(next ${0:coll})
endsnippet

snippet re "rest" w
(rest ${0:coll})
endsnippet

snippet butl "butlast" w
(butlast ${0:coll})$
endsnippet

snippet dr "drop" w
(drop ${1:n} ${0:coll})
endsnippet

snippet dl "drop-last" w
(drop-last ${0:[s] [n s]})
endsnippet

snippet dw "drop-while" w
(drop-while ${0:λ} ${1:coll})
endsnippet

snippet ta "take" w
(take ${1:n} ${0:coll})
endsnippet

snippet tl "take-last" w
(take-last ${1:n} ${0:coll})
endsnippet

snippet tn "take-nth" w
(take-nth ${1:pos} ${0:coll})
endsnippet

snippet tw "take-while" w
(take-while λ $0)
endsnippet

snippet nthn "nthnext" w
(nthnext ${1:coll} ${0:n})
endsnippet

snippet into "into" w
(into ${1:to-coll} ${0:from-coll})
endsnippet

snippet pe "peek" w
(peek ${0:coll})
endsnippet

snippet pop "pop" w
(pop ${0:coll})
endsnippet

snippet ass "assoc" w
(assoc ${1:map|vec} ${2:key|idx} ${0:val})
endsnippet

snippet dis "dissoc" w
(dissoc ${1:map} ${0:keys})
endsnippet

snippet get "get" w
(get $0)
endsnippet

snippet geti "get-in" w
(get-in ${1:coll} [${0:keys}])
endsnippet

snippet sv "subvec" w
(subvec ${1:vec} ${0:[start] [start end]})
endsnippet

snippet set "set" w
(set ${0:coll})
endsnippet

snippet hs "hash-set" w
(hash-set ${0:items})
endsnippet

snippet ss "sorted-set" w
(sorted-set ${0:items})
endsnippet

snippet disj "disj" w
(disj ${1:set} ${0:items})
endsnippet

snippet dif "difference" w
(difference ${0:sets})
endsnippet

snippet ind "index" w
(index ${1:map} [${0:keys}])
endsnippet

snippet inters "intersection" w
(intersection ${0:sets})
endsnippet

snippet jo "join" w
(join $0)
endsnippet

snippet mapinv "map-invert" w
(map-invert ${0:map})
endsnippet

snippet pro "project" w
(project ${1:map} [${0:keys}])
endsnippet

snippet ren "rename" w
(rename ${1:relation} {${2::old} ${0::new}})
endsnippet

snippet renk "rename-keys" w
(rename-keys ${1:map} {${2:old} ${0::new}})
endsnippet

snippet uni "union" w
(union ${0:sets})
endsnippet

snippet am "array-map" w
(array-map $0)
endsnippet

snippet hm "hash-map" w
(hash-map $0)
endsnippet

snippet sm "sorted-map" w
(sorted-map $0)
endsnippet

snippet smb "sorted-map-by" w
(sorted-map-by ${0:λ} ${1:coll})
endsnippet

snippet ks "keys" w
(keys ${0:map})
endsnippet

snippet vs "vals" w
(vals ${0:map})
endsnippet

snippet vec "vec" w
(vec ${0:coll})
endsnippet

snippet vect "vector" w
(vector ${0:items})
endsnippet

snippet lis "list" w
(list ${0:items})
endsnippet

snippet quo "quote" w
(quote (${0:items}))
endsnippet

snippet map "map" w
(map λ $0)
endsnippet

snippet mapv "mapv" w
(mapv λ $0)
endsnippet

snippet mapc "mapcat" w
(mapcat λ $0)
endsnippet

snippet red "reduce" w
(reduce λ $0)
endsnippet

snippet fil "filter" w
(filter λ $0)
endsnippet

snippet sel "select" w
(select λ $0)
endsnippet

snippet selk "select-keys" w
(select-keys ${1:map} ${0:keys})
endsnippet

snippet gi "get-in" w
(get-in ${1:map} [${0:keys}])
endsnippet

snippet ai "assoc-in" w
(assoc-in ${1:map} [${2:keys}] ${0:value})
endsnippet

snippet ui "update-in" w
(update-in ${1:map} [${2:keys}] ${0:λ args})
endsnippet

snippet st "struct" w
(struct ${1:type} ${0:values})
endsnippet

snippet cst "create-struct" w
(create-struct ${0:keys})
endsnippet

snippet acc "accessor" w
(accessor ${1:struct} ${0:key})
endsnippet

snippet cyc "cycle" w
(cycle ${0:coll})
endsnippet

snippet dist "distinct" w
(distinct ${0:coll})
endsnippet

snippet int "interleave" w
(interleave ${0:colls})
endsnippet

snippet interp "interpose" w
(interpose ${1:sep} ${0:coll})
endsnippet

snippet iter "iterate" w
(iterate $0)
endsnippet

snippet cat "concat" w
(concat ${0:colls})
endsnippet

snippet lc "lazy-cat" w
(lazy-cat ${0:colls})
endsnippet

snippet ran "range" w
(range $0)
endsnippet

snippet seq "seq" w
(seq ${0:coll})
endsnippet

snippet ls "lazy-seq" w
(lazy-seq ${0:colls})
endsnippet

snippet lin "line-seq" w
(line-seq ${0:reader})
endsnippet

snippet tseq "tree-seq" w
(tree-seq ${0:[branch? children root]})
endsnippet

snippet part "partition" w
(partition $0)
endsnippet

snippet res "re-seq" w
(re-seq ${1:#"$2"} ${0:string})
endsnippet

snippet ref "re-find" w
(re-find ${1:#"$2"} ${0:string})
endsnippet

snippet rem "remove" w
(remove λ $0)
endsnippet

snippet rep "repeat" w
(repeat ${0:[x] [n x]})
endsnippet

snippet ff "(first (filter))" w
(first (filter λ $0))
endsnippet

snippet grb "group-by" w
(group-by λ $0)
endsnippet

snippet zm "zipmap" w
(zipmap $0)
endsnippet

snippet fl "flatten" w
(flatten $0)
endsnippet

snippet pq "clojure.lang.PersistentQueue/EMPTY" w
clojure.lang.PersistentQueue/EMPTY
endsnippet

### Predicates and Reflection {{{1

snippet cla "class" w
(class ${0:item})
endsnippet

snippet tp "type" w
(type $0)
endsnippet

snippet anc "ancestors" w
(ancestors ${0:tag})
endsnippet

snippet com "compare" w
(compare ${1:a} ${0:b})
endsnippet

snippet ident "identical?" w
(identical? ${1:a} ${0:b})
endsnippet

snippet pre "predicate?" w
(${1:test}? $0)
endsnippet

snippet isa "isa?" w
(isa? ${1:child} ${0:parent})
endsnippet

snippet em "empty?" w
(empty? ${0:coll})
endsnippet

snippet nem "not-empty" w
(not-empty ${0:coll})
endsnippet

snippet col "coll?" w
(coll? ${0:item})
endsnippet

snippet inst "instance?" w
(instance? ${1:class} ${0:item})
endsnippet

snippet ev "every?" w
(every? ${1:λ} ${0:coll})
endsnippet

snippet nev "not-every?" w
(not-every? ${1:λ} ${0:coll})
endsnippet

snippet som "some" w
(some λ $0)
endsnippet

snippet na "not-any?" w
(not-any? ${1:λ} ${0:coll})
endsnippet

snippet con "contains?" w
(contains? ${1:coll} ${0:key})
endsnippet

snippet zer "zero?" w
(zero? ${0:item})
endsnippet

snippet refl "clojure.reflect/reflect" w
(clojure.reflect/reflect $0)
endsnippet

### Functions {{{1

snippet fn "fn" w
(fn [$1] $0)
endsnippet

snippet app "apply" w
(apply ${1:λ} ${0:args})
endsnippet

snippet comp "comp" w
(comp $0)
endsnippet

snippet par "partial" w
(partial ${1:λ} ${0:args})
endsnippet

snippet mem "memoize" w
(memoize ${0:λ})
endsnippet

snippet tim "time" w
(time ${0:expr})
endsnippet

snippet compl "complement" w
(complement ${0:λ})
endsnippet

snippet -- "->" w
(-> $0)
endsnippet

snippet --- "->>" w
(->> $0)
endsnippet

### Definitions {{{1

snippet let "let" w
(let [$0]
	)
endsnippet

snippet letf "letfn" w
(letfn [($0)]
	)
endsnippet

snippet bind "binding" w
(binding [$0]
	)
endsnippet

snippet def "def ^:const"
(def ${1:^:const }$0)
endsnippet

snippet defd "def ^:dynamic"
(def ^:dynamic *$0*)
endsnippet

snippet defo "defonce"
(defonce $0)
endsnippet

snippet defn "defn"
(defn $1 [$0])
endsnippet

snippet DEFN "defn :-"
(defn $1 :- $2
	[$0])
endsnippet

snippet defn- "defn-"
(defn- $1 [$0])
endsnippet

snippet defr "defrecord" w
(defrecord $0)
endsnippet

snippet defm "defmacro"
(defmacro $1 [$0])
endsnippet

snippet deft "deftest" w
(deftest test-$1
	$0)
endsnippet

snippet defty "deftype" w
(deftype $1 [$0])
endsnippet

snippet defp "defprotocol" w
(defprotocol $0)
endsnippet

snippet defin "definline"
(definline $1
	[$0])
endsnippet

snippet decl "declare"
(declare ${0:func-names})
endsnippet

snippet kwa "keyword args" w
{:keys [$0]}
endsnippet

### Java Interop {{{1

snippet new "new" w
(new ${1:JavaClass} ${0:args})
endsnippet

snippet F "Static/method" w
(${1:Class}/${0:method})
endsnippet

snippet M "Math" w
(Math/$0)
endsnippet

snippet . "." w
(. ${1:object} ${2:method} ${0:args})
endsnippet

snippet .. ".." w
(.. ${1:object} ${0:methods})
endsnippet

snippet doto "doto" w
(doto ${1:object}
	$0)
endsnippet

snippet memfn "memfn" w
(memfn ${1:method} ${0:args})
endsnippet

### Exception Handling {{{1

snippet thr "throw" w
(throw ${0:exception})
endsnippet

snippet try "try" w
(try
	$0)
endsnippet

snippet catch "cat" w
(catch ${1:class} ${2:e}
	$0)
endsnippet

snippet fin "finally" w
(finally
	$0)
endsnippet

### Conditionals and Logic {{{1

snippet = "=" w
(= $0)
endsnippet

snippet if "if" w
(if $0)
endsnippet

snippet ifn "if-not" w
(if-not $0)
endsnippet

snippet not "not" w
(not ${0:e})
endsnippet

snippet ne "not=" w
(not= ${1:a} ${0:b})
endsnippet

snippet eq "=" w
(= ${1:a} ${0:b})
endsnippet

snippet wh "when" w
(when ${0:cond})
endsnippet

snippet wn "when-not" w
(when-not ${0:cond})
endsnippet

snippet ifl "if-let" w
(if-let [$0]
	(comment then)
	(comment else))
endsnippet

snippet wl "when-let" w
(when-let [$0]
	)
endsnippet

snippet cond "cond" w
(cond $0 :else )
endsnippet

snippet condp "condp" w
(condp ${0:λ} value
	match [result | [:>> λ]]
	(comment else))
endsnippet

snippet case "case" w
(case ${0:value}
	)
endsnippet

snippet and "and" w
(and $0)
endsnippet

snippet or "or" w
(or $0)
endsnippet

### Expressions, Iteration, and Looping {{{1

snippet do "do exprs" w
(do $0)
endsnippet

snippet dos "doseq" w
(doseq [$0]
	)
endsnippet

snippet dot "dotimes" w
(dotimes [$0]
	)
endsnippet

snippet dor "dorun" w
(dorun ${0:[coll] [n coll]})
endsnippet

snippet doa "doall" w
(doall ${0:[coll] [n coll]})
endsnippet

snippet for "for" w
(for [$0])
endsnippet

snippet lo "loop" w
(loop [$0]
	)
endsnippet

snippet rec "recur" w
(recur$0)
endsnippet

snippet whi "while" w
(while ${0})
endsnippet

snippet tram "trampoline" w
(trampoline ${0:λ args})
endsnippet

### Concurrency {{{1

snippet dosy "dosync" w
(dosync
	$0)
endsnippet

snippet aw "await" w
(await ${0:agent})
endsnippet

snippet comm "commute" w
(commute ${1:hash-or-var} ${0:fbody})
endsnippet

snippet sw "swap!" w
(swap! $0)
endsnippet

snippet se "set!" w
(set! $0)
endsnippet

snippet rese "reset!" w
(reset! $0)
endsnippet

snippet at "atom" w
(atom $0)
endsnippet

### Strings and Numbers {{{1

snippet str "str" w
(str ${0:items})
endsnippet

snippet prs "pr-str" w
(pr-str $0)
endsnippet

snippet fmt "format" w
(format ${1:"$2"} ${0:args})
endsnippet

snippet kw "keyword" w
(keyword $0)
endsnippet

snippet rand "rand" w
(rand $0)
endsnippet

snippet randi "rand-int" w
(rand-int $0)
endsnippet

snippet randn "rand-nth" w
(rand-nth $0)
endsnippet

### IO {{{1

snippet io "io!" w
(io! $0)
endsnippet

snippet pr "prn" w
(prn $0)
endsnippet

snippet pl "println" w
(println $0)
endsnippet

snippet warn "warn" w
(binding [*out* *err*] (prn $0))
endsnippet

snippet pf "printf" w
(printf ${1:"$2"} ${0:args})
endsnippet

snippet pp "clojure.pprint/pprint" w
(clojure.pprint/pprint $0)
endsnippet

snippet pt "clojure.pprint/print-table" w
(clojure.pprint/print-table $0)
endsnippet

snippet wos "with-out-str" w
(with-out-str $0)
endsnippet

snippet wo "with-open" w
(with-open [${0:name init ...}]
	)
endsnippet

snippet sl "slurp" w
(slurp ${0:file})
endsnippet

snippet sp "spit" w
(spit $0)
endsnippet

### Testing {{{1

snippet is "clojure.test/is" w
(is $0)
endsnippet

snippet test "testing" w
(testing "$0"
	)
endsnippet

### Debugging {{{1

snippet P "user/p" w
(user/p $0)
endsnippet

snippet DL "user/dump-locals" w
(user/dump-locals)
endsnippet

snippet BM "user/bm" w
(user/bm $0)
endsnippet

snippet trace "user/trace" w
(user/trace $0)
endsnippet

snippet SP "#spy/p" w
#spy/p
endsnippet

snippet SD "#spy/d" w
#spy/d
endsnippet

snippet ST "#spy/t" w
#spy/t
endsnippet

### ClojureScript {{{1

snippet .log ".log" w
(.log js/console (pr-str $0))
endsnippet
