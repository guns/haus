(in-ns 'timl.core)

(declare *1 *2 *3 *e)

(defn not [x] (if x false true))

(defn eval [form] (#*timl#eval form))

(defn constantly [x] (fn [& args] x))

(defn partial
  ([f] f)
  ([f arg1]
   (fn [& args] (apply f arg1 args)))
  ([f arg1 arg2]
   (fn [& args] (apply f arg1 arg2 args)))
  ([f arg1 arg2 arg3]
   (fn [& args] (apply f arg1 arg2 arg3 args)))
  ([f arg1 arg2 arg3 & more]
   (fn [& args] (apply f arg1 arg2 arg3 (concat more args)))))

(defn complement [f]
  (fn [& rest] (not (apply f rest))))

(defn comp
  ([f] f)
  ([f & fns] (fn [& args] (f (apply (apply comp fns) args)))))
