(in-ns 'timl.core)

(defmacro lazy-seq [& body]
  (list '#*timl#lazy_seq#create (cons 'fn* (cons [] body))))

(defmacro let [& args] (cons 'let* args))

(defn concat
  ([] (lazy-seq nil))
  ([x] (lazy-seq x))
  ([x y]
    (lazy-seq
      (let [s (seq x)]
        (if s
          (if (chunked-seq? s)
            (chunk-cons (chunk-first s) (concat (chunk-rest s) y))
            (cons (first s) (concat (rest s) y)))
          y))))
  ([x y & zs]
     (let [cat (fn cat [xys zs]
                 (lazy-seq
                   (let [xys (seq xys)]
                     (if xys
                       (if (chunked-seq? xys)
                         (chunk-cons (chunk-first xys) (cat (chunk-rest xys) zs))
                         (cons (first xys) (cat (rest xys) zs)))
                       (if zs
                         (cat (first zs) (next zs)))))))]
       (cat (concat x y) zs))))

(defmacro defn- [name & fdecl]
  `(defn ~(with-meta name (assoc (meta name) :private true)) ~@fdecl))

(defmacro deftype [name slots & more]
  `(let [type# (deftype* ~name ~slots)]
     type#))

(defmacro when [test & body]
  `(if ~test (do ~@body)))

(defmacro if-let [bindings then & else]
  (let [form (first bindings)
        tst (first (rest bindings))]
    `(let [temp# ~tst]
      (if temp#
        (let [~form temp#] ~then) ~@else))))

(defmacro when-let [bindings & body]
  (let [form (first bindings)
        tst (first (rest bindings))]
    `(let [temp# ~tst]
      (if temp#
        (let [~form temp#] ~@body)))))

(defmacro or
  ([] nil)
  ([x] x)
  ([x & xs] `(let [or# ~x] (if or# or# (or ~@xs)))))

(defmacro and
  ([] true)
  ([x] x)
  ([x & xs] `(let [and# ~x] (if and# (and ~@xs) and#))))

(defn map [f coll]
  (lazy-seq
    (when-let [s (seq coll)]
      (if (can? s chunk-first)
        (concat
          (#*timl#coll#mutating_map f (chunk-first s))
          (map f (chunk-rest s)))
        (cons (f (first s)) (map f (rest s)))))))

(defn dorun
  ([coll]
   (when (seq coll)
     (if (chunked-seq? coll)
       (recur (chunk-rest coll))
       (recur (next coll)))))
  ([n coll]
   (when (and (seq coll) (pos? n))
     (recur (dec n) (next coll)))))

(defn doall
  ([coll]
   (dorun coll)
   coll)
  ([n coll]
   (dorun n coll)
   coll))

(defn nthrest [coll n]
  (if (and (pos? n) (seq coll))
    (recur (rest coll) (dec n))
    coll))

(defn take [n coll]
  (lazy-seq
    (when (pos? n)
      (when-let [s (seq coll)]
        (cons (first s) (take (dec n) (rest s)))))))

(defn drop
  [n coll]
  (let [step (fn [n coll]
              (if-let [s (seq coll)]
                (if (pos? n)
                  (recur (dec n) (rest s))
                  s)))]
    (lazy-seq (step n coll))))

(defn take-while [pred coll]
  (lazy-seq
    (when-let [s (seq coll)]
      (when (pred (first s))
        (cons (first s) (take-while pred (rest s)))))))

(defn partition
  ([n coll]
   (partition n n coll))
  ([n step coll]
   (lazy-seq
     (when-let [s (seq coll)]
       (let [p (doall (take n s))]
         (when (= n (count p))
           (cons p (partition n step (nthrest s step))))))))
  ([n step pad coll]
   (lazy-seq
     (when-let [s (seq coll)]
       (let [p (doall (take n s))]
         (if (= n (count p))
           (cons p (partition n step pad (nthrest s step)))
           (list (take n (concat p pad)))))))))

(defmacro declare [& names]
  `(do ~@(map (fn [n] (list 'def n)) names)))

(defmacro loop [flat & body]
  (let [bindings (partition 2 flat)]
    `((fn ~(vec (map first bindings)) ~@body) ~@(vec (map (fn [x] (first (rest x))) bindings)))))

(defn some
  [pred coll]
  (when (seq coll)
    (or (pred (first coll)) (recur pred (next coll)))))

(defn refer-timl [& args]
  (apply refer 'timl.core args))
(defmacro ns [name & args]
  `(do
     (in-ns '~name)
     ~(if (some #{:refer-timl} (map first args))
        `nil
        `(refer-timl))
     ~@(map (fn [[cmd & args]]
              (or (when (#{:require :use} cmd)
                    (let [qsym (if (#{:require} cmd)
                                 `require
                                 `use)]
                      `(do ~@(map (fn [a1] `(~qsym '~a1)) args))))
                  (when (#{:refer} cmd)
                    `(refer ~@(map (fn [a] `'~a) args)))
                  (when (#{:refer-timl} cmd)
                    `(refer-timl ~@(map (fn [a] `'~a) args)))))
            args)))

(defn ns-resolve
  ([ns sym] (#*timl#namespace#maybe_resolve ns sym))
  ([ns env sym] (if (contains? (:locals env) sym) nil (ns-resolve ns sym))))

(defn resolve
  ([sym] (ns-resolve *ns* sym))
  ([env sym] (ns-resolve *ns* env sym)))

(defmacro defmethod [name type & body]
  `(#*timl#type#define_method *ns* '~name ~(symbol (. (resolve type) str)) (fn ~@body)))

(load "core_macros")
(load "core_basics")
(load "core_seq")
(load "core_coll")
(load "core_ref")
(load "core_vim")
