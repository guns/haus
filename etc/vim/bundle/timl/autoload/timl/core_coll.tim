(in-ns 'timl.core)

(defn to-array [x] (#*timl#array#coerce x))

(defn find [m k] (when (contains? m k) [k (get m k)]))
(defn key [x] (first x))
(defn val [x] (second x))
(defn keys [m] (map key m))
(defn vals [m] (map val m))
(defn get-in [m ks] (reduce get m ks))
(defn associative? [c] (can? c assoc))

(defn comparator [>]
  (fn [x y]
    (if (> x y)
      1
      (if (> y x)
        -1
        0))))

(defn sort
  ([xs] (#*sort (to-array xs)))
  ([op xs]
   (let [cmp (comparator op)]
     (#*sort (to-array xs) #*timl#function#invoke_self cmp))))

(defn merge
  [& maps]
  (when (some identity maps)
    (reduce #(conj (or %1 {}) %2) maps)))
