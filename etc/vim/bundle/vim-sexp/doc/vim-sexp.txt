*vim-sexp.txt*	Precision Editing for Symbolic Expressions

            o8o
            '"'
oooo    ooooooo ooo. .oo.  .oo.        .oooo.o  .ooooo. oooo    ooooo.ooooo.
 `88.  .8' `888 `888P"Y88bP"Y88b      d88(  "8 d88' `88b `88b..8P'  888' `88b
  `88..8'   888  888   888   888 8888 `"Y88b.  888ooo888   Y888'    888   888
   `888'    888  888   888   888      o.  )88b 888    .o .o8"'88b   888   888
    `8'    o888oo888o o888o o888o     8""888P' `Y8bod8P'o88'   888o 888bod8P'
                                                                    888
                                                                   o888o

==============================================================================
I. INTRODUCTION                                            *sexp-introduction*

Symbolic Expressions are the simplest way to express recursive tree-like
structures with text, and give Lisps their distinctive look and feel. Emacs
users know that what appear to be a preponderance of brackets are really hooks
the editor may use to effortlessly transform the text before them.

Vim, possessing |cursor-motions| and an |operator-pending| mode, is well
suited for editing structured text. This plugin extends these ideas to
S-Expressions as embodied by both classical Lisps like Scheme and new Lisps
like Clojure.

A handful of features found in the popular S-Expression plugin for emacs,
paredit.el, are also provided.

==============================================================================
II. MAPPINGS                                                   *sexp-mappings*

This is the list of mappings provided by vim-sexp grouped by type. The default
key mapping is shown on the left and the full <Plug> name on the right.

Note that all actions that result in visual selections will always be
|characterwise|, regardless of the current visual state.

If vim-repeat [1] is installed, repeating the last change with the |.| command
will work as expected, even for changes made with |operator-pending| commands.

The key mappings are only available in |FileType|s that match the
|g:sexp_filetypes| option, but the <Plug> mappings are available globally, so
you can bind them manually in any filetype:
>
        " Clojure:
        "   Use the FireplacePrint operator from fireplace.vim [2] to evaluate
        "   the current top-level compound form, compound form, or element
        "   without moving the cursor.
        nmap <Leader>F <Plug>FireplacePrint<Plug>(sexp_outer_top_list)``
        nmap <Leader>f <Plug>FireplacePrint<Plug>(sexp_outer_list)``
        nmap <Leader>e <Plug>FireplacePrint<Plug>(sexp_inner_element)``

        " Screen.vim [3]:
        "   Select the current top-level compound form, compound form, or
        "   element and send it to a GNU Screen window or Tmux pane.
        nmap <Leader>F v<Plug>(sexp_outer_top_list):ScreenSend<CR>``
        nmap <Leader>f v<Plug>(sexp_outer_list):ScreenSend<CR>``
        nmap <Leader>e v<Plug>(sexp_inner_element):ScreenSend<CR>``
<
Insert mode mappings are enabled by default and can be disabled with
|g:sexp_enable_insert_mode_mappings|.

All mappings can be easily changed via |g:sexp_mappings|. Users who prefer
more explicit, opt-in configuration should read |sexp-explicit-mappings|.

[1]: https://github.com/tpope/vim-repeat
[2]: https://github.com/tpope/vim-fireplace
[3]: https://github.com/ervandew/screen

TEXT OBJECT SELECTIONS (visual, operator-pending)~

af                                                   *<Plug>(sexp_outer_list)*
if                                                   *<Plug>(sexp_inner_list)*
        Select [count] lists (compound FORMS) delimited by any of '(' and ')',
        '[' and ']', or '{' and '}'. Outer motion includes the delimiting
        brackets and the inner motion excludes them.

        Does not include surrounding whitespace.

        If the cursor is not in a compound form, the current element is
        selected instead. See |<Plug>(sexp_outer_element)|.

aF                                               *<Plug>(sexp_outer_top_list)*
iF                                               *<Plug>(sexp_inner_top_list)*
        Select the current top-level list (compound FORM) delimited by any of
        '(' and ')', '[' and ']', or '{' or '}'. Outer motion includes the
        delimiting brackets and the inner motion excludes them.

        Does not include surrounding whitespace.

        If |g:sexp_maxlines| is -1 (the default), the top-level list is
        determined to be the first parent list with a opening bracket
        on the first column. This is typically much faster than calling
        |searchpairpos()| recursively.

        If the cursor is not in a compound form, the current element is
        selected instead. See |<Plug>(sexp_outer_element)|.

as                                                 *<Plug>(sexp_outer_string)*
is                                                 *<Plug>(sexp_inner_string)*
        Select the current string or regular expression. Outer motion includes
        surrounding quotes, inner motion excludes them.

        Does not include surrounding whitespace.

        The default mappings shadow the internal |as| and |is| mappings. These
        sentence object selections are of limited use in code buffers, but if
        you disagree, see |g:sexp_mappings| for documentation on changing the
        default mappings.

ae                                                *<Plug>(sexp_outer_element)*
ie                                                *<Plug>(sexp_inner_element)*
        Select the current element. An element is defined as:

            * Current string if cursor is in a string
            * Current comment if cursor is in a comment, or in the whitespace
              between two line comments
            * Current compound form if cursor is on a paired bracket
            * Current sequence of leading macro characters and following
              element if cursor is on a macro character
            * Current atom otherwise

        An element always includes leading macro characters.

        Inner motion does not include surrounding whitespace, but the outer
        motion includes (ordered by priority):

            * Trailing whitespace up to the next element if next element is on
              the same line
            * Trailing whitespace up to the next element on a subsequent line
              if the current element begins on its own line
            * Trailing whitespace up to the end of line if the current element
              is preceded by another element on the same line
            * Leading whitespace up to the previous element if it exists on
              the same line as the current element and no trailing whitespace
              exists

        If the cursor is on whitespace that is not in a string or between line
        comments, the motion includes the current position up to and including
        the end of the next element, if it exists.

TEXT OBJECT MOTIONS (normal, visual, operator-pending)~

(                                          *<Plug>(sexp_move_to_prev_bracket)*
)                                          *<Plug>(sexp_move_to_next_bracket)*
        [count] paired brackets backward or forward, |exclusive|.

        When used in |operator-pending| mode, the following exceptions apply:

            * [count] is ignored
            * Backward motion excludes the foremost bracket
            * Forward motion from a bracket excludes both the current bracket
              and the last bracket, unless the resulting selection is empty,
              in which case the motion includes both brackets

        The default mappings shadow the internal |(| and |)| mappings. These
        sentence object motions are of limited use in code buffers, but if
        you disagree, see |g:sexp_mappings| for documentation on changing the
        default mappings.

<M-b>                                 *<Plug>(sexp_move_to_prev_element_head)*
<M-w>                                 *<Plug>(sexp_move_to_next_element_head)*
        [count] sibling elements backward or forward, |exclusive|, placing the
        cursor on the head of an element. Movement is bounded by the parent
        list, if any.

        Analogous to |b| and |w| motions.

g<M-e>                                *<Plug>(sexp_move_to_prev_element_tail)*
<M-e>                                 *<Plug>(sexp_move_to_next_element_tail)*
        [count] sibling elements backward or forward, |inclusive|, placing the
        cursor on the tail of an element. Movement is bounded by the parent
        list, if any.

        Analogous to |ge| and |e| motions.

[[                                     *<Plug>(sexp_move_to_prev_top_element)*
]]                                     *<Plug>(sexp_move_to_next_top_element)*
        [count] top-level elements backward or forward, |exclusive|.

        If |g:sexp_maxlines| is -1 (the default) and the current element is
        in a list, the top-level element is determined to be the first parent
        list with a opening bracket on the first column. This is typically
        much faster than calling |searchpairpos()| recursively.

[e                                          *<Plug>(sexp_select_prev_element)*
]e                                          *<Plug>(sexp_select_next_element)*
        Select [count]th element from the current element. Unlike the others,
        these motions always result in a visual selection of a single element,
        even when called from visual mode (typically the current selection is
        extended).

        This motion is particularly useful in |operator-pending| mode. For
        instance, in an (if pred then else) form with the cursor on "pred",
        c]e will delete and insert at the "then" form, while c2]e will delete
        and insert at the "else" form.

INDENT COMMANDS (normal)~

==                                                       *<Plug>(sexp_indent)*
=-                                                   *<Plug>(sexp_indent_top)*
        Indent [count] surrounding lists (compound FORMs) or current top-level
        list without moving the cursor. If the cursor is not in a compound
        FORM, the current element is indented instead.

        == shadows the builtin |==| mapping. If you wish to remap this
        command, see |g:sexp_mappings| for more information.

WRAP COMMANDS (normal, visual)~

<LocalLeader>i                             *<Plug>(sexp_round_head_wrap_list)*
<LocalLeader>I                             *<Plug>(sexp_round_tail_wrap_list)*
<LocalLeader>[                            *<Plug>(sexp_square_head_wrap_list)*
<LocalLeader>]                            *<Plug>(sexp_square_tail_wrap_list)*
<LocalLeader>{                             *<Plug>(sexp_curly_head_wrap_list)*
<LocalLeader>}                             *<Plug>(sexp_curly_tail_wrap_list)*
        Wrap the current list (compound FORM) or visual selection with '(' and
        ')', '[' and ']', or '{' and '}' and place the cursor at the head or
        tail of the newly created list.

        If |g:sexp_insert_after_wrap| is set (true by default), insert mode is
        entered. Additionally, if the cursor is to be set at the head of the
        list, a space is conditionally appended after the opening bracket so
        that any typed characters will be separated from the next element.

<LocalLeader>W                          *<Plug>(sexp_round_head_wrap_element)*
<LocalLeader>w                          *<Plug>(sexp_round_tail_wrap_element)*
<LocalLeader>e[                        *<Plug>(sexp_square_head_wrap_element)*
<LocalLeader>e]                        *<Plug>(sexp_square_tail_wrap_element)*
<LocalLeader>e{                         *<Plug>(sexp_curly_head_wrap_element)*
<LocalLeader>e}                         *<Plug>(sexp_curly_tail_wrap_element)*
        Wrap the current element or visual selection with '(' and ')', '[' and
        ']', or '{' and '}' and place the cursor at the head or tail of the
        newly created list.

        If |g:sexp_insert_after_wrap| is set (true by default), insert mode is
        entered. Additionally, if the cursor is to be set at the head of the
        list, a space is conditionally appended after the opening bracket so
        that any typed characters will be separated from the next element.

CURSOR INSERTION (normal)~

<LocalLeader>h                              *<Plug>(sexp_insert_at_list_head)*
<LocalLeader>l                              *<Plug>(sexp_insert_at_list_tail)*
        Move cursor to head or tail of current list (compound FORM) and enter
        insert mode.

        If inserting at the head, a space is conditionally appended after the
        opening bracket so that any typed characters will be separated from
        the next element.

LIST MANIPULATION (normal, visual)~

<LocalLeader>@                                      *<Plug>(sexp_splice_list)*
        Splice the current list (compound FORM) into its parent scope [count]
        times by deleting each list's brackets. This mapping is not available
        in visual mode.

<LocalLeader>o                                       *<Plug>(sexp_raise_list)*
<LocalLeader>O                                    *<Plug>(sexp_raise_element)*
        Replace [count] enclosing lists (compound FORMs) with the current
        list, element, or visual selection.

<M-k>                                        *<Plug>(sexp_swap_list_backward)*
<M-j>                                         *<Plug>(sexp_swap_list_forward)*
<M-h>                                     *<Plug>(sexp_swap_element_backward)*
<M-l>                                      *<Plug>(sexp_swap_element_forward)*
        Swap the current list (compound FORM), element, or visual selection
        [count] times with the adjacent list or element. Does nothing if there
        is no adjacent element in the desired direction.

        If moving a visual selection, the selection is first expanded to cover
        all partially selected lists and elements so that structural integrity
        is maintained.

        If moving an even number of elements with a visual selection, the
        swap is done pairwise to preserve the associative structure of the
        containing compound form.

<M-S-j>                                       *<Plug>(sexp_emit_head_element)*
<M-S-k>                                       *<Plug>(sexp_emit_tail_element)*
<M-S-h>                                    *<Plug>(sexp_capture_prev_element)*
<M-S-l>                                    *<Plug>(sexp_capture_next_element)*
        Emit [count] terminal elements of the current list, or capture [count]
        elements adjacent to the current list. A list will never emit its last
        element and can not capture its parent.

        These commands are similar to "barfage" and "slurpage" in paredit.el.

INSERT MODE MAPPINGS (insert, optional)~

(                                          *<Plug>(sexp_insert_opening_round)*
[                                         *<Plug>(sexp_insert_opening_square)*
{                                          *<Plug>(sexp_insert_opening_curly)*
        Insert a pair of '(' and ')', '[' and ']', or '{' and '}', inserting
        spaces as necessary to separate the new list from adjacent
        non-compound elements.

        If the cursor is in a string, regular expression, comment, or
        character atom, insert an unpaired bracket.

        To force insertion of the bracket, precede it with |i_Ctrl-V|.

)                                          *<Plug>(sexp_insert_closing_round)*
]                                         *<Plug>(sexp_insert_closing_square)*
}                                          *<Plug>(sexp_insert_closing_curly)*
        Insert a closing ')', ']', or '}' if the corresponding opening bracket
        is unpaired. If it is paired, jump to the next paired instance of
        the closing bracket. If the cursor is on the paired closing bracket,
        advance one character to the right.

        If the cursor is in a string, regular expression, comment, or
        character atom, insert an unpaired bracket.

        To force insertion of the bracket, precede it with |i_Ctrl-V|.

"                                           *<Plug>(sexp_insert_double_quote)*
        Insert a pair of double quotes, inserting spaces as necessary to
        separate the new string from adjacent non-compound elements.

        If the cursor is in a string or regular expression, insert an unpaired
        quote. If the cursor is on a double quote, advance one character to
        the right, unless the previous character is a backslash, in which case
        the quote is inserted regardless.

        If the cursor is in a comment or character atom, insert an unpaired
        quote.

        To force insertion of the quote, precede it with |i_Ctrl-V|.

<BS>                                           *<Plug>(sexp_insert_backspace)*
        Delete adjacent double quotes from within a string, unless the leading
        quote is preceded by another quote or a backslash.

        Delete adjacent paired brackets, unless the cursor is in a string,
        regular expression, comment, or character atom.

        Normal backspace otherwise.

==============================================================================
III. OPTIONS                                                    *sexp-options*

                                                            *g:sexp_filetypes*
A string representing an |autocmd-pattern| for the |FileType|s in which you
wish to activate vim-sexp mappings.
>
        " Default
        let g:sexp_filetypes = 'clojure,scheme,lisp,timl'
<
                                          *g:sexp_enable_insert_mode_mappings*
Toggle insert mode mappings in |g:sexp_filetypes|.
>
        " Default
        let g:sexp_enable_insert_mode_mappings = 1
<
                                                    *g:sexp_insert_after_wrap*
Enter insert mode (and append a space after the opening bracket when inserting
at head) after using a wrap command like |<Plug>(sexp_round_head_wrap_list)|.
>
        " Default
        let g:sexp_insert_after_wrap = 1
<
                                                             *g:sexp_mappings*
Dictionary of user vim-sexp mappings. Keys are the <Plug> names without
"<Plug>" or the surrounding parentheses, and the values are the key sequences
you wish to bind to.

This dictionary is merged over the dictionary of default mappings, so it is
not necessary to copy all the entries to change a few.
>
        " Default
        let g:sexp_mappings = {}

        " vim-sexp internal mappings
        let s:sexp_mappings = {
            \ 'sexp_outer_list':                'af',
            \ 'sexp_inner_list':                'if',
            \ 'sexp_outer_top_list':            'aF',
            \ 'sexp_inner_top_list':            'iF',
            \ 'sexp_outer_string':              'as',
            \ 'sexp_inner_string':              'is',
            \ 'sexp_outer_element':             'ae',
            \ 'sexp_inner_element':             'ie',
            \ 'sexp_move_to_prev_bracket':      '(',
            \ 'sexp_move_to_next_bracket':      ')',
            \ 'sexp_move_to_prev_element_head': '<M-b>',
            \ 'sexp_move_to_next_element_head': '<M-w>',
            \ 'sexp_move_to_prev_element_tail': 'g<M-e>',
            \ 'sexp_move_to_next_element_tail': '<M-e>',
            \ 'sexp_move_to_prev_top_element':  '[[',
            \ 'sexp_move_to_next_top_element':  ']]',
            \ 'sexp_select_prev_element':       '[e',
            \ 'sexp_select_next_element':       ']e',
            \ 'sexp_indent':                    '==',
            \ 'sexp_indent_top':                '=-',
            \ 'sexp_round_head_wrap_list':      '<LocalLeader>i',
            \ 'sexp_round_tail_wrap_list':      '<LocalLeader>I',
            \ 'sexp_square_head_wrap_list':     '<LocalLeader>[',
            \ 'sexp_square_tail_wrap_list':     '<LocalLeader>]',
            \ 'sexp_curly_head_wrap_list':      '<LocalLeader>{',
            \ 'sexp_curly_tail_wrap_list':      '<LocalLeader>}',
            \ 'sexp_round_head_wrap_element':   '<LocalLeader>w',
            \ 'sexp_round_tail_wrap_element':   '<LocalLeader>W',
            \ 'sexp_square_head_wrap_element':  '<LocalLeader>e[',
            \ 'sexp_square_tail_wrap_element':  '<LocalLeader>e]',
            \ 'sexp_curly_head_wrap_element':   '<LocalLeader>e{',
            \ 'sexp_curly_tail_wrap_element':   '<LocalLeader>e}',
            \ 'sexp_insert_at_list_head':       '<LocalLeader>h',
            \ 'sexp_insert_at_list_tail':       '<LocalLeader>l',
            \ 'sexp_splice_list':               '<LocalLeader>@',
            \ 'sexp_raise_list':                '<LocalLeader>o',
            \ 'sexp_raise_element':             '<LocalLeader>O',
            \ 'sexp_swap_list_backward':        '<M-k>',
            \ 'sexp_swap_list_forward':         '<M-j>',
            \ 'sexp_swap_element_backward':     '<M-h>',
            \ 'sexp_swap_element_forward':      '<M-l>',
            \ 'sexp_emit_head_element':         '<M-S-j>',
            \ 'sexp_emit_tail_element':         '<M-S-k>',
            \ 'sexp_capture_prev_element':      '<M-S-h>',
            \ 'sexp_capture_next_element':      '<M-S-l>',
            \ }
<
To unbind a mapping, keep the key in the dictionary with an empty string
as the value. For example, if you wanted to avoid shadowing vim's sentence
motions:
>
        let g:sexp_mappings = {
            \ 'sexp_outer_string':              'aS',
            \ 'sexp_inner_string':              'iS',
            \ 'sexp_move_to_prev_bracket':      '',
            \ 'sexp_move_to_next_bracket':      '',
            \ }
<
This would remap the string object selection mappings and remove the adjacent
bracket object motion mappings altogether.

                                                             *g:sexp_maxlines*
Searching for paired brackets is accomplished with the |searchpairpos()|
function, and it is invoked quite often in this plugin.

If g:sexp_maxlines is 0 or -1, |searchpairpos()| scans the entire buffer for
its match, which can be slow if the nearest bracket is far from the cursor.
If g:sexp_maxlines is positive, the scan is limited to this number of lines,
trading accuracy for performance.

If searching for a top-level compound form via |<Plug>(sexp_outer_top_list)|
or |<Plug>(sexp_move_to_prev_top_element)| with g:sexp_maxlines equal to 0,
|searchpairpos()| will be run recursively until the whole buffer is scanned
for possible unpaired brackets. In moderately large buffers, this is an
extremely slow operation. Setting g:sexp_maxlines to about 100 removes this
speed penalty, but the accuracy often suffers noticeably.

If g:sexp_maxlines is set to -1, top-level bracket searches stop when a
bracket is found in the first column. For most Lisp buffers, this is both
accurate and relatively quick, so it is the default setting.
>
        " Default
        let g:sexp_maxlines = -1
<
==============================================================================
IV. EXPLICIT MAPPINGS                                 *sexp-explicit-mappings*

If you find managing your mappings via |g:sexp_mappings| awkward, you may wish
to opt for a more explicit mapping configuration instead.

First, disable the provided mapping system by setting |g:sexp_filetypes| to an
empty string:
>
        " Disable mapping hooks
        let g:sexp_filetypes = ''
<
Next, write a function that will create your desired |:map-local| bindings.
The following example includes every default mapping in vim-sexp. You can
copy, paste, and edit this example to taste.
>
        function! s:vim_sexp_mappings()
            xmap <silent><buffer> af              <Plug>(sexp_outer_list)
            omap <silent><buffer> af              <Plug>(sexp_outer_list)
            xmap <silent><buffer> if              <Plug>(sexp_inner_list)
            omap <silent><buffer> if              <Plug>(sexp_inner_list)
            xmap <silent><buffer> aF              <Plug>(sexp_outer_top_list)
            omap <silent><buffer> aF              <Plug>(sexp_outer_top_list)
            xmap <silent><buffer> iF              <Plug>(sexp_inner_top_list)
            omap <silent><buffer> iF              <Plug>(sexp_inner_top_list)
            xmap <silent><buffer> as              <Plug>(sexp_outer_string)
            omap <silent><buffer> as              <Plug>(sexp_outer_string)
            xmap <silent><buffer> is              <Plug>(sexp_inner_string)
            omap <silent><buffer> is              <Plug>(sexp_inner_string)
            xmap <silent><buffer> ae              <Plug>(sexp_outer_element)
            omap <silent><buffer> ae              <Plug>(sexp_outer_element)
            xmap <silent><buffer> ie              <Plug>(sexp_inner_element)
            omap <silent><buffer> ie              <Plug>(sexp_inner_element)
            nmap <silent><buffer> (               <Plug>(sexp_move_to_prev_bracket)
            xmap <silent><buffer> (               <Plug>(sexp_move_to_prev_bracket)
            omap <silent><buffer> (               <Plug>(sexp_move_to_prev_bracket)
            nmap <silent><buffer> )               <Plug>(sexp_move_to_next_bracket)
            xmap <silent><buffer> )               <Plug>(sexp_move_to_next_bracket)
            omap <silent><buffer> )               <Plug>(sexp_move_to_next_bracket)
            nmap <silent><buffer> <M-b>           <Plug>(sexp_move_to_prev_element_head)
            xmap <silent><buffer> <M-b>           <Plug>(sexp_move_to_prev_element_head)
            omap <silent><buffer> <M-b>           <Plug>(sexp_move_to_prev_element_head)
            nmap <silent><buffer> <M-w>           <Plug>(sexp_move_to_next_element_head)
            xmap <silent><buffer> <M-w>           <Plug>(sexp_move_to_next_element_head)
            omap <silent><buffer> <M-w>           <Plug>(sexp_move_to_next_element_head)
            nmap <silent><buffer> g<M-e>          <Plug>(sexp_move_to_prev_element_tail)
            xmap <silent><buffer> g<M-e>          <Plug>(sexp_move_to_prev_element_tail)
            omap <silent><buffer> g<M-e>          <Plug>(sexp_move_to_prev_element_tail)
            nmap <silent><buffer> <M-e>           <Plug>(sexp_move_to_next_element_tail)
            xmap <silent><buffer> <M-e>           <Plug>(sexp_move_to_next_element_tail)
            omap <silent><buffer> <M-e>           <Plug>(sexp_move_to_next_element_tail)
            nmap <silent><buffer> [[              <Plug>(sexp_move_to_prev_top_element)
            xmap <silent><buffer> [[              <Plug>(sexp_move_to_prev_top_element)
            omap <silent><buffer> [[              <Plug>(sexp_move_to_prev_top_element)
            nmap <silent><buffer> ]]              <Plug>(sexp_move_to_next_top_element)
            xmap <silent><buffer> ]]              <Plug>(sexp_move_to_next_top_element)
            omap <silent><buffer> ]]              <Plug>(sexp_move_to_next_top_element)
            nmap <silent><buffer> [e              <Plug>(sexp_select_prev_element)
            xmap <silent><buffer> [e              <Plug>(sexp_select_prev_element)
            omap <silent><buffer> [e              <Plug>(sexp_select_prev_element)
            nmap <silent><buffer> ]e              <Plug>(sexp_select_next_element)
            xmap <silent><buffer> ]e              <Plug>(sexp_select_next_element)
            omap <silent><buffer> ]e              <Plug>(sexp_select_next_element)
            nmap <silent><buffer> ==              <Plug>(sexp_indent)
            nmap <silent><buffer> =-              <Plug>(sexp_indent_top)
            nmap <silent><buffer> <LocalLeader>i  <Plug>(sexp_round_head_wrap_list)
            xmap <silent><buffer> <LocalLeader>i  <Plug>(sexp_round_head_wrap_list)
            nmap <silent><buffer> <LocalLeader>I  <Plug>(sexp_round_tail_wrap_list)
            xmap <silent><buffer> <LocalLeader>I  <Plug>(sexp_round_tail_wrap_list)
            nmap <silent><buffer> <LocalLeader>[  <Plug>(sexp_square_head_wrap_list)
            xmap <silent><buffer> <LocalLeader>[  <Plug>(sexp_square_head_wrap_list)
            nmap <silent><buffer> <LocalLeader>]  <Plug>(sexp_square_tail_wrap_list)
            xmap <silent><buffer> <LocalLeader>]  <Plug>(sexp_square_tail_wrap_list)
            nmap <silent><buffer> <LocalLeader>{  <Plug>(sexp_curly_head_wrap_list)
            xmap <silent><buffer> <LocalLeader>{  <Plug>(sexp_curly_head_wrap_list)
            nmap <silent><buffer> <LocalLeader>}  <Plug>(sexp_curly_tail_wrap_list)
            xmap <silent><buffer> <LocalLeader>}  <Plug>(sexp_curly_tail_wrap_list)
            nmap <silent><buffer> <LocalLeader>w  <Plug>(sexp_round_head_wrap_element)
            xmap <silent><buffer> <LocalLeader>w  <Plug>(sexp_round_head_wrap_element)
            nmap <silent><buffer> <LocalLeader>W  <Plug>(sexp_round_tail_wrap_element)
            xmap <silent><buffer> <LocalLeader>W  <Plug>(sexp_round_tail_wrap_element)
            nmap <silent><buffer> <LocalLeader>e[ <Plug>(sexp_square_head_wrap_element)
            xmap <silent><buffer> <LocalLeader>e[ <Plug>(sexp_square_head_wrap_element)
            nmap <silent><buffer> <LocalLeader>e] <Plug>(sexp_square_tail_wrap_element)
            xmap <silent><buffer> <LocalLeader>e] <Plug>(sexp_square_tail_wrap_element)
            nmap <silent><buffer> <LocalLeader>e{ <Plug>(sexp_curly_head_wrap_element)
            xmap <silent><buffer> <LocalLeader>e{ <Plug>(sexp_curly_head_wrap_element)
            nmap <silent><buffer> <LocalLeader>e} <Plug>(sexp_curly_tail_wrap_element)
            xmap <silent><buffer> <LocalLeader>e} <Plug>(sexp_curly_tail_wrap_element)
            nmap <silent><buffer> <LocalLeader>h  <Plug>(sexp_insert_at_list_head)
            nmap <silent><buffer> <LocalLeader>l  <Plug>(sexp_insert_at_list_tail)
            nmap <silent><buffer> <LocalLeader>@  <Plug>(sexp_splice_list)
            nmap <silent><buffer> <LocalLeader>o  <Plug>(sexp_raise_list)
            xmap <silent><buffer> <LocalLeader>o  <Plug>(sexp_raise_list)
            nmap <silent><buffer> <LocalLeader>O  <Plug>(sexp_raise_element)
            xmap <silent><buffer> <LocalLeader>O  <Plug>(sexp_raise_element)
            nmap <silent><buffer> <M-k>           <Plug>(sexp_swap_list_backward)
            xmap <silent><buffer> <M-k>           <Plug>(sexp_swap_list_backward)
            nmap <silent><buffer> <M-j>           <Plug>(sexp_swap_list_forward)
            xmap <silent><buffer> <M-j>           <Plug>(sexp_swap_list_forward)
            nmap <silent><buffer> <M-h>           <Plug>(sexp_swap_element_backward)
            xmap <silent><buffer> <M-h>           <Plug>(sexp_swap_element_backward)
            nmap <silent><buffer> <M-l>           <Plug>(sexp_swap_element_forward)
            xmap <silent><buffer> <M-l>           <Plug>(sexp_swap_element_forward)
            nmap <silent><buffer> <M-S-j>         <Plug>(sexp_emit_head_element)
            xmap <silent><buffer> <M-S-j>         <Plug>(sexp_emit_head_element)
            nmap <silent><buffer> <M-S-k>         <Plug>(sexp_emit_tail_element)
            xmap <silent><buffer> <M-S-k>         <Plug>(sexp_emit_tail_element)
            nmap <silent><buffer> <M-S-h>         <Plug>(sexp_capture_prev_element)
            xmap <silent><buffer> <M-S-h>         <Plug>(sexp_capture_prev_element)
            nmap <silent><buffer> <M-S-l>         <Plug>(sexp_capture_next_element)
            xmap <silent><buffer> <M-S-l>         <Plug>(sexp_capture_next_element)
            imap <silent><buffer> <BS>            <Plug>(sexp_insert_backspace)
            imap <silent><buffer> "               <Plug>(sexp_insert_double_quote)
            imap <silent><buffer> (               <Plug>(sexp_insert_opening_round)
            imap <silent><buffer> )               <Plug>(sexp_insert_closing_round)
            imap <silent><buffer> [               <Plug>(sexp_insert_opening_square)
            imap <silent><buffer> ]               <Plug>(sexp_insert_closing_square)
            imap <silent><buffer> {               <Plug>(sexp_insert_opening_curly)
            imap <silent><buffer> }               <Plug>(sexp_insert_closing_curly)
        endfunction
<
Finally, install a |FileType| |autocmd| that will execute the function above
in the filetypes of your choosing.
>
        augroup VIM_SEXP_MAPPING
            autocmd!
            autocmd FileType clojure,scheme,lisp,timl call s:vim_sexp_mappings()
        augroup END
<
==============================================================================
V. CHANGELOG                                                  *sexp-changelog*

03 March 2015
        - Add documentation on how to opt-out of g:sexp_mappings and manually
          create per-filetype buffer local mappings.
        - Remove deprecated mappings sexp_lift_list and sexp_list_element,
          which were previously renamed to sexp_raise_list and
          sexp_raise_element respectively.
        - Remove deprecated unparenthesized <Plug> mappings.
        - Remove visual mode mappings from sexp_insert_at_list_head,
          sexp_insert_at_list_tail, and sexp_splice_list.

 vim:tw=78:et:sw=8:sts=8:ts=8:ft=help:norl:
