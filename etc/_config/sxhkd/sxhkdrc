
#            _     _       _
#   _____  _| |__ | | ____| |
#  / __\ \/ / '_ \| |/ / _` |
#  \__ \>  <| | | |   < (_| |
#  |___/_/\_\_| |_|_|\_\__,_|  guns <self@sungpae.com>
#

# Conventions:
#	super + alt           => Desktop bindings
#	super + control       => Window bindings
#	super + alt + control => Direct actions

super + alt + control + r
	notify --alert --icon gnome-window-manager --title sxhkd 'Reloading bspwmrc and sxhkdrc'; \
	pkill --exact -USR1 sxhkd; \
	~/.config/bspwm/bspwmrc

super + alt + control + q
	bspc quit

#
# Desktops {{{1
#

super + alt + space
	bspc desktop --layout next

super + alt + {j,k,button1,button3}
	bspc desktop --focus {next,prev,next,prev}

super + alt + {l,h}
	DIR={next,prev,next,prev}; \
	NODE="$(bspc query --nodes --node focused)"; \
	bspc node --to-desktop "$DIR" && \
	bspc desktop --focus "$DIR" && \
	bspc node --focus "$NODE"

{alt + grave, button10}
	bspc desktop --focus last

super + alt + {0-9}
	bspc desktop --focus ^{0-9}

super + alt + shift + {0-9}
	bspc node --to-desktop ^{0-9}

super + alt + control + {0-9}
	bspc desktop --swap ^{0-9}

super + alt + {f,v}
	bspc node @/ --flip {vertical,horizontal}

super + alt + {r,shift + r}
	bspc node @/ --rotate {90,270}

super + alt + {b,c,e}
	bspc node @/ --{balance,circulate forward,equalize}

super + alt + {Next,Prior,button4,button5}
	GAP=$(($(bspc config -d focused window_gap) {+,-,+,-} 4)); \
	bspc config -d focused window_gap $((GAP < 0 ? 0 : GAP))

#
# Windows {{{1
#

super + q
	bspc node --close

super + {Tab,shift + Tab}
	bspc node --focus {next,prev}.local

super + grave
	bspc node --focus last

alt + Tab
	if pkill --exact skippy-xd; then \
		bspc node --focus focused; \
	else \
		skippy-xd; \
	fi

super + control + {h,j,k,l}
	bspc node --presel-dir ~{west,south,north,east}

super + control + shift + {h,j,k,l}
	bspc node --swap {west,south,north,east}

super + control + {1-9}
	bspc node --presel-ratio 0.{1-9}

super + control + f
	if bspc query --nodes --node focused.floating; then \
		bspc node --state tiled; \
	else \
		bspc node --state floating; \
	fi

F11
	if bspc query --nodes --node focused.fullscreen; then \
		bspc node --state tiled; \
	else \
		bspc node --state fullscreen; \
	fi

super + control + p
	if bspc query --nodes --node focused.pseudo_tiled; then \
		bspc node --state tiled; \
	else \
		bspc node --state pseudo_tiled; \
	fi

super + control + shift + p
	bspc node --flag private

super + control + x
	bspc node --flag locked

super + control + s
	bspc node --flag sticky

super + alt + control + {h,j,k,l}
	bspc node @{west --ratio -10,south --ratio +10,north --ratio -10,east --ratio +10}

super + alt + control + shift + {h,j,k,l}
	bspc node @{west --ratio +10,south --ratio -10,north --ratio +10,east --ratio -10}

#
# Power {{{1
#

{XF86Eject,Pause}
	pkill --exact -HUP gpg-agent; sudo -n /usr/bin/powerctl slock

{super + XF86Eject,super + Pause,XF86Sleep}
	sudo -n /usr/bin/powerctl suspend

super + alt + {XF86Eject,Pause,XF86Sleep}
	sudo -n /usr/bin/powerctl reboot

super + alt + control + {XF86Eject,Pause,XF86Sleep}
	sudo -n /usr/bin/powerctl poweroff

control + {XF86Eject,Pause}
	pkill --exact -HUP gpg-agent && notify --alert --icon gnupg --title gpg-agent 'SIGHUP'

alt + {XF86Eject,Pause}
	if pgrep -x xautolock; then \
		pkill --exact xautolock; \
	else \
		xautolock-launch; \
	fi; \
	if pgrep -x xautolock; then \
		notify --alert --icon system-lock-screen --title xautolock 'enabled'; \
	else \
		notify --warning --icon dialog-warning --title xautlock 'DISABLED'; \
	fi

#
# Audio {{{1
#

{XF86AudioMute,super + KP_Enter}
	ponymix toggle

{XF86AudioLowerVolume,super + KP_Subtract}
	ponymix decrease 5

{XF86AudioRaiseVolume,super + KP_Add}
	ponymix increase 5

super + alt + control + {XF86AudioMute,KP_Enter}
	notify --no-audio --title 'Volume' --icon gnome-alsamixer-icon 'Muting for 30 seconds'; \
	remind 30s -c 'ponymix unmute'; \
	ponymix mute

{super + XF86AudioMute,super + shift + KP_Enter}
	T='♫ alsamixer ♫'; \
	wmctrl -a "$T" || \
	urxvt-client -title "$T" -icon ~/.icons/haus/alsamixergui.svg -g 130x30 -e alsamixer -Vall

{super + shift + XF86AudioMute,super + alt + KP_Enter}
	wmctrl -xa 'Pavucontrol' || pavucontrol

alt + {XF86AudioMute,KP_Enter}
	if pkill --exact -0 pulseaudio; then \
		notify --no-audio --icon gnome-alsamixer-icon --title pulseaudio - < <(hwctl toggle-pulseaudio-sink); \
	else \
		notify --no-audio --icon gnome-alsamixer-icon --title ALSA - < <(hwctl toggle-alsa-card); \
	fi

alt + shift + {XF86AudioMute,KP_Enter}
	if pkill --exact -0 pulseaudio; then \
		notify --no-audio --icon gnome-alsamixer-icon --title pulseaudio - < <(hwctl toggle-pulseaudio-source); \
	fi

#
# Miscellaneous {{{
#

{XF86MonBrightnessDown,super + shift + KP_Subtract}
	hwctl backlight -5

{XF86MonBrightnessUp,super + shift + KP_Add}
	hwctl backlight +5

super + alt + control + shift + {Left,Right,Up,Down}
	xrandr -o {left,right,inverted,normal}

shift + Print
	if maim --hidecursor ~/Downloads/"$(date "+screenshot-%Y-%m-%d-%H:%M:%S.png")"; then \
		notify --success 'Screenshot saved to ~/Downloads'; \
	else \
		notify --error 'Screenshot failed'; \
	fi

super + Print
	notify --alert --icon simplescreenrecorder --title maim 'Window/Selection screenshot mode'; \
	if maim --hidecursor --select ~/Downloads/"$(date "+screenshot-%Y-%m-%d-%H:%M:%S.png")"; then \
		notify --success 'Screenshot saved to ~/Downloads'; \
	else \
		notify --error 'Screenshot failed'; \
	fi

Scroll_Lock
	if [[ "$(toggle-mouse)" == true ]]; then \
		notify --alert --icon input-mouse --title Mouse "enabled"; \
	else \
		notify --warning --icon dialog-warning --title Mouse "DISABLED"; \
	fi

shift + Scroll_Lock
	xdotool mousemove 10000 10000

#
# Applications {{{1
#

F2
	wmctrl -xa 'Thunar' || exec thunar ~/Downloads

super + F2
	exec thunar ~/Downloads

F6
	wmctrl -a 'Time Tracker' || exec hamster

F7
	T='⚙ htop ⚙'; \
	wmctrl -a "$T" || urxvt-client -g 120x20 -title "$T" -icon ~/.icons/haus/htop.svg -e htop

super + F7
	T='⚙ nmon ⚙'; \
	wmctrl -a "$T" || urxvt-client -g 80x50  -title "$T" -icon ~/.icons/haus/htop.svg -e env NMON=vld- nmon

F8
	T='❴ pass ❵'; \
	wmctrl -a "$T" || \
	\{ \
		urxvt-client -g 80x10 -title "$T" -icon ~/.icons/haus/password-store.svg; \
		sleep 0.1; \
		xdotool type 'passclip '; \
	\}

F9
	wmctrl -a "$USER ❦ $HOSTNAME"

super + F9
	wmctrl -a "root ❦ $HOSTNAME"

alt + F9
	wmctrl -a "❦ MAGI-"

shift + F9
	urxvt-client

alt + shift + F9
	urxvt-client -icon ~/.icons/haus/root-terminal.svg -e sudo --set-home --login bash -c 'chown 0 "$(tty)"; exec "$SHELL"'

super + shift + F9
	urxvt-client -e tmuxlaunch -nd

super + alt + shift + F9
	urxvt-client -icon ~/.icons/haus/root-terminal.svg -e sudo --set-home --login bash -c 'chown 0 "$(tty)"; exec "'$(command -v tmuxlaunch)'" -d'

F10
	wmctrl -xa 'Nightly' || wmctrl -xa 'Firefox'

shift + F10
	(ps axo comm | grep ^firefox$) && exec firefox

shift + alt + F10
	(ps axo comm | grep ^firefox$) && exec firefox --private-window

super + F10
	wmctrl -xa 'Chromium'

super + shift + F10
	(ps axo comm | grep ^chromium$) && exec chromium

super + shift + alt + F10
	(ps axo comm | grep ^chromium$) && exec chromium --incognito

alt + F10
	wmctrl -a '♻ newsboat ♻'

F12
	T='✉ Mutt ✉'; \
	wmctrl -a "$T" || wmctrl -a "mutt-$HOSTNAME" || \
	urxvt-client -cd ~/Downloads -g 120x40 -title "$T" -icon ~/.icons/haus/mail.svg -e muttlaunch

super + F12
	urxvt-client -cd ~/Downloads -g 120x40 -title '✉ Mutt ✉' -icon ~/.icons/haus/mail.svg -e muttlaunch --force

alt + F12
	orage

super + control + e
	T=' - VIM'; \
	wmctrl -a "$T" || \
	urxvt-client -g 80x40 -title "VIM $T" -icon ~/.icons/haus/vim.svg -e vim

super + control + t
	T='☎ urxvt ☎'; \
	wmctrl -a "$T" || \
	urxvt-client -g 80x40 -title "$T" -icon ~/.icons/haus/terminal.svg

super + alt + control + t
	remind --query

super + alt + control + w
	nitrogen --set-zoom-fill --random --save

super + control + q
	wmctrl -a 'Qalculate!' || exec qalculate-gtk

# vim:noet:foldmethod=marker:
